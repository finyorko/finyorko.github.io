<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>network</title>
      <link href="/network.html"/>
      <url>/network.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络-自顶向下方法"><a href="#计算机网络-自顶向下方法" class="headerlink" title="计算机网络-自顶向下方法"></a>计算机网络-自顶向下方法</h1><h1 id="第一章-计算机网络和因特网"><a href="#第一章-计算机网络和因特网" class="headerlink" title="第一章　计算机网络和因特网"></a>第一章　计算机网络和因特网</h1><h2 id="什么是因特网"><a href="#什么是因特网" class="headerlink" title="什么是因特网"></a>什么是因特网</h2><p>因特网描述方式有两种：</p><ol><li>描述因特网具体构成：构成因特网的硬件和软件。</li><li>分布式应用提供服务的网络基础设施。</li></ol><h3 id="具体构成描述"><a href="#具体构成描述" class="headerlink" title="具体构成描述"></a>具体构成描述</h3><p><a href="https://s2.ax1x.com/2019/12/13/QgUHg0.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/13/QgUHg0.png" alt="组成"></a></p><p>主机（host）：与因特网相连的计算机等设备，也称为端系统（end system）。</p><p>端系统通过通信链路（communication link）和分组交换机（packet switch）连接到一起。</p><p>通信链路由不同类型的物理媒介组成，链路传播速度以bps度量。</p><p>分组：当一个端系统向另一个端系统发送时发送端系统将数据进行分段，并为每段加上首部字节，由此形成的信息包被称为分组，这些分组通过网络发送到目的端系统，在那里被装成初始数据。</p><p>分组交换机从它的一条入通信链路接收达到的分组，并从它的一条出通信链路转发该分组。当前最主要的两种分组交换机是路由器（router）和链路层交换机（link-layer switch）。</p><p>路径：从发送端到接收端，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径。</p><p>端系统通过因特网服务提供商（Internet Service Provider，ISP）接入因特网。每个ISP是一个由多个分组交换机和多段通信链路组成的网络。不同的ISP为端系统提供了各种不同类型的网络接入（各种调制解调器、高速局域网接入和无线接入）。底层ISP通过高层ISP互联。每个ISP独立管理，运行IP协议。</p><p>端系统、分组交换机和其他因特网部件都要运行控制中接收和发送信息的一系列协议。TCP（Transmission Control Protocol，传输控制协议）和IP（Internet Protocol，网际协议）是因特网中最重要的两个协议。IP协议定义了在路由器和端系统中发送和接受的分组的格式。因特网主要协议统称为TCP/IP。</p><p>公共因特网：特定网络，因特网。网络的网络，即将网络连接起来的网络。</p><p>内联网：专用网络，这些网络内的主机不能与专用网络外部的主机交换信息（除非这些信息通过了所谓的防火墙，否则防火墙一般会限制报文进入和流出网络）。</p><h3 id="服务描述"><a href="#服务描述" class="headerlink" title="服务描述"></a>服务描述</h3><p>分布式应用程序：涉及多台相互交换数据的端系统的程序。因特网应用程序运行在端系统上，即它们并不在网路核心的分组交换机上。</p><p>与因特网相连的端系统提供了一个应用编程接口（Application Programming Interface，API），API规定了运行在一个端系统上的软件请求因特网基础设施向另一个端系统上的特定目的地软件交付数据的方式。因特网是一种基础设施，新应用程序正在其上不断地被发明和设置。</p><h3 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a>什么是协议</h3><p>网路协议类似于人类协议，不过交换报文和采取行动的是某些设备的硬件或软件组件。因特网的所有活动，凡是涉及两个或多个通信的远程实体都受协议限制。</p><p>一个协议定义了两个或多个通信实体之间交换的报文格式和次序，以及在报文传输或接收或其他事件方面所采取的动作。</p><h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><p>端系统位于网络的边缘。端系统包括桌面计算机、服务器和移动计算机，还包括越来越多的其他类型设备。主机=端系统。主机又被分为客户机和服务器。</p><h3 id="客户机和服务器程序"><a href="#客户机和服务器程序" class="headerlink" title="客户机和服务器程序"></a>客户机和服务器程序</h3><p>客户程序运行在一个端系统上，它发出请求，并从运行在另一个端系统的服务器程序接收服务。客户机-服务器应用程序是分布式应用程序，客户机和服务器通过因特网护发报文以交互。</p><p>对等（P2P）应用程序：用户端程序起着客户机程序和服务器程序的双重作用。当它向一个对等方请求文件时，起着客户机的作用，向另一个对等方发送文件时起着服务器的作用。</p><h3 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h3><p>接入网：端系统连接到其边缘路由器的物理链路。边缘路由器是端系统到任何其他远程端系统的路径上第一个路由器。</p><p>住宅接入：拨号调制解调器。</p><p>公司接入：局域网（LAN）。</p><p>无线接入：无线局域网（wireless LAN），广域无线网（wide-area wireless access network）。</p><h3 id="物理媒介"><a href="#物理媒介" class="headerlink" title="物理媒介"></a>物理媒介</h3><p>导引型媒体：电波沿着固体媒体被传导：</p><ol><li>双绞铜线</li><li>同轴电缆</li><li>光钎</li></ol><p>非导引型媒体：电波在空气或外层空间中传播：</p><ol><li>陆地无线电信道</li><li>卫星无线电信道</li></ol><h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><p>网路核心：因特网端系统的分组交换机和链路的网状结构。</p><h3 id="电路交换和分组交换"><a href="#电路交换和分组交换" class="headerlink" title="电路交换和分组交换"></a>电路交换和分组交换</h3><p>通过网络链路和交换机移动数据有两种基本方法：电路交换和分组交换。</p><p>电路交换中，沿着端系统通信路径，为端系统之间通信所提供的资源（缓存、链路传输速率）在通信会话期间会被预留。代表为电话网络。</p><p>分组交换网络中，这些资源不会被预留；会话的报文按需使用这些资源，这将导致可能不得不等待（排队）接入通信线路。代表为互联网。</p><h4 id="电路交换网络中的多路复用"><a href="#电路交换网络中的多路复用" class="headerlink" title="电路交换网络中的多路复用"></a>电路交换网络中的多路复用</h4><p>链路中的网络要实现多路复用（使得一条线路可以有多条连接）有两种方式：</p><ol><li>频分多路复用（Frequency-Division Multiplexing，FDM）：链路的频谱由跨越链路创建的所有连接所共享。特别是，该链路在连续期间为每条连接专用一个频段。在电话网络中，这个频段通常是4kHz，该频段被称为带宽。调频无线电台也使用FDM来共享88~108MHZ的频谱，其中为每一个电台被分配一个特定的频带。</li><li>时分多路复用（Time-Division Multiplexing，TDM）：时间被划分为固定区间的帧，每帧又被划分为固定数量的时隙。当网络跨越一条链路创建一条连接时，该网络在每个帧中为该连接指定一个时隙。这些时隙专门由该连接单独使用，一个时隙可用于传输该连接（在每个帧内）的数据。</li></ol><p>电路交换缺点：</p><ol><li>效率低，因为在静默期专用电路空闲，不能被其他进行中的连接所使用。</li><li>创建端到端电路和预留端到端带宽是很复杂的，需要复杂的信令软件来协调沿端到端路径的交换机的操作。</li></ol><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>源主机将长报文划分为较小的数据块，并称之为分组。在源和目的之间，这些分组中的每个都通过通信链路的分组交换机（路由器和链路层交换机）传送。</p><p><strong>存储转发机制</strong>（store-and-forward transmission）：交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组。因此，存储转发式分组交换机沿着该分组的路径在每条链路的输入端引入存储转发时延。</p><p><strong>输出缓存</strong>（output buffer）（也称输出队列（output queue））：每个分组交换机有多条链路与之相连，对于每一条相连的链路，该分组交换机具有一个输出缓存，它用于存储路由器准备发往那条链路的分组。如果到达的分组需要跨越链路传输，但发现该链路忙于其他分组，该到达分组必须在输出缓存中等待。因此除了存储转发时延以外，分组还要承受输出缓存的<strong>排队时延</strong>（queue delay）。由于缓存区大小有限，因此一个到达的分组可能发现该缓存被等待传输的分组完全占满了，此时将出现<strong>分组丢失</strong>或<strong>丢包</strong>（packet lost）——可能是到达的该分组也可能是已经排队的分组之一将被丢弃。</p><p><a href="https://s2.ax1x.com/2019/12/13/QgvUYT.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/13/QgvUYT.png" alt="store-and-forward"></a></p><p>分组交换的缺点：其端到端时延是变动的和不可预测的（主要是因为排队时延的变动和不可预测），因此不适合实时服务（如电话）。</p><p>分组交换的优点：</p><ol><li>提供了比电路交换更好的带宽。</li><li>以电路交换更简单、更有效，实现成本更低。</li></ol><p>统计多路复用：按需共享资源。</p><h3 id="分组如何通过分组交换形成其通路"><a href="#分组如何通过分组交换形成其通路" class="headerlink" title="分组如何通过分组交换形成其通路"></a>分组如何通过分组交换形成其通路</h3><p>在因特网中，每个通过该网络传输的分组在它的首部包含了其目的地地址，该地址是一种层次结构。当分组到达网络中的一台路由器时，该路由器检查分组的目的地地址的一部分，并向相邻路由器转发该分组。更特别的，每台路由器具有一个转发表，用于将目的地地址（或其中一部分）映射到输出链路。当分组到达一台路由器时，该路由器检查目的的地址，并用这个目的的地址搜索转发表，以找到合适的输出链路。然后路由器将该分组导向输出链路。</p><h3 id="ISP和因特网主干道"><a href="#ISP和因特网主干道" class="headerlink" title="ISP和因特网主干道"></a>ISP和因特网主干道</h3><p>第一层ISP的特性：</p><ol><li>直接与其他每个第一层ISP相连。</li><li>与大量的第二层ISP和其他客户网络相连。</li><li>覆盖国际区域。</li></ol><p>第一层ISP也被称为因特网主干道。第二层ISP通常具有区域性或国家线覆盖规模，并且非常重要的只与少数第一层ISP相连接。第二层ISP需要引导流量通过它所连接的第一层ISP。第二层ISP被他所连接的第一层ISP称为客户，第一层ISP是第二层ISP的供应商。第二层之下是较低层ISP，层次结构的底层是接入ISP。当两个ISP直接相连时，他们被称为是对等的。</p><p>一个ISP网络中，某ISP与其他ISP的连接点被称为汇集点（Point of Presence，POP）。POP就是某ISP中的一台或多台路由器组，通过他们能够与其他ISP的路由器连接。</p><h2 id="分组交换网中的时延、丢包和吞吐量"><a href="#分组交换网中的时延、丢包和吞吐量" class="headerlink" title="分组交换网中的时延、丢包和吞吐量"></a>分组交换网中的时延、丢包和吞吐量</h2><h3 id="时延概述"><a href="#时延概述" class="headerlink" title="时延概述"></a>时延概述</h3><p>分组从一个节点（主机或路由器）沿着路径到后继节点（主机或路由器）时，该节点在沿途的每个节点都经受了几种不同的时延。主要包括：<strong>节点处理时延</strong>（nodal processing delay）、<strong>排队时延</strong>（queuing delay）、<strong>传输时延</strong>（Transmission delay）和<strong>传播时延</strong>（propagation delay），这些时延总体累加起来是<strong>节点总时延</strong>（total delay）。</p><p><a href="https://s2.ax1x.com/2019/12/13/Q2pA9f.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/13/Q2pA9f.png" alt="delay"></a></p><p>处理时延：检测分组首部和决定将该分组导向何处所需时间是处理时延的主要部分。一般处理时延较短（微秒级或者更低）。</p><p>排队时延：在队列中，当分组在链路上等待传输时，经受排队时延。队列很空且没有其他分组在传输时，排队时延是0。流量很大时，排队时延就会比较大。实际排队时延在毫秒到微秒级。</p><p>传输时延：仅当分组的整体全部导到时，才能传输我们的分组。L表示分组的比特长度，R bps表示从路由器A到路由器B的传输速率。传输时延是L/R，即将所以比特推（传输）向链路所需要的时间。实际传输时延在好秒到微妙级。</p><p>传播时延：从该链路的起点到路由器B传播所需要的时间是传播时延。比特以该链路的传播速率传播。其速率范围是2<em>10^8 ~ 3</em>10^8，传播时延等于路由器间的距离除以传播速度。</p><p>传输时延是路由器将分组推出所需要的时间，它是分组长度和链路传输速度的函数，而于传输距离无关。传播时延是一个比特从一台路由器向另一台路由器传播所需要的时间，是距离的函数，与分组长度或链路的传输速度无关。<br>$$<br>d_{nodal} = d_{proc}+d_{queue}+d_{trans}+d_{prop}<br>$$</p><h3 id="排队时延和丢包"><a href="#排队时延和丢包" class="headerlink" title="排队时延和丢包"></a>排队时延和丢包</h3><p>节点时延最复杂的就是排队时延。其取决于流量到达该队列的速率、链路的传输速率和流量到达性质。</p><p><strong>流量强度</strong>：令a表示分组到达的平均速率（a的单位是每秒分组，即packet/s）；R是传输速率，即比特从队列中推出的速率，单位是bps；为了简化起见，假定所以分组是由L比特组成的，则比特到达队列的平均速率是La bps。此时La/R被称为流量强度。</p><p>如果流量强度大于1，则比特到达队列的平均速度超过该队列传输出去的速度，此时队列的增加趋于无界，且排队时延无限大。当流量强度小于1时，到达流量的性质影响排队时延，如果分组以突发形式到达而不是周期形式到达，则可能有很大的平均排队时延。</p><p>丢包的数量随着流量强度的增加而增加。</p><h3 id="端到端时延"><a href="#端到端时延" class="headerlink" title="端到端时延"></a>端到端时延</h3><p>Traceroute程序：其能够在任何因特网主机上运行。当用户指定一个目的主机名字时，源主机中的该程序朝着该目的地发送多个特殊的分组（默认30个）。当这些分组向着目的地传送时，他们通过一系列路由器。当路由器接收到这些特殊分组时，它向源回送一个短报文，该报文包括路由器名字和地址。</p><p>处理流程：假定在源与目的地之间有N-1台路由器，则源将向网络发送N个特殊的分组，其中每个分组地址指向最终的目的地。这N个特殊分组标识从1到N，第一个分组标识为1，最后的分组标识为N。当第n台路由器接收到第n个标识为n的分组时，该路由器不是向目的地转发，而是向源回送一个报文。当目的的主机接到第N个分组时，也会向源返回一个报文。该源记录了从它发送一个分组到它接收到对应返回报文所经受时间，也记录了返回该报文的路由器（或目的地主机）的名字和地址。以这种方式，源能够重建分组从源到目的地所采用的路由，并且能够获得到所有中间路由器的往返时延。Traceroute实际上对上述实验重复了三次，因此实际发送了3*N组数据。</p><p>traceroute输出有6列：第一列是前面描述的n值，即沿着路径上的路由器号码；第二列是路由器名字；第三列是路由器地址；最后三列是3次往返时延。如果源从任何给定的路由器接收少于三条报文（由于网络中丢包），则traceroute在该路由器号码后面放一个星号，并向那台路由器报告少于3次往返时间。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ traceroute www.yinkuiwang.cn</span><br><span class="line">traceroute to www.yinkuiwang.cn (185.199.110.153), 30 hops max, 60 byte packets</span><br><span class="line"> 1  _gateway (10.136.0.1)  2.857 ms  3.053 ms  3.157 ms</span><br><span class="line"> 2  202.113.18.229 (202.113.18.229)  3.281 ms  3.390 ms  3.742 ms</span><br><span class="line"> 3  202.113.18.102 (202.113.18.102)  2.748 ms  3.839 ms  3.804 ms</span><br><span class="line"> 4  111.33.78.1 (111.33.78.1)  4.961 ms  4.929 ms  5.200 ms</span><br><span class="line"> 5  117.131.131.13 (117.131.131.13)  4.239 ms  4.442 ms 117.131.131.9 (117.131.131.9)  4.587 ms</span><br><span class="line"> 6  221.183.38.49 (221.183.38.49)  5.822 ms  2.652 ms  2.647 ms</span><br><span class="line"> 7  * 221.183.8.150 (221.183.8.150)  15.551 ms *</span><br><span class="line"> 8  221.176.21.146 (221.176.21.146)  10.094 ms  10.091 ms 221.176.21.186 (221.176.21.186)  25.060 ms</span><br><span class="line"> 9  221.183.46.253 (221.183.46.253)  16.063 ms  16.178 ms *</span><br><span class="line">10  221.183.30.234 (221.183.30.234)  207.610 ms 221.183.30.230 (221.183.30.230)  198.938 ms 221.183.30.246 (221.183.30.246)  195.548 ms</span><br><span class="line">11  223.120.6.97 (223.120.6.97)  252.070 ms * 223.118.12.5 (223.118.12.5)  218.268 ms</span><br><span class="line">12  223.120.6.113 (223.120.6.113)  239.274 ms 223.120.6.26 (223.120.6.26)  237.843 ms *</span><br><span class="line">13  * * *</span><br><span class="line">14  lag-10.ear1.Madrid2.Level3.net (4.68.111.45)  238.222 ms  236.624 ms  243.475 ms</span><br><span class="line">15  * * *</span><br><span class="line">16  * * *</span><br><span class="line">17  * * *</span><br><span class="line">18  * * *</span><br><span class="line">19  * * *</span><br><span class="line">20  * * *</span><br><span class="line">21  * * *</span><br><span class="line">22  * * *</span><br><span class="line">23  * * *</span><br><span class="line">24  * * *</span><br><span class="line">25  * * *</span><br><span class="line">26  * * *</span><br><span class="line">27  * * *</span><br><span class="line">28  * * *</span><br><span class="line">29  * * *</span><br><span class="line">30  * * *</span><br></pre></td></tr></table></figure><p>由于排队时延随时间变化，所以分组n发送到路由器n的往返时延可能大于分组n+1发送到路由器n+1的往返时延。比如上面2和3的第一个时延。</p><h3 id="计算机网络中的吞吐量"><a href="#计算机网络中的吞吐量" class="headerlink" title="计算机网络中的吞吐量"></a>计算机网络中的吞吐量</h3><p>瞬时吞吐量：从主机A向主机B传输一个大文件，B接收该文件的速率（单位bps）。</p><p>平均吞吐量：该文件由F比特组成，而主机B接收到所以F比特使用了T秒，则平均吞吐量为F/T bps。</p><p>从端系统到另一个端系统的吞吐量取决于拼劲链路，即路径中链路速度最慢的那个链路。</p><h2 id="协议层次和它们的服务模型"><a href="#协议层次和它们的服务模型" class="headerlink" title="协议层次和它们的服务模型"></a>协议层次和它们的服务模型</h2><h3 id="分层的体系结构"><a href="#分层的体系结构" class="headerlink" title="分层的体系结构"></a>分层的体系结构</h3><p>网络设计者以分层的方式组织协议以及实现这些协议的网络硬件和软件。每个协议属于一层，某层向其上一层提供服务（service），即所谓的层的服务模型，某层通过在该层中执行某些动作或者使用其直接下层的服务来提供它的服务。</p><p>一个协议层能够通过软件和硬件或两者的结合实现。应用层在端系统的软件中实现，运输层也是这样。物理层和链路层负责处理跨特定链路的通信，通常在与给定链路相关的网络接口卡中实现。网络层经常是软件和硬件的结合。层n协议的不同部分常常位于这些网络组件的各部分。</p><p>协议分层的优点是：概念化结构化；模块化使得更新系统组件更加容易。</p><p>缺点：某层可能重复其较低层的功能；某层的功能可能需要仅在其他某层才出现的信息，这违反了层次分离的目标。</p><p><a href="https://s2.ax1x.com/2019/12/14/Q2bQvn.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/14/Q2bQvn.png" alt="分层"></a></p><p><strong>应用层</strong></p><p>应用层是网络应用程序及其应用层协议存留的地方。应用层包含很多协议：HTTP（web文档请求和传送）；SMTP（电子邮件报文传输）；FTP（两个端系统之间文件传送）。还有某些网络功能，如DNS（域名系统）将网址转换为32比特网络地址。</p><p>应用层协议分别在多个端系统中，一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息分组。位于应用层的信息分组称为报文（message）。</p><p><strong>运输层</strong></p><p>运输层提供了在应用程序端点之间传送应用层报文的服务。因特网存在两个运输协议TCP和UDP。TCP向它的应用程序提供了面向连接的服务，这种服务包括了应用层报文向目的地的确保确保传递和流量控制。TCP将长报文换分为短报文，并提供阻塞控制机制，当网络阻塞时，源抑制其传输速率。UDP协议提供无连接服务，其不提供不必要的服务，不提供可靠性，没有流量控制，也没有拥塞控制。运输层分组称为报文段（segment）。</p><p><strong>网络层</strong></p><p>网络层负责将数据报的网络层分组从一台主机移动到另一台主机源主机的因特网运输层协议向网络层递交运输层报文段和目的地地址。</p><p>因特网网络层包括著名的IP协议，该协议定义了数据中各个字段以及端系统和路由器如何作用于这些字段。所有网络层的因特网组件都必须运行IP协议。因特网的网络层也包含决定路由的选路协议。IP是将因特网连接在一起的粘合剂。</p><p><strong>链路层</strong></p><p>为了将分组从一个节点移动到路径的下一个节点，网络层必须使用链路层服务。在每一个节点，网络层将数据报下传给链路层，链路层沿着路径将数据传输给下一个节点，在下一个节点，链路层将数据报上传给网络层。</p><p>链路层提供的服务取决于应用于该链路的特定链路协议。主要有以太网、WIFI和点对点协议（PPP）。链路层分组称为帧。</p><p><strong>物理层</strong></p><p>链路层是将帧从一个网路元素移动到临近的网络元素。物理层任务是将该帧中的一个一个比特从一个节点移动到下一个节点。</p><p><strong>ISO</strong>模型</p><p>ISO多加了两层，表示层和会话层。表示层是使通信的应用程序能够解释交换数据的含义，提供的服务包括数据压缩、数据加密以及数据描述。会话层提供了数据交换的定界和同步功能，包括建立检查点和恢复方案的方法。</p><h3 id="报文、报文段、数据报和帧"><a href="#报文、报文段、数据报和帧" class="headerlink" title="报文、报文段、数据报和帧"></a>报文、报文段、数据报和帧</h3><p><a href="https://s2.ax1x.com/2019/12/14/Q2LEtS.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/14/Q2LEtS.png" alt="传输"></a></p><p>上图显示了一条物理路径：数据从发送端系统的协议向下，上下中间的链路层交换机和路由器的协议栈，进而向上到达接收端系统的协议栈。</p><p>上图也说明了封装这一重要概念。在发送主机，应用层报文（M）被传送给运输层；运输层收取报文并附上附加信息（运输层首部Ht），该首部将被被接收的运输层使用。应用层报文和运输层首部信息共同构成了运输层报文段。运输层报文段因此封装了应用层报文。运输层则向网络层传递该报文段，网络层增加了如源和目的地端系统地址等网络首部信息形成网络层数据报。该数据报接下来被传递给链路层，链路层添加自己的链路首部信息并创建链路帧。于是，在每一层，分组具有两种类型的字段：首部字段和有效荷载字段，有效荷载字段来自于上一层。</p><h2 id="攻击威胁下的网络"><a href="#攻击威胁下的网络" class="headerlink" title="攻击威胁下的网络"></a>攻击威胁下的网络</h2><h3 id="坏家伙能够经因特网将恶意软件放入你的计算机"><a href="#坏家伙能够经因特网将恶意软件放入你的计算机" class="headerlink" title="坏家伙能够经因特网将恶意软件放入你的计算机"></a>坏家伙能够经因特网将恶意软件放入你的计算机</h3><p>僵尸网络：被恶意软件感染的设备，受害主机还能征招网络上数以千计的类似受害设备。</p><p>自我复制：一旦恶意软件感染了一台主机，就会从那台主机进入到更多主机。</p><p>病毒：一种需要某种形式的用户交互来感染用户设备的恶意软件。</p><p>特洛伊木马：隐藏在有用软件的恶意软件。</p><h3 id="坏家伙能够攻击服务器和网络基础设施"><a href="#坏家伙能够攻击服务器和网络基础设施" class="headerlink" title="坏家伙能够攻击服务器和网络基础设施"></a>坏家伙能够攻击服务器和网络基础设施</h3><p>拒绝服务攻击（Denial-of-Service，DoS）是一种宽泛的安全性攻击，其使得合法用户不能使用网络、主机或其他基础设施部分。DoS攻击主要分为三种：</p><ol><li>弱点攻击：向目标主机上运行的易受攻击的应用程序或操作系统发送制作精细的报文。如果多个分组以适当的顺序发送给一个易受攻击的应用程序或操作系统，该服务可能停止运行，甚至导致主机奔溃。</li><li>带宽泛洪：攻击者向目标主机发送大量的分组，导致目标的接入链路变得拥塞，从而使合法的分组无法到达服务器。</li><li>连接泛洪：攻击者在目标主机中创建大量的半开或全开TCP连接。目标主机因这些伪造的连接而显然困境，从而停止合法的连接。</li></ol><p>对于带宽泛洪，单一源可能无法产生足够大的流量来危害服务器，同时单一攻击可能被上游路由器检测出该攻击并在该流量靠近服务器前就将其阻挡下来。分布式DoS（distributed Dos，DDos）中，攻击者控制多个源并让每个源向目标猛烈发送流量。</p><h3 id="坏家伙能嗅探分组"><a href="#坏家伙能嗅探分组" class="headerlink" title="坏家伙能嗅探分组"></a>坏家伙能嗅探分组</h3><p>在无线传输设备的附加放置一台被动接收机，该接收机就能得到传输的每个分组的拷贝。记录每个流经分组拷贝的被动接收机被称为分组嗅探器。</p><p>嗅探器也可用于有线环境，如在有线广播中。嗅探器是被动接收设备，很难被发现，因此最后的防御手段是密码学方式。</p><h3 id="坏家伙能够伪装成你信任的人"><a href="#坏家伙能够伪装成你信任的人" class="headerlink" title="坏家伙能够伪装成你信任的人"></a>坏家伙能够伪装成你信任的人</h3><p>生成具有任意原地址、分组内容和目的地址的分组，然后将这个人工制作的分组传输到因特网中是十分容易的。将虚假源地址的分组注入因特网的能力被称为IP哄骗（IP spoofing），这只是一个用户能够冒充另一个用户的多种形式之一。</p><p>为解决这个问题，需要采用端点鉴别（end-point authentication）机制，即确保报文源自我们认为应该来自的地方的机制。</p><h3 id="坏家伙能够修改或删除报文"><a href="#坏家伙能够修改或删除报文" class="headerlink" title="坏家伙能够修改或删除报文"></a>坏家伙能够修改或删除报文</h3><p>坏家伙插入到两个通信实体之间，危及发送信息的完整性。</p><h1 id="第二章-应用层"><a href="#第二章-应用层" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h1><h2 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h2><h3 id="网络应用程序体系结构"><a href="#网络应用程序体系结构" class="headerlink" title="网络应用程序体系结构"></a>网络应用程序体系结构</h3><p>从应用程序研发者角度来看，网络体系结构是固定的，并为应用程序提供了特定的服务集合。现代网络应用程序所使用的两种主流体系结构：客户机/服务器体系结构或对等（P2P）体系结构。</p><p>在客户机/服务器体系结构中，有一个总是打开的主机被称为服务器，它服务来自许多客户机的主机请求。典型例子为Web应用程序。在这个结构中，客户机之间不之间相互通信，服务器有固定的、周知的地址，称为IP地址。</p><p>在P2P体系结构中，对总是打开的基础设施服务器有最小的（或者没有）依赖。任意间断连接的主机对——称为对等方，直接通信。P2P协议最突出的特性之一是它的自扩展性。</p><p>某些应用具有混合的体系结构，由客户机/服务器和P2P元素结合而成，往往服务器场用于跟踪用户的IP地址，但用户到用户的报文在用户主机之间直接发送。</p><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>网络应用程序是由成对的进程组成，这些进程通过网络相互发送报文。在给定的一对进程中之间的通信会话中，发起通信（即在该回话开始时与其他进程联系）的进程被标示为客户机，在会话开始时等待联系的进程是服务器。</p><p>进程通过套接字软件接口在网络上发送和接收报文。应用程序开发者可以控制套接字在应用层端的所以东西，但是对套接字的运输层端几乎没有控制。应用程序开发者对于应用层端的控制仅限于：</p><ol><li>选择运输协议。</li><li>设定部分运输层参数，如最大缓存、最大报文长度等。</li></ol><h3 id="可供应用程序使用的传输协议"><a href="#可供应用程序使用的传输协议" class="headerlink" title="可供应用程序使用的传输协议"></a>可供应用程序使用的传输协议</h3><p><strong>可靠传输数据</strong></p><p>第一章讨论过，分组可能会存在丢包，部分程序要保证数据完整性。如果一个协议提供了确保数据交付服务，就提供了<strong>可靠数据传输</strong>。运输层协议能够潜在的向应用程序提供的一个重要服务是进程到进程的可靠数据传输。此时，发送进程只要将数据传递给套接字，就可以相信数据被无差错到达接收进程。</p><p>部分程序运行存在部分丢包，即为容忍丢失的应用。</p><p><strong>吞吐量</strong></p><p>具有吞吐量要求的应用程序，被称为带宽敏感应用。弹性应用根据需要充分利用可供使用的吞吐量。</p><p><strong>定时</strong></p><p>部分应用为了有效性而对数据交付有严格的时间限制。</p><p><strong>安全性</strong></p><p>运输层协议能够为应用程序提供一种或多种安全性服务。</p><h3 id="因特网的运输服务"><a href="#因特网的运输服务" class="headerlink" title="因特网的运输服务"></a>因特网的运输服务</h3><p>因特网（TCP/IP网络）上的应用使用了两个运输层协议：UDP和TCP。创建应用时首先要决定使用哪一个。</p><h4 id="TCP服务"><a href="#TCP服务" class="headerlink" title="TCP服务"></a>TCP服务</h4><p>TCP服务模型包括面向连接服务和可靠数据传输服务。</p><p>（1）面向连接服务：使用TCP协议时，在应用层数据报文开始流动之前，其客户机程序和服务器程序之间互相交换运输层控制信息。即为握手过程，此过程提示客户机和服务器之间建立了一个<strong>TCP连接</strong>。这个连接是双全工的，即两个进程可以同时进行报文的收发。当应用程序结束报文发送时，必须拆除该连接。</p><p>（2）可靠数据服务：进程通信的进程依靠TCP协议，无差错、按适当顺序交付发送的数据。没有子节的丢失和冗余。</p><p>（3）拥塞控制机制：这种机制不为通信进程带来直接好处。但能够为因特网带来整体好处。当发送方和接收方之间网络发生拥塞时，TCP协议的拥塞控制机制会抑制发送进程。此机制对带宽敏感的应用有害。</p><h4 id="UDP服务"><a href="#UDP服务" class="headerlink" title="UDP服务"></a>UDP服务</h4><p>UDP是一种不提供不必要服务的轻量级运输层协议，它仅提供最小服务。UDP是无连接的，因此两个进程之间没有握手的过程。UDP协议提供的是不可靠数据传输服务，即不保证一定能收到，也不保证顺序。</p><p>UDP没有拥塞控制机制。</p><h4 id="因特网运输层不提供的服务"><a href="#因特网运输层不提供的服务" class="headerlink" title="因特网运输层不提供的服务"></a>因特网运输层不提供的服务</h4><p>目前因特网不提供吞吐量和定时的保证。下面列出了一些流行因特网应用使用的运输层协议：</p><table><thead><tr><th align="left">应用</th><th align="left">应用层协议</th><th align="left">运输层协议</th></tr></thead><tbody><tr><td align="left">电子邮件</td><td align="left">SMTP</td><td align="left">TCP</td></tr><tr><td align="left">远程终端访问</td><td align="left">Telnet</td><td align="left">TCP</td></tr><tr><td align="left">Web</td><td align="left">HTTP</td><td align="left">TCP</td></tr><tr><td align="left">文件传输</td><td align="left">FTP</td><td align="left">TCP</td></tr><tr><td align="left">流媒体</td><td align="left">HTTP、RTP</td><td align="left">TCP或UDP</td></tr><tr><td align="left">因特网电话</td><td align="left">SIP、RTP或专用（如Skype）</td><td align="left">通常用UDP</td></tr></tbody></table><h4 id="进程寻址"><a href="#进程寻址" class="headerlink" title="进程寻址"></a>进程寻址</h4><p>为了识别接收进程，需要定义两种信息：（1）该主机的名称或地址，（2）用来指定目的主机上接收进程的标识。</p><p>在因特网中，主机使用IP地址进行标识（第四章深入探究）。此时，我们只要知道IP地址是用来<strong>唯一</strong>标识主机的32比特数就足够了。</p><p>发送程序也必须识别运行在主机上的接收进程，目的地端口服务于此目的。已经给流行的应用程序分配了特定的端口号。如Web是80号。这是为了特定应用程序开发时大家统一，可以直接进行通信。</p><h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><p>应用层协议定义了运行在不同端系统上的应用程序进程如何相互传递报文。其主要定义了如下内容：</p><ol><li>交换的报文类型，如请求报文和响应报文。</li><li>各种类型的语法，如报文中的各个字段及其详细描述。</li><li>字段的语义，即包含在字段中的信息含义。</li><li>进程何时、如何发送报文以及对报文响应的规则。</li></ol><p>网络应用和应用层协议的区别：应用层协议只是网络应用的一部分，只是定义了应用程序之间沟通的协议。</p><h2 id="Web应用与HTTP协议"><a href="#Web应用与HTTP协议" class="headerlink" title="Web应用与HTTP协议"></a>Web应用与HTTP协议</h2><h3 id="HTTP概况"><a href="#HTTP概况" class="headerlink" title="HTTP概况"></a>HTTP概况</h3><p>Web应用层协议是超文本传输协议（HyperText Transfer Protocol，HTTP）。HTTP协议有两部分程序实现：客户机程序和服务器程序，它们运行在不同的端系统中，通过交换HTTP报文进行会话。HTTP定义了这些报文的格式以及客户机和服务器是如何进行报文交换的。</p><p>Web页面（Web page，也叫文档）是由对象组成的。对象简单来说就是文件，如HTML文件，JPEG图片文件、Java小程序或视频文件，这些文件可以通过一个URL地址寻址。多数Web页面含义一个基本的HTML文件以及几个引用对象。如一个Web页面包括一个HTML文件和5个JPEG图形文件，那这个Web页面有六个对象。每个URL地址由两部分组成：存放对象的服务器主机名和对象的路径名。如：<code>http://www.someschool.edu/someDepartment/picture.gif</code>中的<code>www.someschool.edu</code>即为主机名，<code>/someDepartment/picture.gif</code>即为路径。</p><p>HTTP定义了Web客户端如何向Web服务器请求Web页面，以及服务器如何将Web页面传送给客户端。</p><p>HTTP使用TCP作为支撑运输层协议。HTTP客户机发送一个与服务器的TCP连接，建立连接后，客户端和服务器就可以进行通信了。</p><p>服务器向客户机发送请求的文件时，并不存储任何关于该客户机的状态信息。由于HTTP服务器不存储关于客户机状态的信息，使用说HTTP是一个无状态协议。</p><h3 id="非持久连接和持久连接"><a href="#非持久连接和持久连接" class="headerlink" title="非持久连接和持久连接"></a>非持久连接和持久连接</h3><p>当客户机/服务器的交互运行于TCP之上时，应用程序开发者需要确定每个请求/响应是经过单独的TCP连接发送还是所以请求及响应经相同的TCP连接发送。前者称为非持久连接，后者称为持久连接。HTTP两者都支持，默认使用持久连接。非持久连接每个TCP连接只传输一个请求报文和一个响应报文。</p><p><strong>往返时间</strong>（Round-Trip Time，RTT）：即一个小分组从客户机到服务器再回到客户机所花费的时间。一个RTT等于三次握手中前两个部分所消耗的时间。</p><p>非持久连接缺点：</p><ol><li>必须为每一个请求的对象建立和维护一个全新的连接，对于每个这样的连接，在客户机和服务器都要分配TCP的缓冲区和变量，这给服务器带来严重负载。</li><li>每个对象的传输时延为两个RTT（三次握手前两部分为一个，第三次握手（确认）同时发送请求，因此只有两个RTT）。</li></ol><h3 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h3><p>HTTP有两种报文：请求报文和响应报文</p><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p>下面是一个典型的请求报文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /somedir/page.html HTTP/1.1</span><br><span class="line">Host: www.someschool.edu</span><br><span class="line">Connection: close</span><br><span class="line">User-agent: Mozilla/4.0</span><br><span class="line">Accept-language: fr</span><br></pre></td></tr></table></figure><p>HTTP请求第一行叫做请求行，其后继的行叫做首部行。请求行有三个字段：方法字段、URL字段和HTTP协议版本字段。方法字段可以取值GET、POST、HEAD、PUT和DELETE。</p><p>首部行<code>Host:www.someschool.edu</code>定义了目标所在主机。<code>Connection:close</code>首部行，告诉服务器不希望麻烦的使用持久连接，要求服务器发送完请求的对象后就关闭连接。<code>User-agent:</code>首部行用来定义用户代理，即向服务器发送请求的浏览器类型。<code>Accept-language</code>表示用户想要得到该对象的语法版本。<code>Accept-language:</code>是可选内容协商首部之一。</p><p>下图展示了请求报文的通用格式：</p><p><a href="https://s2.ax1x.com/2019/12/17/Qox10K.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/17/Qox10K.png" alt="http requer"></a></p><p>在首部行和附加回车换行后有一个实体主体（Entity body）。使用GET方法时实体主体为空，使用POST方法时才使用。使用POST方法的报文中，用户依然可以请求一个Web页面，但Web返回的内容依赖于POST方法的报文中。当方法字段值为POST时，实体主题中包含的就是用户在表单字段中输入的内容。</p><p>HTML表单经常使用GET将输入数据（在表单字段中）传送到正确的URL。如，一个表单使用GET方式，它有两个字段，分别填写的是monkey和bananas，那么得到的URL结构为：<code>www.somesite.com/animalsearch?monkey&amp;bananas</code>。</p><p>HEAD方法类似于GET。当服务器收到使用HEAD方法的请求时，会用一个HTTP的报文进行响应，但是并不返回请求对象（用于调试）。PUT方法用来向Web服务器上传对象。DELETE方法，用来删除Web服务器上的对象。</p><h4 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h4><p>典型响应报文格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: close</span><br><span class="line">Date: THu,03 Jul 2003 12:00:15 GMT</span><br><span class="line">Server: Apache/1.3.0(Unix)</span><br><span class="line">Last-Modified: Sun,6 May 2007 09:23:24 GMT</span><br><span class="line">Connect-Length: 6821</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">(data data ...)</span><br></pre></td></tr></table></figure><p>响应分三部分：一个初始状态行，首部行和实体主体。实体主体是报文的主体，它包含一个所请求对象本身。状态行有三个字段：协议版本、状态码和相应状态信息。</p><p><code>Connection:close</code>首部行告诉客户机发送完毕后关闭连接。<code>Date</code>首部行指示服务器产生并发送该响应报文的日期和时间。时间是指服务器从它的文件系统中检索到该对象，插入到响应报文的时间。<code>Server</code>报文指示服务器类型，类似与请求报文中<code>User-agent</code>首部行。<code>Last_Modified</code>首部行指示了对象穿件或最后修改的日期和时间。<code>Content_Length</code>表明被发送对象的字节数。<code>Content_Type</code>指示了实体主体原本的类型（HTML还是图片等）。</p><p>下图展示了响应报文的通用格式：</p><p><a href="https://s2.ax1x.com/2019/12/17/Qox3TO.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/17/Qox3TO.png" alt="http return"></a></p><p>一些常见的状态码：</p><table><thead><tr><th align="left">200</th><th align="left">OK</th><th align="left">请求成功</th></tr></thead><tbody><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">请求的对象已经被永久转移了，新的URL定义在响应报文的Location：首部行中。客户机软件自动用新的URL获取该对象。</td></tr><tr><td align="left">400</td><td align="left">Bad REquest</td><td align="left">一个通过错误代码，指示请求不能被服务器理解。</td></tr><tr><td align="left">404</td><td align="left">NOT Found</td><td align="left">请求的文档不在服务器上。</td></tr><tr><td align="left">505</td><td align="left">HTTP version not supported</td><td align="left">服务器不支持请求报文使用的HTTP协议版本。</td></tr></tbody></table><p>可以使用<code>telnet</code>来观察真实的HTTP响应报文。使用<code>telnet site 80</code>即建立了一个本地到指定Web服务器的TCP连接，之后输入请求即可，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ telnet www.yinkuiwang.cn 80</span><br><span class="line">Trying 185.199.111.153...</span><br><span class="line">Connected to chst1.github.io.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">GET /2019/06/16/KMP/ HTTP/1.1</span><br><span class="line">Host:www.yinkuiwang.cn</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Server: GitHub.com</span><br><span class="line">Last-Modified: Mon, 02 Dec 2019 08:16:22 GMT</span><br><span class="line">ETag: &quot;5de4c856-67bd&quot;</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Expires: Wed, 18 Dec 2019 01:39:45 GMT</span><br><span class="line">Cache-Control: max-age=600</span><br><span class="line">X-Proxy-Cache: MISS</span><br><span class="line">X-GitHub-Request-Id: B9A8:56A3:1F39F4:214343:5DF98109</span><br><span class="line">Content-Length: 26557</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Wed, 18 Dec 2019 01:29:45 GMT</span><br><span class="line">Via: 1.1 varnish</span><br><span class="line">Age: 0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Served-By: cache-hnd18746-HND</span><br><span class="line">X-Cache: MISS</span><br><span class="line">X-Cache-Hits: 0</span><br><span class="line">X-Timer: S1576632586.764452,VS0,VE186</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Fastly-Request-ID: cf573b3feb014acb04fd481fecf2de696fde337e</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><p>后面的实体主体没有全部展示。注意，在敲下Host首部行之后要连击两下回车，表示输入请求完成。</p><h3 id="用于与服务器的交互：cookie"><a href="#用于与服务器的交互：cookie" class="headerlink" title="用于与服务器的交互：cookie"></a>用于与服务器的交互：cookie</h3><p>前面提到，HTTP是无状态的，然而一个Web站点通常希望能够识别用户，即可能是为了服务器限制用户访问，也可能是它想把内容与用户身份联系起来。为此，HTTP使用了cookie，它允许站点跟踪用户。</p><p><a href="https://s2.ax1x.com/2019/12/18/QT2s6s.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/18/QT2s6s.png" alt="cookie"></a></p><p>如上图所示，cookie由四部分组成：</p><ol><li>在HTTP响应报文中有一个cookie首部行；</li><li>在HTTP请求报文中有一个cookie首部行；</li><li>在用户端系统保留一个cookie文件，由用户的浏览器管理；</li><li>在Web站点有一个后端数据库。</li></ol><p>cookie可以在无状态的HTTP上建立一个用户层会话。例如，基于Web的电子邮件系统，浏览器向服务器发送一个cookie信息，运行该服务器通过用户与应用程序之间的会话对用户进行验证。</p><h3 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h3><p>Web缓存器（Web cache）也叫代理服务器（proxy server），它是能够初始Web服务器来满足HTTP请求的网络实体。Web缓冲器有自己的磁盘存储空间，并在该存储空间中保存最近请求的对象的拷贝。</p><p><a href="https://s2.ax1x.com/2019/12/18/QTWdzQ.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/18/QTWdzQ.png" alt="web cache"></a></p><p>一旦配置了浏览器，每个浏览器对对象的请求首先被定向到Web缓存器。其请求所经历流程大致如下：</p><ol><li>浏览器建立一个到Web缓存器的TCP连接，并发送请求。</li><li>Web缓存器检测本地是否存储了该对象的拷贝。如果有，Web缓存器就用HTTP响应报文回复。</li><li>如果Web缓存器没有该对象，它就与该对象的初始服务器打开一个TCP连接，并发送请求。</li><li>当Web缓存器接收到该对象时，在本地存储一份拷贝，并用HTTP响应报文向客户端发送报文。</li></ol><p>Web缓存器的好处：</p><ol><li>大大减少客户机请求响应时间，尤其在客户机与初始服务器之间的瓶颈带宽远低于客户机与Web服务器瓶颈带宽时。</li><li>可以大大减少一个机构内部网与因特网接入链路上的通信量，降低费用。</li><li>整体上大大降低因特网上的Web流量，从而改善所以应用的性能。</li></ol><h3 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h3><p>条件GET方法是一种机制，允许缓存器证实它的对象是最新的。如果（1）请求报文使用GET方法；（2）请求报文包含一个<code>if-modified-since</code>首部行，那么这个HTTP请求报文就是一个条件GET请求报文。</p><p>缓存器发送一个条件GET，执行最新检查，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /fruit/kiwi.gif HTTP/1.1</span><br><span class="line">Host: www.somesite.com</span><br><span class="line">If-modified-since: Wed,4 Jul 2007 09:23:24</span><br></pre></td></tr></table></figure><p>该条件GET报文告诉服务器，仅当自指定日期之后修改过该对象才发送该对象。如果未改动过该对象，初始服务器响应报文可能是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 304 Not Modified</span><br><span class="line">Date: Sat,14 Jul 2007 15:39:29</span><br><span class="line">Server: Apache/1.3.0(Unix)</span><br><span class="line">(实体主体为空)</span><br></pre></td></tr></table></figure><h2 id="文件传输协议：FTP"><a href="#文件传输协议：FTP" class="headerlink" title="文件传输协议：FTP"></a>文件传输协议：FTP</h2><p><a href="https://s2.ax1x.com/2019/12/18/QT7TPI.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/18/QT7TPI.png" alt="FTP"></a></p><p>FTP用于向一台远程主机上传或下载其文件。为了使用户能够访问远程主机，用户必须提供一个用户标识和口令。</p><p>HTTP和FTP都是文件传输协议，存在很多异同。相同点都是使用TCP作为运输层协议。主要区别是FTP使用两个并行的TCP连接来传输文件，一个是控制连接，一个是数据连接。控制连接用于在两个主机之间传输控制信息，如用户标识、口令、改变远程目录的命令以及“put”和“get”命令。数据连接用于实际传输一个文件。FTP使用一个分离的控制连接，所以我们称其控制信息是<strong>外带</strong>传送的。HTTP是<strong>内带</strong>的。</p><p>下图展示了FTP控制连接和数据连接：</p><p><a href="https://s2.ax1x.com/2019/12/18/QTqQbD.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/18/QTqQbD.png" alt="FTP"></a></p><p>当用户主机与远程主机开始一个会话前，FTP的客户机首先在21号端口上发起一个用于控制的与服务器的TCP连接。FTP客户机通过该控制连接发送用户标识与口令，也改变远程目录的命令。当FTP服务器端从该连接上收到一个文件传输的目录后，就发起一个客户端的数据连接。FTP在该连接上准确地传送一个文件并关闭该连接。如果还要传输别的文件，FTP则另打开一个连接。FTP控制连接贯彻了整个用户会话期间，但文件传输连接只在每次需要时才建立。</p><p>FTP服务器必须在整个会话期间保存用户的状态。服务器必须把特定用户账户与控制连接联系起来，随着用户在远程目录树上移动，服务器必须追踪用户在目录树上的当前位置。而HTTP是无状态的，不必对用户行为进行追踪。</p><p>一些常用FTP命令有：</p><p>USER username：用于向服务器传送用户标识。</p><p>PASS password：用于向服务器传送用户口令。</p><p>LIST：用于请求服务器返回远程主机当前目录的所有文件列表。文件列表将在数据连接上传送。</p><p>RETR filename：用于从远程主机的当前目录检索文件。该命令触发远程主机发起一个数据连接，并发送文件。</p><p>STOR filename：用于向远程主机的当前目录存放文件。</p><p>常见回答为：</p><p>331 Username OK，password required</p><p>125 Data connection already open；transfer starting</p><p>425 Can’t open data connection</p><p>452 Error writing file</p><h2 id="因特网中的电子邮件"><a href="#因特网中的电子邮件" class="headerlink" title="因特网中的电子邮件"></a>因特网中的电子邮件</h2><p><a href="https://s2.ax1x.com/2019/12/18/Q7rZDK.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/18/Q7rZDK.png" alt="mail"></a></p><p>上图展示了因特网电子邮件的总体情况，其主要由三部分组成：用户代理（user agent）、邮件服务器（mail server）和简单邮件传输协议（Smiple Mail Transfer Protocol，SMTP）。</p><p>用户代理允许用户阅读、回复、转发、保存和撰写报文（用户代理也叫邮件阅读器）。邮件代理向其邮件服务器发送邮件，并且该邮件被放在邮件服务器发送报文列中。当用户想要获取邮件时，其邮件代理从他的位于邮件服务器的邮箱中获取该报文。</p><p>邮件服务器组成了电子邮件系统的核心。每个接收方在其中的某个服务器上有一个邮箱。</p><p>邮件发送过程为：从发送方的用户代理开始，传输到发送方的邮件服务器，再传输到接收方的邮件服务器，然后在这里被分发到接收方的邮箱中。在传递到接收方的邮件服务器时，发送方邮件服务器还要处理接收方服务器故障的问题：当发送方发送失败时，发送方邮件服务器在一个报文列表中保持该报文并在以后尝试再次发送，一般半个小时尝试一次，如果几天依然不能成功，会删除该报文并通知发送方。在接收方查看邮件时，接收方服务器会首先鉴别其身份。</p><p>SMTP是因特网电子邮件中主要的应用层协议。它使用TCP可靠传输服务。</p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>SMTP用于从发送方的邮件服务器发送报文到接收方的邮件服务器。SMTP邮件的主体部分（不止其首部）只能采用简单的7位ASCII码表示。</p><p>当A给B发送一封简单的ASCII报文时，其流程如下：</p><p>1）A调用他的邮件代理程序并提供B的邮件地址，撰写邮件，然后通过用户代理发送该邮件。</p><p>2）A的用户代理把报文发送给A的邮件服务器，在那里该报文被放在报文发送队列中。</p><p>3）运行在A邮件服务器上的SMTP客户机端发现报文队列中这个报文，就创建一个到运行在B的邮件服务器上的STMP服务器的TCP连接。</p><p>4）在经过一些初始SMTP握手后，SMTP客户机通过该TCP连接发送A的报文。</p><p>5）在B的邮件服务器上，SMTP的服务器端接收该报文，B的邮件服务器然后将该报文放入B的邮箱中。</p><p>6）在B方便的时候，调用用户代理阅读报文。</p><p>下图展示了该过程：</p><p><a href="https://s2.ax1x.com/2019/12/18/Q7Rpss.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/18/Q7Rpss.png" alt="过程"></a></p><p>SMTP一般不使用中间邮件服务器发送邮件。</p><p>SMTP客户机（运行在发送方邮件服务器上）在25号端口建立一个到SMTP服务器的TCP连接。一但建立连接，服务器和客户机就执行一些应用层的握手，在握手阶段，，SMTP客户机指定发送方的邮件地址和接收方的邮件地址。之后发送报文。</p><p>下面是SMTP服务器（S,主机名是server）和SMTP客户机（C，主机名是client）之间交换报文脚本的例子，一旦创建了TCP连接，就开始下列过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">S: 220 server</span><br><span class="line">C: HELO client</span><br><span class="line">S: 250 Hello client pleased to meet you</span><br><span class="line">C: MALL FROM: &lt;alice@crepes.fr&gt;</span><br><span class="line">S: 250 alice@crepes.fr ... Sender ok</span><br><span class="line">C: RCPR TO: &lt;bob@hamburger.edu&gt;</span><br><span class="line">S: 250 bob@hamburger.edu ... Recipient ok</span><br><span class="line">C: DATA</span><br><span class="line">S: 345 Enter mail, end with &quot;.&quot; on a line by itself</span><br><span class="line">C: Do you like ketchup?</span><br><span class="line">C: How about pickles?</span><br><span class="line">C: .</span><br><span class="line">S: 250 Messgae accepted for delivery</span><br><span class="line">C: QUIT</span><br><span class="line">S: 221 server closing conncetion</span><br></pre></td></tr></table></figure><p>上例中，客户机程序从邮箱服务器client向邮箱服务器server发送了一个报文（Do you like ketchup？How about pickles？）。客户机发送了五条命令：HELO（hello的缩写）、MALL FROM、RCPT TO、DATA以及QUIT。这些命令是自解释的。客户机通过发送一个只包含句点的行，告诉服务器该报文结束了。（按照ASCII码，每个报文以<code>CRLF.CRLF</code>结束，其中<code>CR</code>和<code>LF</code>分别表示回车和换行）。应达250表示正常。SMTP使用持久连接：如果发送邮件服务器有几个报文发往同一个接收服务器，可以通过一个TCP连接发送所有这些报文。对每个报文，客户机都用一个新的MALL FROM开始，仅当所以邮件全部发送完全才发送QUIT。</p><h3 id="与HTTP的对比"><a href="#与HTTP的对比" class="headerlink" title="与HTTP的对比"></a>与HTTP的对比</h3><p>相同点：都是使用了持久连接。</p><p>不同点：</p><ol><li>HTTP是一个拉协议，即人们可以在方便的时候装载Web信息，即用户使用HTTP从该服务器拉取信息。TCP连接是由想获取文件的机器发起的。</li><li>SMTP是一个推协议，即发送邮件服务器把文件推到接收邮件服务器，TCP连接是由要发送的机器发起的。</li><li>SMTP要求每个报文使用7位ASCII格式。如果某报文包含了非7位ASCII字符或二进制数据，则该报文必须按照7位ASCII进行编码。</li></ol><h3 id="邮件报文格式和MIME"><a href="#邮件报文格式和MIME" class="headerlink" title="邮件报文格式和MIME"></a>邮件报文格式和MIME</h3><p>邮件报文要包含环境信息，这些环境信息包含在首部行中。每个首部行包含一个From首部行和一个To首部行，可以包含一个Subject首部行或其他可选的首部行。这些首部行不同于在之前所学的SMTP命令，之前的命令是SMTP握手协议的一部分，而首部行是邮件报文的一部分。但是邮件发给谁和从哪里来不是由首部行决定的，而是由SMTP命令决定的。下面展示了一个典型的报文首部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From: a</span><br><span class="line">To: b</span><br><span class="line">Subject: Searching for the meaning oof file</span><br></pre></td></tr></table></figure><p>在报文首部之后，紧接着是空白行，然后是以ACSII格式表示的报文主体。</p><h4 id="非ASCII码数据的MIME扩展"><a href="#非ASCII码数据的MIME扩展" class="headerlink" title="非ASCII码数据的MIME扩展"></a>非ASCII码数据的MIME扩展</h4><p>为发送非ASCII文本的内容，发送方必须在报文中使用附加的首部行。多用途因特网邮件扩展（Multipurpose Internet Mail Extension，MIME）。支持多媒体的量关键字MIME首部为Content-Type:和Content-Transfer-Encoding：。前者允许接收用户代理采取适当的动作，后者提示接收用户代理该报文已经使用了ASCII编码，并指出了使用的编码类型。当用户代理接收到包含这两个首部行的报文时，会根据Content-Transfer-Encoding的值将报文编码为非ASCII格式，然后根据Content-Type首部行决定它应该采取何种动作来处理报文。</p><h4 id="接收的报文"><a href="#接收的报文" class="headerlink" title="接收的报文"></a>接收的报文</h4><p>接收器一旦接收到具有RFC 822和MIME的首部行，就在该报文的顶端添加一个Received:首部行。该首部行定义了发送该报文的SMTP服务器的名称，接收该报文的SMTP服务器名称和接收时间。例如：<code>Received: from server by client; 12 Oct 98</code>。</p><h3 id="邮件访问协议"><a href="#邮件访问协议" class="headerlink" title="邮件访问协议"></a>邮件访问协议</h3><p>之前我们只考虑了邮件服务器之间使用SMTP进行传输报文，现在考虑用户代理与邮箱服务器之间如何传递报文。在发件方来看，从用户代理到邮箱服务器是一个推过程，需要推协议，SMTP刚好可以按照，因此，在发送方这两者使用SMTP协议。在来看接收方，接收方是在有时间的时候去读邮件，因此是一个拉过程，需要拉协议来支持，因此不能使用SMTP。与之对应的，可以使用的协议有三种：第三版邮局协议（Post Office Protocol-Version 3，POP3）、因特网邮件访问协议（Internet Mail Access Protocol，IMAP）以及HTTP。</p><p><a href="https://s2.ax1x.com/2019/12/18/QHl9js.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/18/QHl9js.png" alt="整体过程"></a></p><h4 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h4><p>当用户代理（客户机）打开一个到邮件服务器（服务器）端口110上的TCP连接后，POP3就开始工作了。POP3按照三个阶段进行工作：特许（authorization）、事物处理以及更新。</p><p>第一阶段（特许）：用户代理发送（以明文形式）用户名和口令以鉴别用户。</p><p>第二阶段（事务处理）：用户代理取回报文。同时还可以进行：对报文做删除标记，取消报文删除标记，以及获取邮件的统计信息。</p><p>第三阶段（更新）：出现在客户机发出了quit命令后，目的是结束该POP3会话，这时，邮件服务器删除那些被标记为删除的报文。</p><p>在POP3事物处理阶段，用户代理发送一些命令，服务器对每个命令做出回答。回答有两种：+OK（有时后面会有说明文字），服务器用它来指示前面的命令是正常的；-ERR，服务器用它来指示前面的命令出现错误。</p><p>特许阶段主要有两个命令：user username和pass password。下面展示了这个的使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ telnet pop.qq.com 110</span><br><span class="line">Trying 59.37.97.57...</span><br><span class="line">Connected to pop.qq.com.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">+OK QQMail POP3 Server v1.0 Service Ready(QQMail v2.0)</span><br><span class="line">user 2322253097</span><br><span class="line">+OK</span><br><span class="line">pass ********</span><br><span class="line">-ERR Please using authorized code to login. More information at http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure><p>这里使用的是qq邮箱的POP3服务器。但是由于腾讯做了一个优化，输入密码时，不是之间输入qq密码，而是输入一个授权码，所以这里就报错了。</p><p>事物处理过程中。POP3用户代理发出的命令通常由用户配置为“下载并删除”或者“下载并保留”。主要有四个命令list、retr、delete和quit。命令的语法在RFC 1939中定义。大概使用如下图：</p><p><a href="https://s2.ax1x.com/2019/12/18/QHatoj.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/18/QHatoj.png" alt="POP"></a></p><h4 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h4><p>IMAP服务器把每个报文与一个文件夹联系起来，当报文第一次到达服务器时，它被放到收件箱文件夹中。收件人可以把邮件移到一个新的、用户创建的文件夹中，或阅读邮件、删除邮件等。IMAP为用户提供了创建文件夹以及在文件夹中移动邮件的命令。IMAP还为用户提供了在远程文件夹中查询邮件的命令，按指定条件去查询匹配的邮件。IMAP服务器维护了IMAP会话的用户状态信息。</p><p>IMAP运行用户代理获取报文组件的命令。</p><h2 id="DNS，因特网的目录服务"><a href="#DNS，因特网的目录服务" class="headerlink" title="DNS，因特网的目录服务"></a>DNS，因特网的目录服务</h2><p>主机使用IP地址进行标识。一个IP地址由4个字节组成，并有着严格的层次结构。如想127.7.106.83这样，每个字节都被句点分隔开，表示了0~255的二进制数。IP地址具有层次结构是因为我们从左向右扫描时，会得到越来越细的关于主机位于因特网何处的信息。</p><p>主机也可以使用主机名进行标识。不过主机名只有在DNS中注册才有用，别人才能通过DNS获得主机名，因此在DNS中，主机名一定是互异的。</p><h3 id="DNS提供的服务"><a href="#DNS提供的服务" class="headerlink" title="DNS提供的服务"></a>DNS提供的服务</h3><p>域名系统（Domain Name System，DNS）提供进行主机名到IP地址转换的目录服务。</p><p>DNS是：1）一个由分层的DNS服务器实现的分布式数据库；2）一个运行主机查询分布式数据库的应用层协议。DNS协议运行在UDP之上。</p><p>DNS通常由其他应用层协议（如HTTP、SMTP和FTP）所使用，用于将用户提供的主机名解析为IP地址。例如，当请求URL <code>www.someschool.edu/index.html</code>页面时，为了使用户的主机能够将一个HTTP请求发送到Web服务器<code>www.someschool.ed</code>，该用户主机必须获得<code>www.someschool.edu</code>的IP地址。其做法为：</p><ol><li>同一台用户主机上运行着DNS应用的客户机端。</li><li>该浏览器从上述URL中抽取出主机名<code>www.someschool.edu</code>，并将这个主机名传给DNS应用的客户机端。</li><li>该DNS客户机向DNS服务器发送一个包含主机名的请求。</li><li>该DNS客户机最终会收到一份回答报文，包含对于主机名的IP地址。</li><li>一旦浏览器接收到来自DNS的IP地址，它就可以向该IP地址定位的HTTP服务器发起一个TCP连接。</li></ol><p>除了进行主机名到IP地址的转换外，DNS还提供了一些重要服务：</p><ol><li>主机别名（host aliasing）：有着复杂主机名的主机可以用于一个或者多个别名。原始主机名叫做<strong>规范主机名</strong>（canonical hostname）。应用程序可以调用DNS来获得主机别名对于的规范主机名已经主机的IP地址。</li><li>邮件服务器别名（mail server aliasing）：电子邮件应用程序调用DNS，对提供的邮件服务器别名进行解析，以获得该主机的规范主机名以及IP地址。事实上，MX记录允许一个公司的邮件服务器和Web服务器使用相同的（别名化的）主机名。</li><li>负载分配（load distribution）：DNS也用于在冗余的服务器之间进行负载分配。繁忙的站点被冗余分别在多台服务器上，每台服务器均运行在不同的端系统上，有着不同的IP地址。对于这些冗余的服务器，一个IP地址集合对应于同一个规范主机名。DNS数据库存储着这些IP地址集合。当客户机为映射到这个IP地址集合的名字发出一个DNS请求时，该服务器用包含全部这些地址的报文进行回答，但每个回答中旋转这些地址的顺序。客户机通常总是向IP地址排在最前面的服务器发送请求，所以DNS就在所有冗余的服务器之间旋转分配负载。</li></ol><h3 id="DNS工作机理"><a href="#DNS工作机理" class="headerlink" title="DNS工作机理"></a>DNS工作机理</h3><p>应用程序调用DNS的客户机端，并指明要转换的主机名，用户主机上的DNS接收到后，向网络中发送一个DNS查询报文。所有DNS请求和回答报文使用UDP数据报经端口53发送。经过若干毫秒时延后，用户主机上的DNS接收到一个DNS回答报文，这个结果被递送到调用DNS查询的应用程序中。</p><p>DNS的一种简单设计方式是在因特网上只使用一个DNS服务器，该服务器包含所有映射。但是这样会有很多问题：</p><ol><li>单点故障：如果该服务器崩溃，整个因特网随之瘫痪。</li><li>通信容量：单个DNS服务器不得不处理所有DNS查询。</li><li>远距离的集中式分布：单个服务器不可能接近所有查询的客户机，因此会造成严重的时延。</li><li>维护：单个服务器将不得不为所以的因特网主机保留记录。使得整个中央数据库非常庞大，而且不得不解决为每个新添加的主机而频繁更新。</li></ol><p>为此，DNS采用了分布式设计方案，DNS是因特网上实现分布式数据库的典范。</p><p><a href="https://s2.ax1x.com/2019/12/19/Qq8xII.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/Qq8xII.png" alt="DNS"></a></p><h4 id="分布式、层次数据库"><a href="#分布式、层次数据库" class="headerlink" title="分布式、层次数据库"></a>分布式、层次数据库</h4><p>有三类DNS服务器：根DNS服务器、顶级域（Top-Level Domain，TLD）DNS服务器和权威DNS服务器。他们以上图这样组织（有点像HASH的感觉）。此时查询过程为，以<code>www.Amazon.com</code>举例。首先客户机联系根DNS服务器之一，它返回顶级域名com的TLD服务器IP地址。该客户与这些TLD之一联系，它将为<code>amazon.com</code>返回权威服务器的IP地址。最后，该客户家联系权威服务器，它为<code>www.Amazon.com</code>返回IP地址。</p><p><strong>根服务器</strong>：因特网上存在13个根服务器（标号A到M）。尽管我们将这13个每个视为单独的服务器，但每台“服务器”实际上是冗余服务器集群，以提供安全性和可靠性。</p><p><strong>顶级域服务器</strong>：这些服务器负责顶级域名如（com、org、net、edu和gov）和所有国家的顶级域名。</p><p><strong>权威DNS服务器</strong>：在因特网上具有公共可访问（如Web服务器和邮件服务器）的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机的名字映射为IP地址。由组织机构的权威DNS服务器来保持这些记录，或者支付费用将这些记录存储在某个服务提供商的权威DNS服务器中。</p><p>除了上面三种以外，还有一类重要的DNS，称为本地DNS服务器。本地DNS服务器严格来说不属于DNS服务器的层次结构。当主机发出DNS请求时，该请求首先被发往本地DNS服务器，它起着代理的作用，并将该请求转发到DNS服务器层次结构中。本地DNS服务器工作方式如下图：</p><p><a href="https://s2.ax1x.com/2019/12/19/QqNNHe.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QqNNHe.png" alt="local DNS"></a></p><p>主机发送请求后，首先定向的本地DNS中，本地DNS联系根DNS，获得对应的TLD，在联系对应的TLD，获得权威服务器，再联系权威服务器，获得IP，返回给请求主机。</p><p>TLD服务器不一定知道每台主机的权威DNS服务器的IP地址。TLD服务器只知道中间的某个DNS服务，该中间服务器依次才能知道用于该服务器的权威DNS服务器。</p><p>上图展示的例子是递归查询（recursive query）和迭代查询（iteration query）。主机到本地服务器是递归，本地到后面的三个查询是迭代。理论上将，查询可以是完全递归的，如下图：</p><p><a href="https://s2.ax1x.com/2019/12/19/QqwuKx.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QqwuKx.png" alt="recursive"></a></p><h4 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h4><p>为了改善时延性并减少在因特网上到处传输的DNS报文数量，DNS广泛使用了缓存技术。DNS缓存（DNS caching）原理十分简单：在请求链中，当一个DNS服务器接收到一个DNS回答时，DNS将回答中的信息缓存在本地存储器中。由于主机和主机名与IP地址映射不是永久的，所以DNS服务器在一段时间后将丢弃缓存信息。</p><h3 id="DNS记录和报文"><a href="#DNS记录和报文" class="headerlink" title="DNS记录和报文"></a>DNS记录和报文</h3><p>实现DNS分布式数据库的所有DNS服务器共同存储着<strong>资源记录</strong>（Resource Record，RR），RR提供了主机名到IP地址的映射。每个DNS回答报文包含了一条或多条资源记录。</p><p>资源记录是一个包含了下列字段的4元组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Name, Value, Type, TTL)</span><br></pre></td></tr></table></figure><p>TTL是该记录生存时间，它决定了资源记录应当从缓存中删除的时间。Name和Value的值取决于Type：</p><table><thead><tr><th align="left">Type</th><th align="left">Name含义</th><th align="left">Value含义</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">主机名</td><td align="left">IP地址。</td></tr><tr><td align="left">NS</td><td align="left">域（如<code>foo.com</code>）</td><td align="left">知道如何获得该域中主机IP地址的权威DNS服务器主机名。</td></tr><tr><td align="left">CNAME</td><td align="left">别名</td><td align="left">规范主机名</td></tr><tr><td align="left">MX</td><td align="left">别名</td><td align="left">邮件服务器的规范主机名</td></tr></tbody></table><p>为了获得邮件服务器的规范主机名，应该请求一条MX记录，为了获得其他服务器主机名应该请求一条CNAME记录。</p><p>如果一台DNS服务器是指定某特定主机的权威DNS服务器，那么该DNS服务会有一条包含该主机名的A记录。如果DNS服务器不是某个主机名的权威DNS服务器，那么该服务器包含一条NS记录（我觉得NS记录应该不是在服务器中存储的，应该是更具请求生成的），该记录对应于包含主机名的域；还有一条A记录，该记录提供了在NS记录中的Value字段中DNS服务器的IP地址。</p><h4 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a>DNS报文</h4><p>DNS只有两种报文，并且查询和回复有着相同的格式，如下图：</p><p><a href="https://s2.ax1x.com/2019/12/19/Qq2Mp8.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/Qq2Mp8.png" alt="DNS packet"></a></p><p>DNS报文中各字段语义如下</p><p>1）前12个字节是首部区域，其中有几个字段。第一个字段是16比特的数，用于标识该查询。这个标识符会被复制到对查询的回答的报文中，以便让客户机用它来匹配发送的请求和接收到的回答。标识字段中有多个标志。1比特的“查询/回答”标识位指出是查询报文（0）还是回答报文（1）。当某DNS服务器正好是被请求主机的权威DNS服务器时，1比特的“权威的”标识位被置位在回答报文中。如果客户机（主机或者DNS服务器）希望DNS服务支持递归查询，将设置1比特的“希望递归”标志位。如果该DNS服务器支持递归查询，则回答报文中会对1比特的“递归可以”标志位置位。在该首部还有4个“数量”字段，指出在首部后四类数据区出现的数量。</p><p>2）问题区域包含着正在进行的查询信息。该区域包括：1.名字字段，用于指出正在被查询的主机名字。2.问题字段，用于指出正被查询的问题类型（A、MX等）。</p><p>3）来自DNS服务器的回答报文中，回答区域包含了对最初请求的名字的资源记录（RR）。一个回答报文的回答区域可能有多条RR，因为一个主机名可能对应多个IP地址。</p><p>4）权威区域包含了其他权威DNS服务器的记录。</p><p>5）附加区域包含了一些有帮助的信息。</p><p>可以使用<code>nsloopup</code>程序来进行DNS查询。该程序的使用命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nslookup -qt=type domain [DNS-server];</span><br><span class="line">//例如</span><br><span class="line">nslookup -qt=mx baidu.com 8.8.8.8</span><br></pre></td></tr></table></figure><h4 id="在DNS数据库中插入记录"><a href="#在DNS数据库中插入记录" class="headerlink" title="在DNS数据库中插入记录"></a>在DNS数据库中插入记录</h4><p>当向某些注册登记机构注册域名<code>networkutopia.com</code>时，需要向该机构提供基本权威DNS服务器和辅助权威DNS服务器的名字和IP地址（不是域名本身的IP地址）。假定该名字和IP地址是<code>dns1.networkuptopai.com</code>和<code>dns2.networkuptopai.com</code>已经<code>212.212.212.1</code>和<code>212.212.212.2</code>。对这两个权威DNS服务器的每一个，该注册机构确保将一个类型NS和一个类型A的记录输入到TLD com服务器。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(networkuptopia.com,dns1.networkuptopai.com,NS)</span><br><span class="line">(dns1.networkuptopai.com, 212.212.212.1, A)</span><br></pre></td></tr></table></figure><p>此时查询时，首先TLD com回复本地DNS一个NS信息，而后本地DNS再次查询TLD com获取含义<code>networkuptopia.com</code>的权威服务器地址，这里是<code>212.212.212.1</code>。而后查询权威DNS服务器来获取IP地址。</p><h2 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h2><h3 id="P2P文件分发"><a href="#P2P文件分发" class="headerlink" title="P2P文件分发"></a>P2P文件分发</h3><p>在P2P文件分发中，每个对等方都能够重新分发其所有的该文件的任何部分，从而协助服务器进行分发。</p><h4 id="P2P体系结构的扩展性"><a href="#P2P体系结构的扩展性" class="headerlink" title="P2P体系结构的扩展性"></a>P2P体系结构的扩展性</h4><p>下图展示了文件分发的示意图，其中所有字母的含义如图所示：</p><p><a href="https://s2.ax1x.com/2019/12/19/QLP6Qf.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLP6Qf.png" alt="file"></a></p><p>对于客户机/服务器的体系结构来说，将文件传输给所有客户机总时间受两个限制，一个是服务器上传N份文件所需要的总时间，另一个是下载最慢的服务器下载整个文件所需时间，因此客户机/服务器体系结果总的分发时间满足：<br>$$<br>D_{cs} &gt;= max{\frac{NF}{u_s}, \frac{F}{d_{min}}}<br>$$<br>对于P2P体系结构来说，分发总时间受三方面限制，第一是服务器发送一份完整的文件出去的时间，第二是下载最慢的主机下载完文件的时间，第三是所有主机上传N份文件的时间。因此P2P文件分发时间满足：<br>$$<br>D_{P2P} &gt;= max{\frac{F}{u_S},\frac{F}{d_{min}}, \frac{NF}{u_s+\sum_i^N{u_i}}}<br>$$</p><h4 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h4><p>BitTorrent是一种用于文件分发的流行P2P协议。用BitTorrent的术语来说，参与一个特定文件分发的所有对等方的集合称为一个洪流（torrent）。每个洪流具有一个基础设施节点，称为追踪器。当一个对等方加入洪流时，它向追踪器注册，并周期性的通知追踪器它任然在洪流中。追踪器以这种方式跟踪洪流中的对等方。</p><p><a href="https://s2.ax1x.com/2019/12/19/QLeTqx.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLeTqx.png" alt="BitTorrent"></a></p><p>当新对等方加入洪流时，追踪器随机的从对等方集合中选择一些对等方，如50个，并将这50个对等方的IP地址发送给新的对等方。新的对等方持有对等方的这张列表，试图与该列表上的所有对等方创建并行的TCP连接。我们称所有与新对等方成功建立TCP连接的对等方为“邻近对等方”。</p><p>这里新的对等方为Alice。Alice周期性地询问每个邻近对等方它们所具有的块列表。如果Alice有L个邻近对等方，那么将会获得L个块列表，此时其就可以对自己当前还没有的块发出请求。</p><p>Alice将做两个决定，第一，她应该向她的邻居请求那些块？第二，她所拥有的块应该发送给哪个邻居。</p><p>对于请求哪个块，Alice采用一种称为最罕见原则（rarest first）。该原则思想是，根据她没有的块从她的邻居中确定那些最稀缺的块（即L列表中出现最少的块），并优先请求最稀缺的块。这样，最稀缺的块更迅速地重新分发，其目标是均衡每个块在洪流中拷贝数量。</p><p>为了决定她响应哪个请求，基本想法是Alice确定其邻居的优先权，这些邻居是那些当前能够以最高的速率供给它数据的。特别的，Alice对于她的每个邻居都持续地测量接收到比特的速率，确定以最高速率流入的四个邻居，然后，她将数据发给这4个邻居。每过10秒，她重新计算该速率并可能修改这四个对等方。更重要的是，每过30秒，她要随机地选择一个另外的邻居并向他发送块。我们将这个随机的对等方称为Bob。因为Alice给Bob发送数据，所以她可能成为Bob前4位上载者之一，这样Bob向Alice传输数据。如果Bob向Alice发送数据速率足够高，他也可能成为Alice的前四个上载者之一。换言之，每过30秒，Alice随机选择一个新的对等方并开始传输数据。如果这两个对等方都满足此对换要求，那么会将对方放入到其前四位列表中并继续与对方进行对换，直到对等方之一发现更好的伙伴为止。</p><h3 id="在P2P区域中搜索信息"><a href="#在P2P区域中搜索信息" class="headerlink" title="在P2P区域中搜索信息"></a>在P2P区域中搜索信息</h3><h4 id="集中式索引"><a href="#集中式索引" class="headerlink" title="集中式索引"></a>集中式索引</h4><p>在集中式索引中，由一台大型服务器（或服务器场）来提供索引服务。该方法存在几个缺点：</p><ol><li>单点故障：服务器崩溃，整个P2P崩溃。</li><li>性能瓶颈好基础设施费用。</li><li>侵犯版权。</li></ol><h4 id="查询洪泛"><a href="#查询洪泛" class="headerlink" title="查询洪泛"></a>查询洪泛</h4><p>查询洪泛是建立在Gnutella协议之上的。在Gnutella中，对等方形成一个抽象的逻辑网络，该网络被称为覆盖网络。如果对等方X和对等方Y维护了一个TCP连接，那么我们说X和Y之间有一条边。在这种设计中，对等方通过已经存在的TCP连接，向覆盖网络中相邻的对等方发送报文。当Alice要定位一个文件位置时，她向所有邻居发送一条查询报文。Alice的邻居向它们的所有邻居转发该报文，邻居的邻居会接着转发。当一个对等方接收到查询报文时，将检测查询内容是否与可供共享的任何文件相匹配，如果存在匹配，则按查询的路径反向传播回去，向Alice回送一条查询命中（递归式）。、</p><p>该方法会在网络中产生大量流量，为解决该问题使用了范围受限查询洪泛。具体来说，就是在查询时添加一个计数，每到下一层就将计数减一。如果到0了，即使没有查到也不再向外扩散。</p><p>这里讨论当X加入覆盖网络的过程：</p><p>1）对等方要首先发现某些已经位于覆盖网络的其他对等方。解决这种引导跨接问题的方法之一是，让X维护一张对等方列表（IP地址），这些对等方常在覆盖网络中开机；另一种方法是，X能够联系维护这种列表的跟踪站点。</p><p>2）一旦访问了这样一张表，X接下来试图与该表上的对等方建立一个TCP连接，直到与某个对等方Y创建连接为止。</p><p>3）对等方向Y发送一个Ping报文，该ping报文包括对等方计数字段。Y接收到Ping后转发ping，直到Ping等于0.</p><p>4）只要一个对等方Z接收到ping，它通过覆盖网络向X发送一个pong报文，该报文包含Z的IP地址。</p><p>5）当X接收到pong报文后，就知道到了网络中许多的IP地址，可以建立连接。</p><h4 id="层次覆盖"><a href="#层次覆盖" class="headerlink" title="层次覆盖"></a>层次覆盖</h4><p>层次覆盖结合了上述两种方法的优秀特征。层次覆盖不使用专用的服务器来跟踪和索引文件。在层次覆盖中并非所有对等方是平等的，具有高速连接并具有高可用性的对等方被指定为超级对等方。每个非超级对等方都被指定为一个超级对等方的子对等方。一个新的对等方与超级对等方建立一个TCP连接，新对等方将可共享文件告诉超级对等方。这样，每个超级对等方就成为一个小的索引。超级对等方之间互相建立TCP连接，从而形成覆盖网络。超级对等方可以向其邻居超级对等方转发查询。该方法类似于查询洪泛，但覆盖网络中超级对等方仅使用了受限查询洪泛。</p><h3 id="分布式散列表"><a href="#分布式散列表" class="headerlink" title="分布式散列表"></a>分布式散列表</h3><p>在该书第六版中将前一节的三部分全部删除了，添加了一个分布式散列表用来P2P区域中搜索。说明该方法应该是当前最好使的，使用最广泛的，前三个可能已经弃用了。但是第七版又把这个也删了，表示很迷。</p><p>分布式散列表（Distributed Hash Table，DHT）是一个分布式数据库，在数以万计的对等方中存储（键，值）对。在每个对等方将保持（键，值）对仅占总体的一个小子集，允许任何对等方使用一个特别的键查询该分布式数据库。分布式数据库则能够定位拥有该相应（键，值）对的对等方，然后向查询的对等方返回该（键，值）对。任何对等方也将允许在数据库中插入新键值对。</p><p>首先为每个对等方分配一个标识符，其中每个标识符是一个[0, 2^n-1]范围内的整数，n取某些固定的值。我们也要求键是同一范围内的一个整数。通过散列函数将键映射到该范围。</p><p>现在考虑DHT中存储（键，值）对问题，该问题核心是对等方键的分配。给定每一个对等方一个整数标识符，每个键也会被映射到标识符对应的范围。这里需要定义“最近邻”，最近邻是指键的最邻近后继。假设n是4，键都落在[0,15]之内，假设该对等方存在8个对等方，标识符分别为1、 3、 4、 5、 8、 10、 12和15，此时要存储（11，something）时，就一个存储在标识符为12的对等方上。</p><p>当我们要插入一个键值对时，之间通过计算该存储放到哪个对等方（假如可以获得），然后之间联系该对等方是可以的，但是这有个规模的问题，这样的话要求每个对等方存储所有其他对等方的IP，这是不合理的。为此，我们设计了环形DHT。</p><h4 id="环形DHT"><a href="#环形DHT" class="headerlink" title="环形DHT"></a>环形DHT</h4><p><a href="https://s2.ax1x.com/2019/12/20/QXZncd.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/20/QXZncd.png" alt="DHT"></a></p><p>这里我们将对等方组织成一个环，每个对等方只需要与它的直接后继和直接前驱联系（环状双向链表）。当对等方3要确定谁复制11时，首先其生成一个报文传递给其后继，该报文沿顺时针方向传输。每个接收到该报文的对等方，由于知道其前驱节点和后继节点因此知道是否该由自己负责该键值对，如果不负责，则将报文传递给后继节点。直到找到该负责次节点的对等方为止。（问题1：如果DHT中没有大于该键的最近邻咋办？可能进入DHT的第一个对等方与服务器连接时，被分配为标识符为2^n-1）</p><p>只有前驱和后继也造成了一个问题是，每次查询和插入的平均发送N/2条报文。这也是不太合理的，因此每个对等方要跟踪的邻居数量与DHT为解析一个查询而需要发送的 报文数量之间存在着折中。细化方案之一是以环形网络为基础，但添加捷径，使每个对等方不仅联系其直接前驱和直接后继，而且联系分部在环上的捷径对等方。如上图的b，此时当某个对等方收到报文时，不仅传输给后继报文，也传递给与其相连的捷径上。</p><p>研究表明，DHT能够被设计成每个对等方的邻居数量以及每个请求报文数量均为O(logN)。这是一种比较令人满意的折中。问题2：哪些对等方被选则为捷径的目标节点，以及如何获取这些对等方的IP）</p><h4 id="对等方的扰动"><a href="#对等方的扰动" class="headerlink" title="对等方的扰动"></a>对等方的扰动</h4><p>在DHT中，对等方可以不加警示的到来和离开，为了处理这个问题，我们要求对等方要知道其第一个和第二个后继，以及要周期性的证实它的两个后继是否存活（如周期性发送ping报文并寻求响应）。现在假设上图a中5突然离开，此时,5将不在响应ping报文，在离开之前的对等方3和4知道了5离开，此时4和3将更新其后继信息。(4先更新，再更新3）问题3：离开的对等方里面存储的键值对如何再被重新分配，还有以该对等方为捷径的对等方如何更新捷径</p><p>下面讨论一个对等方加入时发送的事情，新的对等方加入时，会知道编号最小的已经存在的对等方的IP，这里是1（应该是有一个服务器来维护这个信息，每个对等方进入DHT时，首先联系该服务器）。然后向该对等方发送查询信息，获得其前驱和后继（可能这个时候也可以创建捷径，但具体操作呢）。而后插入进去，即可。</p><p>更多关于DHT的内容可以查看Kademlia相关内容。</p><h1 id="第三章-运输层"><a href="#第三章-运输层" class="headerlink" title="第三章 运输层"></a>第三章 运输层</h1><h2 id="概述和运输层服务"><a href="#概述和运输层服务" class="headerlink" title="概述和运输层服务"></a>概述和运输层服务</h2><p>运输层协议为运行在不同主机上的应用进程提供了逻辑通信。运输层在端系统中实现而不是在网络路由器中实现。在发送方，运输层接收来自上层的的报文转换成运输层分组：将应用报文换分为较小的块，并为每一块加上运输层首部来创建运输层报文段。在发送方体统中，运输层将这些报文段传输给网络层，网络层将其分装进网络层分组并向目的地发送。网络路由器只作用于数据报的网络层字段，即他们不检查分装在该数据报的运输层报文段的字段。</p><h3 id="运输层与网络层的关系"><a href="#运输层与网络层的关系" class="headerlink" title="运输层与网络层的关系"></a>运输层与网络层的关系</h3><p>运输层为运行在不同主机上的进程之间提供逻辑通信，而网络层提供了主机之间的逻辑通信。运输层协议只工作在端系统。运输层协议所能提供的服务也受到底层网络层协议的服务模型的限制，然而，即使网络层不提供响应的服务，运输层协议也能提供某些服务。</p><h3 id="因特网运输层概述"><a href="#因特网运输层概述" class="headerlink" title="因特网运输层概述"></a>因特网运输层概述</h3><p>运输层为应用层提供了两种截然不同的协议：UDP（用户数据报协议）和TCP（传输控制协议），前者提供一种不可靠的无连接服务，后者提供了一种可靠的面向连接的服务。</p><p>网络层协议叫IP（网际协议），IP为主机之间提供了逻辑通信。IP的服务模型是尽力而为交付服务（best-effort delivery service）。即IP尽最大努力交付报文段，但不作任何保证。特别的，它不确保报文段的交付，不确保报文段的按序交付，不确保报文段的完整性。因此IP被称为不可靠服务。每台主机至少有一个网络层地址，即所谓的IP地址。</p><p>TCP和UDP的基本任务：将两个端系统间IP的交付服务扩展到运行在两个端系统的进程之间的交付服务。将主机间交付扩展到进程间交付，称为运输层的多路复用与多路分解。UDP和TCP还通过在其报文段首部添加差错检测字段而提供完整性检查。进程数据交付和差错检测是两种最低限度的运输层服务，也是UDP所提供的仅有的两种服务。</p><p>TCP还提供几种附加的服务，首先提供了可靠数据传输。通过使用流量控制、序号、确认和定时器等技术。TCP确保正确的、按序的将数据从发送进程交付到接收进程，这样TCP将两个端系统之间不可靠的IP服务转换为一种可靠的进程间数据传输服务。TCP还提供拥塞控制，TCP拥塞控制防止任何一条TCP连接用过多流量来淹没通信主机之间的链路和交换设备。</p><h2 id="多路复用与多路分解"><a href="#多路复用与多路分解" class="headerlink" title="多路复用与多路分解"></a>多路复用与多路分解</h2><p>进程有一个或多个套接字，它相当于从网络向进程传递数据和从进程向网络传递数据的门户。</p><p>首先考虑接收主机如何如何将一个收到的运输层报文定向到合适的套接字。为实现这一要求，每个运输层报文段中设置几个字段，在接收端，运输层检测这些字段并标识出接收套接字，然后将报文段定向到该套接字。将运输层报文段中的数据交付到正确的套接字的工作称为多路分解。从源主机的不同套接字中收集数据块，并为每一个数据库封装上首部信息从而生成报文段，然后将报文段传递到网络层的工作叫做多路复用。</p><p>运输层多路复用的要求：</p><ol><li>套接字有唯一标识符。</li><li>每个报文段有特殊字段来指示该报文段要交付的套接字。</li></ol><p><a href="https://s2.ax1x.com/2019/12/24/lCcy9g.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lCcy9g.png" alt="packet"></a></p><p>端口号是一个16比特的数字，其大小在0~65535之间。[0,1023]的端口被称为周知端口，是受严格限制的。</p><h3 id="无连接的多路复用与多路分解"><a href="#无连接的多路复用与多路分解" class="headerlink" title="无连接的多路复用与多路分解"></a>无连接的多路复用与多路分解</h3><p>创建UDP套接字时，运输层自动为套接字分配一个端口号（也可以自己指定）。</p><p>一个UDP套接字是由一个包含目的IP地址和目的端口号的二元组来全面标识。</p><h3 id="面向连接的多路复用与多路分解"><a href="#面向连接的多路复用与多路分解" class="headerlink" title="面向连接的多路复用与多路分解"></a>面向连接的多路复用与多路分解</h3><p>TCP套接字是由一个四元组（源IP地址，源端口号，目的IP地址，目的端口号）来标识的。特别的，两个具有不同源IP地址或源端口的到达的TCP报文段将被定向到两个不同的套接字，除非TCP请求了初始创建连接的请求。</p><h2 id="无连接传输：UDP"><a href="#无连接传输：UDP" class="headerlink" title="无连接传输：UDP"></a>无连接传输：UDP</h2><p>UDP只做了运输协议能够做的最少工作。除了多路复用/多路分解功能以及一些轻型的差错检验外，几乎没有对IP增加别的东西。使用UDP时，在发送报文段之前，发送方和接收方的运输层实体之间没有进行握手，因此UDP被称为无连接的。</p><p>使用UDP的原因：</p><ol><li>应用层可以更好的控制要发送的数据和发送的时间。UDP不提供拥塞控制，数据传递给UDP后会立即打包并传递给网络层。</li><li>无需建立连接：因此不会引入建立连接的时延。</li><li>无连接状态：TCP需要在端系统中维护连接状态，UDP不维护连接状态，某些应用专门使用UDP以便能够支持更多的活动客户机。</li><li>分组首部开销小。</li></ol><h3 id="UDP报文段结构"><a href="#UDP报文段结构" class="headerlink" title="UDP报文段结构"></a>UDP报文段结构</h3><p><a href="https://s2.ax1x.com/2019/12/24/lCIr4I.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lCIr4I.png" alt="UDP struct"></a></p><p>应用数据是应用层传递来的数据。通过端口号可以使目的主机将应用数据交付到运行在目的端系统的相应进程。接收主机使用校验和来检查报文段中是否存在差错。</p><h3 id="UDP校验和"><a href="#UDP校验和" class="headerlink" title="UDP校验和"></a>UDP校验和</h3><p>UDP校验和提供了差错检验功能，即检验和用于确定当UDP报文段从源主机到达目的时，其中的比特是否发送变化（例如，由于链路中或者路由器中存储数据时的噪声干扰）。发送方的UDP对报文中的所有16比特字的和进行反码运算，求和时遇到的所有溢出都要被回卷，得到的结果放到UDP报文段中的校验和字段。</p><p>举例：</p><p>假定我们有3个16比特字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0110011001100000</span><br><span class="line">0101010101010101</span><br><span class="line">1000111100001100</span><br></pre></td></tr></table></figure><p>此时求和过程为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0110011001100000</span><br><span class="line">0101010101010101 +</span><br><span class="line">----------------------</span><br><span class="line">1011101110110101</span><br><span class="line">1000111100001100 +</span><br><span class="line">----------------------</span><br><span class="line">0100101011000010</span><br></pre></td></tr></table></figure><p>注意，这里第二次相加时，最高位溢出，回卷加到最低位。反码是将所有0换成1，1换成0。所以此时该UDP报文的校验和是<code>1011010100111101</code>。在接收方将全部4个比特字（包括校验和）一起相加。如果分组中无差错，则这个和全是1，否则存在一个0就表面分组中出现错误。</p><p>某些UDP实现只是丢弃受损的报文段，其余实现是将受损的报文段交给应用程序并警告。</p><h2 id="可靠数据传输原理"><a href="#可靠数据传输原理" class="headerlink" title="可靠数据传输原理"></a>可靠数据传输原理</h2><p><a href="https://s2.ax1x.com/2019/12/24/lCbn0S.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lCbn0S.png" alt="reliable"></a></p><p>上图说明了我们数据传输的接口。通过rdt_send()函数，可以调用数据传输协议的发送方。它将要发送的数据交付给接收方上层（rdt表示可靠数据传输协议，_send表名发送方被调用）。在接收方，当分组从信道的接收端抵达时，调用rdt_rcv()。当rdt协议想向上层交付数据时，通过调用deliver_data()完成。</p><p>本节中，只考虑单向数据传输的情况，从发送方到接收方。可靠的双向数据传输的情况从概念上讲不会更难。rdt的发送和接收方都需要通过调用udt_send()发送分组给对方（其中udt表示不可靠传输协议）。</p><h3 id="构造可靠传输协议"><a href="#构造可靠传输协议" class="headerlink" title="构造可靠传输协议"></a>构造可靠传输协议</h3><h4 id="完全可靠信道上的可靠数据传输协议：rdt1-0"><a href="#完全可靠信道上的可靠数据传输协议：rdt1-0" class="headerlink" title="完全可靠信道上的可靠数据传输协议：rdt1.0"></a>完全可靠信道上的可靠数据传输协议：rdt1.0</h4><p>首先考虑最简单的情况，即底层信道是完全可靠的。下图展示了rdt1.0发送方和接收方的有限状态机(FSM)定义：</p><p><a href="https://s2.ax1x.com/2019/12/24/lPVAaQ.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPVAaQ.png" alt="rdt1.0"></a></p><p>FSM箭头指示了从一个状态变迁到另一个状态。上图发送方和接收方都只有一个状态。此时，有完全可靠的信道，接收方就不需要提供任何反馈给发送方了。</p><h4 id="具有比特差错信道上的可靠数据传输：rdt2-0"><a href="#具有比特差错信道上的可靠数据传输：rdt2-0" class="headerlink" title="具有比特差错信道上的可靠数据传输：rdt2.0"></a>具有比特差错信道上的可靠数据传输：rdt2.0</h4><p>更底层信道模型是分组中比特可能受损。</p><p>首先考虑人们对于该问题的处理。通常情况下，接收者听到、明白、记下每句话可以说“OK”。如果消息接收者听到一句含糊不清的话，可能请求重复那句话。这种口头消息协议使用了肯定确认（positive acknowledgment）与否定确认（negative acknowledge）。在计算机网络中基于这种重传机制的可靠数据传输协议称为自动重传请求（Automatic Repeat reQuest，ARQ）协议。</p><p>一般来说，ARQ协议中需要另外三种协议来处理存在的比特差错：</p><ol><li>差错检测：运输层添加的校验和字段。还有别的方式。</li><li>接收方发送反馈：回复肯定确认（ACK）还是否定确认（NAK）。</li><li>重传：接收方收到有差错的分组，发送方重传。</li></ol><p><a href="https://s2.ax1x.com/2019/12/24/lPepB8.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPepB8.png" alt="rdt2.0"></a></p><p>注意，当发送方在<code>wait-for-ACK-orNAK</code>状态时，它不能从上层获得更多的数据，也就是说，rdt_send()不会出现，仅当收到ACK并离开该状态时才能继续获得数据。因此发送方不会发送一块新数据，直到发送方确信接收方已经正确接收到当前分组为止。由于这种行为，类似于rdt2.0的协议被称为停等（stop-and-wait）协议。</p><p>rdt2.0存在一个致命的缺陷，即没有考虑到ACK或NAK分组受损的可能性。处理ACK与NAK受损时要考虑以下三种可能解决方案：</p><ol><li>接收到ACK或NAK受损的一方，再次发送NAK，即数据受损，但这样会无线循环下去，该方式不行。</li><li>增加足够的检验和比特使发送方不但能够检测比特受损，还可以恢复当前分组。</li><li>当发送方收到含糊不清的ACK或NAK时，只用重发当前数据分组即可。但这种方法在接收方到发送方中引入了冗余分组（duplicate packet）。冗余分组的根本困难在于接收方不知道它上次发送的ACK或NAK是否被发送方正确地收到，因此它无法事先知道接收到的分组是新的还是一次重发的。</li></ol><p>现在普遍采用的是方法三，这里解决冗余分组的方法是在数据中添加一个新字段，让发送方对其数据分组进行编号，即将发送的数据分组序号放在该字段。此时接收方只需检查序号即可知道是重传的一个还是新发的一个。对于停等协议，只需要1比特序号就足够了。</p><p><a href="https://s2.ax1x.com/2019/12/24/lPMAOI.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPMAOI.png" alt="rdt2.1 sender"></a></p><p><a href="https://s2.ax1x.com/2019/12/24/lPMk6A.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPMk6A.png" alt="rdt2.1 receiver"></a></p><p>对于发送方来说，发送完成之后等待对该次分组的确认，如果接收到的确认消息被损坏或者是NAK则重发，直到收到未被损坏的确认消息且确认消息为ACK，则进入下一个状态（等待下一次调用）。</p><p>对于接收方来说，接收到数据被损坏就会发送NAK并等待重发的数据。直到重发的数据没有被损坏，则发送ACK确认，并进入下一个状态（等待接收下一个分组）。如果接收到的分组不是现在等待的分组，则说明前一个ACK消息被损坏，发送方又重发了一个已经接收到的消息，且发送方未正确进入到下一个状态（因为没有正确接收到ACK），于是接收方此时应该再次发送ACK确认信息即可，直到发送方正确接收到ACK并进入了下一个状态发送了分组。</p><p>再进一步，我们希望只有ACK确认信号而没有NAK信号，此时我们只需要在ACK信号上再绑定应该序号即可，此时也能实现上面的要求，此时在发送方如果收到了要等待的ACK对应的编号与实际收到的不一致时，等同于收到了NAK信号（发送的ACK信号对应编号是已经确认收到的信号，与要等待的不一致说明当前这次发送的分别没有被正确接收），需要重复。</p><p><a href="https://s2.ax1x.com/2019/12/24/lP39HI.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lP39HI.png" alt="rdt2.2 sender"></a></p><h4 id="具有比特差错的丢包信道上的可靠数据传输：rdt3-0"><a href="#具有比特差错的丢包信道上的可靠数据传输：rdt3-0" class="headerlink" title="具有比特差错的丢包信道上的可靠数据传输：rdt3.0"></a>具有比特差错的丢包信道上的可靠数据传输：rdt3.0</h4><p>现在假定处理比特受损外，底层信道还有可能丢包。这里，我们让发送方负责检测和恢复丢包。假设发送方传输一个数据分组，分组本身丢包或者接收分组后确认分组的ACK发生丢失。这两种情况下，发送方都收不到应当到来的响应。如果发送方愿意等待足够长时间以便确认分组已丢失，则只需要重传该分组即可。</p><p><a href="https://s2.ax1x.com/2019/12/24/lP8HfK.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lP8HfK.png" alt="rdt2.2 3.0 receiver"></a></p><p>上图的接收到即适合与rdt2.2也适合与接下来的rdt3.0。</p><p>从发送方角度来看，重传是万能的，发送方不知道一个数据分组丢失、一个ACK丢失，还是该分组或ACK只是过度迟延。在所有情况下采用相同动作，即重传。为实现基于时间的重传机制，需要一个倒数计时器（countdown time），在一个给定的时间过期后，可中断发送方。因此发送方需要能做到：</p><ol><li>每次发送一个分组（即第一次分组和重传分组）时便启动一个定时器。</li><li>响应定时器中断（采取适当的动作）。</li><li>终止定时器。</li></ol><p><a href="https://s2.ax1x.com/2019/12/24/lPJ2qJ.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPJ2qJ.png" alt="rdt3.0"></a></p><p>这里在等待上层调用时会收到ACK是因为冗余数据导致的，因此可直接忽略。</p><p>下图展示了rdt3.0所遇到各种情况是如何工作的：</p><p><a href="https://s2.ax1x.com/2019/12/24/lPJqqH.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPJqqH.png" alt="rdt3.0"></a></p><h3 id="流水线可靠数据传输协议"><a href="#流水线可靠数据传输协议" class="headerlink" title="流水线可靠数据传输协议"></a>流水线可靠数据传输协议</h3><p>rdt3.0是一个功能正确的协议，但并非人人都能满足其性能，rdt3.0的核心问题是其为停等协议，会遭到带宽利用率底下。</p><p>解决这种性能问题的一个简单方法是：不使用停等方式运行，运行发送方发送多个分组而无需等待确认。流水线技术可对可靠数据传输协议带来如下影响：</p><ol><li>必须增加序号范围。</li><li>协议的发送方与接收方必须缓存多个分组，发送方最低限度应当缓存那些已经发送但未确认的分组。</li><li>所需序号范围和对缓冲的要求取决于数据传输协议处理丢失、损坏以及过度延时分组的方式。</li></ol><p>解决流水线差错恢复有两种基本方法：回退N步（Go-Back-N）和选择重传。</p><h3 id="回退N步"><a href="#回退N步" class="headerlink" title="回退N步"></a>回退N步</h3><p>在回退N步（GBN）中，允许发送方发送多个分组（当有时）而不需要等待确认，但也受限于在流水线中未确定的分组数不能超过某个最大允许数N。</p><p><a href="https://s2.ax1x.com/2019/12/24/lPNWZQ.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPNWZQ.png" alt="GBN"></a></p><p>上图展示了GBN协议的序号范围。将基序号（base）定义为最早的未确认分组的序号，将下一个序号（nextseqnum）定义为最小的未使用（即下一个待发送）序号，则可将序号范围分成四部分。那些已发送而未被确认的分组的许可序号范围可以被看成是一个在序号范围内长度为N的窗口。随着协议的运行，该窗口向前滑动。N被称为窗口长度，GBN协议常被称为滑动窗口协议。</p><p>一个分组的序号承载在分组首部的一个固定长度的字段中。如果字段长度是K，则序号范围是[0,2^k-1]。所有涉及序号的运算必须使用摸2^k运算。</p><p><a href="https://s2.ax1x.com/2019/12/24/lPafCn.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPafCn.png" alt="GBN FSM"></a></p><p>对于发送方来说：首先上层调用时，判断是否是超过了N，如果没有，则发送数据，并且判断该发送是否为唯一一个未被确认的发送，如果是，启动计时器。而后更新nextseqnum，如果超过N了，则拒绝发送数据。当收到ACK时，ACK传递的编号是接收方已确定接收到的值。此时即可更新base值。如果更新后的base值与nextseqnum值一致，说明所有传输的分组都已经确认了，此时关闭计时器，否则重新开始计时。当计时器超时时，将base到nextseqnum-1之间已经传输的数据重传。其他情况忽略（不采取动作）。</p><p>对于接收方来说：当接收到数据且没有被损坏且是期望到底的组，就接收该组，并发送ACK数据，报告已经接收到的组编号到了哪，并将期望到达的组编号加一。因此对于接收方来说，其期望数据是按序到达的，如果无效将导致发送方的重传。其他情况下，将发送之前的ACK确认信息。</p><p>GBN期望传输时是有序到达的，该方法的优点是：接收方缓存简单，接收方不用缓冲任何失序分组。因此，虽然发送方必须维护窗口的上下边界及nextseqnum在该串口的位置，但接收方只需要维护下一个按序接收的分组序号（exceptedseqnum）。该方法的缺点是：随后对该分组的重传也许会丢失或出错，因此甚至需要更多的重传。</p><h3 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a>选择重传</h3><p>选择重传（SR）协议通过让发送方仅重传那些它怀疑在接收方出错（即丢失或受损）的分组而避免不必要的重传。</p><p><a href="https://s2.ax1x.com/2019/12/24/lPB0Ig.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPB0Ig.png" alt="SR"></a></p><p>SR发送方所采取的各种动作：</p><ol><li>从上层收到数据：当从上层收到数据时，SR发送方检测下一个可用于该分组的序号，如果序号在发送方的窗口内，则将数据打包并发送，否则像GBN一样，要么返回上层要么缓冲起来。</li><li>超时：定时器再次被用来防止超时，不过对于每个分组必须用于自己的逻辑定时器。因为超时后只能发送一个分组。</li><li>收到ACK。如果收到ACK，且该分组在窗口内，则SR发送方将那个被确定的分组标记为已接收。如果该分组等于send_base，则窗口基序号向前移动到具有最小序号的未确定分组处。如果窗口移动了，并且有序号落在窗口内的未发送分组，则发送该分组。</li></ol><p>SR接收方所采取的各种动作：</p><ol><li>序号在[rcv_base, rcv_base+N-1]内的分组被正确接收。此时，收到的窗口落在接收方的窗口内，一个选择ACK分组被回送给发送方。如果该分组是以前没有收到的分组，则被缓存。如果该分组序号等于接收窗口的基序号rcv_base，则该分组以及以前缓冲的序号连续的分组（起始于rcv_base）交付给上层。然后，接收窗口按向上交付的分组数量向前移动。</li><li>序号在[rcv_base-N, rev_base-1]内的数据被正确接收到。此时说明之前对该序号分组的ACK未被发生方正确接收，此时必须产生一个ACK信号。</li><li>其他情况，忽略该分组。</li></ol><p><a href="https://s2.ax1x.com/2019/12/24/lPrqUO.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPrqUO.png" alt="SR"></a></p><p>上图展示了一个SR的实例。</p><p>对SR协议来说，发送方与接收方的窗口并不总是一致。当我们面对有限序号实现时，不同步的窗口将会导致严重后果。如，对于一个有4个分组序号0,1,2,3的有限范围且窗口长度为3，假定发送了分组0到2，接收方也正确接收了它们。此时接收窗口落到了4,5,6个分组上，其序号为3,0,1。此时考虑两种情况，情况1如下图a，对前三个分组的ACK丢失，发送方要重传这些分组，因此接收方下一步要接收序号0的分组，即第一个发送分组的拷贝。第二种情况如下图b所示，前三个分组被正确交付，因此发送方向前移动窗口并发送4,5,6个分组，其序号是3,0,1。序号3的分组丢失，但序号0的分组到达。</p><p><a href="https://s2.ax1x.com/2019/12/24/lPrbVK.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/24/lPrbVK.png" alt="SR EX"></a></p><p>上述两种情况对于接收者来说是无法分辨的。显然窗口大小是有限制的，实际窗口长度必须小于或等于序号空间大小的一半。</p><p>下表展示了可靠数据传输机制及其用途的总结：</p><table><thead><tr><th align="left">机制</th><th align="left">用途和说明</th></tr></thead><tbody><tr><td align="left">检验和</td><td align="left">用于检测在一个传输分组的比特错误。</td></tr><tr><td align="left">定时器</td><td align="left">用于检测超时/重传一个分组，可能由于该分组（或其ACK）丢失，可能传输超时。</td></tr><tr><td align="left">序号</td><td align="left">用于从发送方流向接收方的数据分组按序排号。所接收分组的序号间的空隙可使该接收方检测出丢失的分组。具有相同序号的分组可使接收方检测出一个分组的冗余拷贝。</td></tr><tr><td align="left">确认</td><td align="left">接收方用于告知发送方一个分组或一组分组已经被正确地接收到。</td></tr><tr><td align="left">否定确认</td><td align="left">接收方用于告知发送方某个分组未被正确接收。</td></tr><tr><td align="left">窗口、流水线</td><td align="left">发送方也许被限制仅发送那些序号落在一个限定范围内的分组。通过允许一次发送多个分组但未被确认，发送方的利用率可在停等等操作模式的基础上增加。</td></tr></tbody></table><h2 id="面向连接的运算：TCP"><a href="#面向连接的运算：TCP" class="headerlink" title="面向连接的运算：TCP"></a>面向连接的运算：TCP</h2><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP是面向连接的（connection-oriented），在进程间可以开始与另一个进程发送数据之前，这两个进程必须先相互“握手”，即互相发送预备字段，以建立确保数据传输的参数。作为TCP连接建立的一部分，连接的双方都会初始化与TCP连接相关的许多TCP状态变量。</p><p>TCP协议只在端系统中运行，而不会在中间的网络元素（路由器和链路层交换机）中运行，所以网络元素不会维持TCP连接状态。</p><p>TCP是全双工服务，也是点对点服务。在三次握手中，前两次不能存在有效载荷，第三次可以。</p><p>对于发送方，TCP将数据引导到连接的发送缓存里，发送缓存是三次握手初期设置的缓存之一。TCP可以从缓存中取出并放入报文段中的数据数量受限于<strong>最大报文长度</strong>（Maximum Segment Size，MSS）。MSS通常根据最初确定的最大链路层长度（最大传输单元（MTU））来设置。设置该MSS要保证一个TCP报文段加上TCP/IP首部长度将适合单个链路层帧。</p><p>TCP为每块数据配上一个TCP首部，从而形成TCP报文段。这些报文段传输给网络层，网络层将其分别封装进网络层IP数据报中。然后这些IP数据报被发送到网络中。当TCP在另一端接收到一个报文段后，该报文段的数据就被放入该TCP连接的缓存中。</p><h3 id="TCP报文段结构"><a href="#TCP报文段结构" class="headerlink" title="TCP报文段结构"></a>TCP报文段结构</h3><p><a href="https://s2.ax1x.com/2019/12/25/lilwDA.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/25/lilwDA.png" alt="TCP packet struction"></a></p><p>当TCP发送大文件时，通常是将该文件划分为长度为MSS的若干块。报文中除了包含源端口、目的端口、校验和等与UDP一致的，还包含部分其他数据：</p><ol><li>32比特的序号字段（sequence number）和32比特的确认字段（acknowledgment number）。提供可靠数据传输。</li><li>16比特的接收窗口字段，用于流量控制。</li><li>4比特的首部长度字段，指示了以32比特的字为单位的TCP首部长度。</li><li>可选与变长的可选字段（options），该字段用于发送方与接收方协商最大报文长度（MSS）时，或在高速网络下用作窗口调节因子。</li><li>6比特标志字段。ACK比特用于指示确认字段中的值是有效的，即该报文段包括一个对已被成功接收报文段的确认。RST、SYN和FIN用于连接建立和拆除。当PSH比特被设置时，指示接收方应该立即将数据交付给上层。URG比特用来指示报文段中存放着被发送端实体置为紧急的数据。当紧急数据存在并给出指向紧急数据尾的指针的时候，TCP必须通知接收端的上层实体。（实践中PSH、URG和紧急数据指针并没有使用）。</li></ol><h4 id="序号和确认号"><a href="#序号和确认号" class="headerlink" title="序号和确认号"></a>序号和确认号</h4><p>TCP把数据看成一个无结构的、有序的字节流，序号建立在传送的字节流之上，而不是建立在传送的报文段的序列上。一个报文段的序列号是该报文段首字节的字节流编号。</p><p>TCP是双全工的，因此A向B传送的同时，也许同时接收B的数据（同一条TCP连接）。主机A填充进报文段的确认号是主机A期望从主机B收到的下一字节的序号，即可以看做当前A已经接收到的字节数减1，相当于在告诉B当前A已经确认接收到的数据。（这里说确认接收的数据和已经收到的数据其实不是很准确，因为不一定是从0开始的，而是按照一定方式就初始化开始的）。</p><p>同时对于确认号来说，由于TCP是流水线传输，所以对于已经确认接收到的数据来说，可能中间部分没有收到，其前面的分组和后面都收到了，此时确认号是该流中至第一个丢失字节为止的字节，所以TCP被称为提供累积确认（cunulative acknowledgment）。对于失序到达的后面的数据，TCP也不会丢弃，而是缓冲下来。</p><p>这里序号和确认号分别对于与发送方和接收方的序号，从初始化序号即可看出来。一条TCP连接的双方均可以随机选择初始序列号(目的是减少将那些人在网络中存在的来自两台主机之间先前已经终止的连接的报文段、误认为是这两台主机之间新建立连接所产生的有效报文段的可能性（可能碰巧与就连接使用相同的端口号）)。例如A初始序号为a，B初始序号为b，此时相当于B已经接收了a-1个数据，A已经接收了b-1个数据，因此A接下来要接收的数据是b，B接下来要接收的数据为a，因此A的确认号为b，B的确认号为a。</p><p>如下例：</p><p><a href="https://s2.ax1x.com/2019/12/25/liJI9P.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/25/liJI9P.png" alt="seq ack"></a></p><p>上图中A的序号是42，B的序号是79。</p><p>注意：对于发送方来说，发送完成后就要等待接收确认，对于接收方来说，接收到之后，即使自己没有要向发送方传递任何数据，也要发送一个确认报文。如上图的第三天报文。</p><h3 id="往返时间的估计与超时"><a href="#往返时间的估计与超时" class="headerlink" title="往返时间的估计与超时"></a>往返时间的估计与超时</h3><p>与rdt3.0一样，TCP也使用超时/重传机制来处理报文段的丢失问题。</p><h4 id="估计往返时间"><a href="#估计往返时间" class="headerlink" title="估计往返时间"></a>估计往返时间</h4><p>报文段样本RTT（表示为sampleRTT）就是从某报文段被发出到对该报文段被确认收到（收到ACK确认）之间的时间。大多数TCP实现仅在某个时刻做一次sampleRTT测量，而不是为每个发送的报文测量一个sampleRTT。即任意时刻，仅为一个已发送但目前尚未被确认的报文段估计sampleRTT，从而产生一个接近每个RTT的新sampleRTT值。另外，TCP绝不为已被重传的报文段计算sampleRTT。</p><p>显然，sampleRTT值是一个随时间变化的值。TCP维持一个sampleRTT均值（称为EstimatedRTT）。一但获取新sampleRTT值就更新EstimatedRTT：<br>$$<br>EstimatedRTT = (1-\alpha)*EstimatedRTT + \alpha *SampleRTT<br>$$<br>$\alpha$一般取0.125。</p><p>EstimatedRTT是一个sampleRTT的加权平均值，且越接近当前的采样，权重越大。</p><p>除了定义估算RTT外，测量RTT的变化也是有价值的。RTT偏差DevRTT，用于估算sampleRTT一般会偏离EstimatedRTT的程度：<br>$$<br>DevRTT = (1-\beta) * DevRTT + \beta *|sampleRTT - EstimatedRTT|<br>$$<br>$\beta$一般取0.25。</p><h4 id="设置和管理重传超时间隔"><a href="#设置和管理重传超时间隔" class="headerlink" title="设置和管理重传超时间隔"></a>设置和管理重传超时间隔</h4><p>超时间隔应该大于等于EstimatedRTT，否则会造成不必要的重传。超时间隔也不能大太多，否则当报文丢失时，TCP不能很快重传该报文，导致数据传输时延大。于是TCP超时间隔设置为：<br>$$<br>TimeoutInterval = EstimatedRTT + 4 * DevRTT<br>$$</p><h3 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a>可靠数据传输</h3><p>TCP可靠传输服务确保一个进程从其接收缓存中读出的数据流是无损的、无间隔的、非冗余和按序的数据流。</p><p>前面我们在SR中讲到的方法是使每一个报文和一个定时器关联，但定时器花销是是否大的，因此推荐的定时器管理是仅使用单一的定时器。</p><p>下面给出TCP发送方高度简化的描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/假设发送方不受TCP流量和拥塞控制的限制, 来自上层的数据长度小于MSS,且数据传送只在一个方向进行. */</span><br><span class="line"></span><br><span class="line">loop(forever)</span><br><span class="line">&#123;</span><br><span class="line">switch(event)</span><br><span class="line"></span><br><span class="line">event: data recieved from application above create TCP segment with sequence number NextSeqNum</span><br><span class="line">if(timer currently not running)</span><br><span class="line">strat timer</span><br><span class="line">pass segment to IP</span><br><span class="line">NextSeqNum = NextSeqNum+length(data)</span><br><span class="line">break</span><br><span class="line"></span><br><span class="line">event: timer timeout</span><br><span class="line">retransmit not-yet-acknowledged segment with samllest sequence number</span><br><span class="line">start timer</span><br><span class="line">break</span><br><span class="line"></span><br><span class="line">event : ACK received, with ACK field value of y</span><br><span class="line">if(y &gt; SendBase)</span><br><span class="line">SendBase = y</span><br><span class="line">if(there are currently any not-yet-acknowledged segments)</span><br><span class="line">start timer</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Nextseqnum被用来记录序号，SendBase是最小为被确认的字节的序号。</p><h4 id="超时间隔加倍"><a href="#超时间隔加倍" class="headerlink" title="超时间隔加倍"></a>超时间隔加倍</h4><p>如前所述，TCP重传具有最小序号的还没被确认的报文段。只是每次TCP重传时都会将下一次的超时间隔设置为先前的两倍，而不是从EstimatedRTT和DevRTT推算出来的值。然而每当定时器在另外两个事件（即收到上层应用的数据和收到ACK）中任意一个启动时，TimeoutInterval由最近的EstimatedRTT值与DevRTT得到。</p><p>这种修改提供了一个形式受限的拥塞控制。</p><h4 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h4><p>超时触发重传存在的问题是超时周期可能相对较长。发送方通常可在超时时间之前通过注意所谓的冗余ACK来较好的检测到丢包情况。冗余ACK就是再次确认某个报文段的ACK，而发送方先前已经收到对该报文段的确认。</p><p>下表总结了TCP接收方ACK的生成策略：</p><table><thead><tr><th align="left">事件</th><th align="left">TCP接收方动作</th></tr></thead><tbody><tr><td align="left">具有所期望的按序报文段到达，所有在期望序号以前的数据都已经被确认</td><td align="left">延迟的ACK，对另一个按序报文段的达到最多等待500ms，如果下一个报文段在这个时间间隔内没有达到，则发送一个ACK</td></tr><tr><td align="left">具有所期望序号的按序报文段到达，另一个按序报文段等待ACK传输</td><td align="left">立即发送单个累积ACK，以确认两个按序报文段。</td></tr><tr><td align="left">比期望大的失序报文段到达，检测出现间隔</td><td align="left">立即发送冗余ACK，指示下一个期待字节的序号（其为间隔的低端序号）</td></tr><tr><td align="left">能部分或完全填充数据间隔的报文段到达</td><td align="left">倘若该报文段起始于低端，立即发送ACK</td></tr></tbody></table><p>因为发送方经常发送大量报文段，如果一个报文段丢失，就可能引起许多冗余ACK。如果TCP发送方接收到对相同数据的3个冗余ACK，它把这当成一种指示，说明在这个已被确认过三次的报文段之后的报文段已经丢失。因此，一旦收到3个冗余ACK，TCP就执行快速重传，即在该报文段超时之前重传。</p><p>因此，可用下面的代码来替代之前的发送方部分代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">event : ACK received,wite ACK field value of y</span><br><span class="line">if(y &gt;SendBase)</span><br><span class="line">&#123;</span><br><span class="line">SendBase = y</span><br><span class="line">if(there are currently any not yet acknowledged segments)</span><br><span class="line">start timer</span><br><span class="line">&#125;</span><br><span class="line">else&#123; /* y == SendBase, 即收到冗余ACK */</span><br><span class="line">increment number of duplicate ACks received for y</span><br><span class="line">if(number of duplicate ACKs received for y==3)</span><br><span class="line">&#123;</span><br><span class="line">/* TCP fast retransmit */</span><br><span class="line">resend segment with sequence number y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TCP的差错恢复机制应该属于GBN和SR的混合体。</p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>一条TCP连接每一测主机都为该连接设置了接收缓存。TCP提供了流量控制服务（flow-control service）以消除发送方使接收方缓存溢出的可能。该服务与拥塞控制不同。</p><p>TCP通过让发送方维护一个称为接收窗口（receive window）的变量来提供流量控制。接收窗口用于给发送方一个指示——该接收方还有多少可用的缓存空间。由于TCP是双全工通信，在连接两端的发送方都各种维护一个接收窗口。假设主机A通过一条TCP连接向主机B发送一个大文件。主机B为该连接分配一个缓存区，用RevBuffer来表示其大小。主机上的应用进程不时地从该缓存中读取数据。同时定义如下变量：</p><p>LastByteRead：主机B上的应用进程从缓存读出的数据流的最后一个字节的编号。</p><p>LastByteRevd：从网络到达的并且已放入主机B接收缓存中的数据流的最后一个字节的编号。</p><p>由于TCP不允许缓存溢出，因此：<br>$$<br>LastByteRecv - LastByteRead &lt;= RevBuffer<br>$$<br>接收窗口用rwnd表示，则：<br>$$<br>rwnd = RevBuffer - [LastByteRevd - LastByteRead]<br>$$<br>rwnd是动态变化的。</p><p><a href="https://s2.ax1x.com/2019/12/25/liOh9g.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/25/liOh9g.png" alt="rwnd"></a></p><p>主机B通过把当前rwnd值放到它发送给A的报文段接收窗口字段中，通知主机A它在该连接的缓存中还有多少可用空间。开始时，主机B设定rwnd = RevBuffer。为了实现这一点，主机B必须跟踪几个与连接有关的变量。</p><p>主机A轮流跟踪两个变量，LastByteSent和LastByteAcked。这两个变量之间的差LastByteSend - LastByteAsked就是主机A发送到连接中但未被确认的数据量。将该数量限制在rwnd内就可以保证主机A不会使主机B的接收缓存溢出。所以：<br>$$<br>LastByteSent - LastByteAcked &lt;= rwnd<br>$$<br>但该方案存在一个问题。如果B的接收缓存已经满了，使得rwnd = 0。将rend告知A之后，假设主机B上没有任何数据要发送给A。此时，主机B上的应用进程将缓存清空，TCP并不向主机A发送任何带有rwnd的新报文。这样，主机A不可能知道主机B接收空间已经有新空间了，即主机A被阻塞而不能再发送数据。为了解决这个问题，TCP要求，当主机B接收窗口为0时，主机A继续发送只有一个字节数据的报文段。这些报文段将会被接收方确认。最终缓存将开始清空，并且确认报文里将包含一个非0的rwnd值。</p><h3 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h3><p>现在来看一条TCP连接是如何建立的，假设运行在主机（客户）上的一个进程想要与另一台主机（服务器）上的进程建立一条连接。客户机会用下面方式与服务器建立连接：</p><ol><li>第一步：客户机的TCP首先向服务器端的TCP发送一个特殊的TCP报文段。该报文不包含应用层数据。但是报文段首部中的一个标志位（SYN比特）被置1.因此这个特殊报文段被称为SYN报文段。另外，客户机会随机初始化一个初始序号（client_isn），并将该编号置于起始的TCP SYN报文段的序号段中。该报文被封装在一个IP数据报中，并发送给服务器。</li><li>第二步：一旦一个包含TCP SYN报文段的IP数据报到达服务器主机，服务器会从该数据报中提取出TCP SYN报文段，为该TCP连接分配TCP缓存和变量，并向该酷虎就TCP发送允许连接的报文段。（在完成三次握手的第三步之前分配资源，使得TCP易于受到被称为SYN洪泛的拒绝服务攻击）。这个运行连接的报文段也不包含应用层数据。但是该报文段首部包含3个重要信息。首先SYN比特被置1，其次该TCP报文段首部的确认号字段被设置为client_isn+1。最后，服务器选择自己的初始序号（server_isn)，并将其放置到TCP报文段首部的序号字段中。该报文被称为SYNACK报文段。</li><li>在收到SYNACK报文段后，客户机也要为该连接分配缓存和变量。客户机向服务器发送另一个报文段，最后一个报文段对服务器的允许连接的报文段进行了确认（将值server_isn+1放置到TCP报文段首部的确认字段中来完成此项工作）。因为连接已经建立，该SYN比特被置为0。该三次握手的第三阶段可以在报文段负载中携带客户到服务器的数据。</li></ol><p>一旦建立连接后，就可以互相传输报文了，此时SYN都是0。</p><p><a href="https://s2.ax1x.com/2019/12/25/lF9o79.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/25/lF9o79.png" alt="TCP three-way"></a></p><p>下面我们再来看TCP如何终止连接。参与连接的任何一个都可以终止该连接。当连接结束后，主机中的资源将被释放。假如某个主机打算关闭连接，如下图。客户应用进程发出一个关闭连接命令。这会使客户TCP向服务器进程发送一个特殊的TCP报文段，该报文段首部FIN标志位被设置为1。当服务器接收到该该报文段后，就向发送方返回一个确认报文段。然后服务器就发送自己的终止报文，其FIN被置为1.最后，该客户机对这个服务器的终止报文进行确认。此时，在两台主机上用于该连接的所以资源都被释放了。</p><p><a href="https://s2.ax1x.com/2019/12/25/lFPQVH.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/25/lFPQVH.png" alt="TCP fin"></a></p><p>下图展示了客户TCP经典的TCP状态序列：</p><p><a href="https://s2.ax1x.com/2019/12/25/lFPfZ4.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/25/lFPfZ4.png" alt="TCP state"></a></p><p>其中在TIME_WAIT等待状态时，确定ACK丢失，TIME_WAIT状态使TCP客户重传最后的确认报文经过等待后，连接正式关闭，客户机所以资源包括端口号被释放。（等待时间取决于实现）</p><p>下图为服务器端TCP经历的典型的TCP状态序列：</p><p><a href="https://s2.ax1x.com/2019/12/25/lFitYR.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/25/lFitYR.png" alt="TCP state"></a></p><h2 id="拥塞控制原理"><a href="#拥塞控制原理" class="headerlink" title="拥塞控制原理"></a>拥塞控制原理</h2><h3 id="拥塞原因与代价"><a href="#拥塞原因与代价" class="headerlink" title="拥塞原因与代价"></a>拥塞原因与代价</h3><h4 id="情况1：两个发送方和一台无穷大缓存的路由器"><a href="#情况1：两个发送方和一台无穷大缓存的路由器" class="headerlink" title="情况1：两个发送方和一台无穷大缓存的路由器"></a>情况1：两个发送方和一台无穷大缓存的路由器</h4><p>最简单的拥塞情况：两台主机（A和B）都有一条连接，且这两条连接共享源与目的地之间的单跳路由。此时限制只有共享式输出链路的容量。当两个主机传输的总速度超过链路的总容量，就会导致拥塞。</p><h4 id="情况2：两个发送方和一台具有有限缓存的路由器"><a href="#情况2：两个发送方和一台具有有限缓存的路由器" class="headerlink" title="情况2：两个发送方和一台具有有限缓存的路由器"></a>情况2：两个发送方和一台具有有限缓存的路由器</h4><p>此时拥塞则有两部分组成，第一部分和情况1一样，两台主机所传输速度和，还有一个问题则是在有限缓存的路由器上存在丢包。丢包会加大两台主机传输速率，但造成更严重的拥塞和丢包。</p><h4 id="情况3-4个发送方和具有有限缓存的多台路由器及多跳路径"><a href="#情况3-4个发送方和具有有限缓存的多台路由器及多跳路径" class="headerlink" title="情况3:4个发送方和具有有限缓存的多台路由器及多跳路径"></a>情况3:4个发送方和具有有限缓存的多台路由器及多跳路径</h4><p><a href="https://s2.ax1x.com/2019/12/26/lkhPNd.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/26/lkhPNd.png" alt="state 4"></a></p><p>此时对于每一条传输路径来说，都经历两段。每段都有两条路径共享，而且共享段是其中一条路径的第一段，另一条路径的第二段。此时，往往作为第一段的那条路径会被优先满足，挤占掉作为第二段路径的那条路径。而被满足的那条路径到它的第二段路径时，又会被另一条路径挤占掉（因为在它的第二段里还存一个作为第一段的路径）。最终将会导致所以路径全部拥塞。</p><h3 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h3><p>拥塞控制主要有两种方法：</p><ol><li>端到端拥塞控制：网络中存在拥塞，端系统必须通过对网络进行观察来推断。</li><li>网络辅助的拥塞控制：在网络辅助的拥塞控制中，网络层构建（即路由器）向发送方提供关于网络中阻塞状态的显示反馈信息。</li></ol><h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h2><p>TCP所采取的方法是让每一个发送方根据所感知到的网络拥塞程度来限定其向连接发送的流量的速率。</p><p>首先来看TCP如何限制向其连接发送流量的。运行在发送方的TCP拥塞控制机制跟踪一个额外的变量，即拥塞控制窗口（cwnd），它对一个TCP发送方能够向网络中发送流量的速率进行了限制，特别是，一个发送方中未被确认的数据量不会超过cwnd和rwnd中的最小值：<br>$$<br>LastByteSent - LastByteAcked &lt;= min{cwnd, rwnd}<br>$$<br>为了只关注与拥塞控制，下面的讨论假设rwnd足够大，我们可以忽略该值。因此，发送方发送速率大概是cwnd/RTT 字节/秒。通过调节cwnd值，我们可以调节其发送速率。</p><p>下面考虑TCP发送方如何感知它与目的地之间的路径上出现了拥塞。我们将一个TCP发送方的“丢包事件”定义为：要么出现超时，要么收到来自接收方的3个冗余ACK。</p><p>接下来考虑网络没有拥塞的情况，即没有出现丢包时间的情况。此时，TCP的发送方将收到对于以前未确认报文段的确认。TCP将这些确认到达作为一切正常的指示，并用来增加窗口的长度。因为TCP使用确认来触发（或计时）增大它的拥塞窗口长度，TCP被说成是自计时的。</p><p>TCP对各个事件的指导性原则是：</p><ol><li>一个丢失的报文段意味着拥塞，因此丢失报文段时应该降低TCP发送方的速率。一个超时事件或者四个确认（一个初始ACK和三个冗余ACK）被解释为“丢包事件”的一种隐含的指示。</li><li>一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加发送方的速率。</li><li>带宽探测：给定ACK指示源到目的地路径无拥塞，而丢包事件指示路径拥塞，TCP调节其传输速率的策略是增加其速率以响应到达的ACK，除非出现丢包事件，此时才减小传输速度。因为，为探测拥塞开始的速率，TCP发送方增加它的传输速率，从该速率后退，进而再次探测，可靠拥塞开始速率是否发送了变化。</li></ol><p>TCP拥塞控制算法包括三部分：慢启动；拥塞避免；快速恢复。</p><h4 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h4><p>当一条TCP连接开始时，cwnd通常设置为一个MSS的较小值，TCP希望迅速找到可用带宽的数量。在慢启动状态，cwnd的值以1个MSS开始并且每当传输的报文段首次被确认就增加一个MSS。如下图所示，每过一个RTT，发送速率就翻倍，TCP发送速率起始慢，但在慢启动阶段以指数增长，</p><p><a href="https://s2.ax1x.com/2019/12/26/lkbHEV.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/26/lkbHEV.png" alt="慢启动"></a></p><p>慢启动结束的条件有多种。首先，如果存在一个由超时指示的丢包（即拥塞），TCP发送方将cwnd设置为1并重新开始慢启动过程。它还将第二个状态变量的值ssthresh（慢启动阈值）设置为cwnd/2，即当检测到拥塞时，将ssthresh置为拥塞窗口值的一半。慢启动的第二种方式是直接与ssthresh值相关联。因为当检测到拥塞时ssthresh设为cwnd的一半，当cwnd等于ssthresh值时，结束慢启动并将TCP转移到拥塞避免模式。最后一种方式是，如果检测到3个冗余ACK，TCP执行快速重传并进入快速恢复状态。</p><h4 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h4><p>一旦进入拥塞避免，cwnd值大约是上次遇到拥塞时值的一半。此时采取比较保守的方法，每个RTT只将cwnd值加一（慢启动成倍）。通用方法是对于TCP发送方无论何时到达一个新的确认，就将cwnd增加一个MSS（MSS/cwnd）字节。例如，MSS是1460字节，cwnd是14600字节，则在一个RTT内发送10个报文。每个到达ACK增加1/10MSS的拥塞长度，这样在收到10个报文后，拥塞窗口就增加了一个MSS。</p><p>结束拥塞避免的线性增长时机为：当出现超时时，TCP的拥塞避免算法行为与慢启动情况一致，cwnd被设置为1MSS。当出现3个冗余ACK事件时，网络继续从发送方向接收方交付报文段，因此TCP对这种丢包事件的行为，相比于超时指示的丢包应当不那么剧烈，此时TCP将cwnd的值减半，并且将ssthresh的值记录为cwnd的值的一半。接下来进入快速恢复状态。</p><h4 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h4><p>在快速恢复中，对于引起TCP进入快速恢复状态的缺失报文段，对收到的每个冗余的ACK，cwnd的值增加一个MSS。最终，当对丢失报文段的一个ACK到达时，TCP进入拥塞避免状态。如果出现超时事件，快速恢复再执行如图在慢启动和拥塞避免中相同的动作，迁移到慢启动状态。</p><p>下图展示了TCP的FSM：</p><p><a href="https://s2.ax1x.com/2019/12/26/lkO0c4.png" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/26/lkO0c4.png" alt="TCP FSM"></a></p><p>TCP拥塞控制常常被错误加性增、乘性减（AIMD）。</p><p>TCP吞吐量公式，该公式作为丢包率L、往返时间RTT和最大报文段长度MSS的函数：<br>$$<br>一条连接的平均吞吐量 = \frac{1.22*MSS}{RTT\sqrt{L}}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> -计算机基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnlinux</title>
      <link href="/learnlinux.html"/>
      <url>/learnlinux.html</url>
      
        <content type="html"><![CDATA[<!--小白学习Linux的第一天。--><h2 id="linux注意事项"><a href="#linux注意事项" class="headerlink" title="linux注意事项"></a>linux注意事项</h2><ol><li><p>严格区分大小写（命令、文件名等）</p></li><li><p>Linux中所有内容以文件形式保存，包括硬件</p><ul><li>硬件文件是/dev/sd[a-p]</li><li>光盘文件是/dev/sr0等</li></ul></li><li><p>Linux不靠扩展名区分文件类型（靠的是文件权限）</p><ul><li>压缩包：”*.gz“、”*.bz2“、”*.tar.bz2“等</li><li>二进制包：”rpm“等</li><li>网页文件：”*.html“</li><li>脚本文件：”*.sh”</li><li>配置文件：“*.conf”</li></ul><p>但是这些扩展名是给管理员看的，其实并不需要。主要是便于识别，非必须。</p></li><li><p>Linux所有的存储设备都必须挂载，只有用户才能使用，包括硬盘、U盘和光盘</p></li><li><p>Windows下的程序不能直接在Linux中安装和运行</p></li><li><p>服务器注意事项：</p><ul><li><p>远程服务器不允许关机，只能重启</p></li><li><p>重启时应该关闭服务</p></li><li><p>不要在服务器访问高峰运行高负载命令</p></li><li><p>远程配置防火墙不要把自己踢出服务器</p></li><li><p>制定合理的密码规范并定期更新</p></li><li><p>合理分配权限</p></li><li><p>定期备份重要数据和日志</p></li></ul></li></ol><h2 id="Linux各个目录的作用"><a href="#Linux各个目录的作用" class="headerlink" title="Linux各个目录的作用"></a>Linux各个目录的作用</h2><ul><li>/bin/ 　存放系统命令的目录，普通用户和超级用户都可以执行. 不过放在/bin下的命令在单用户模式下也可以执行 。 </li><li>/sbin/　保存和系统环境设置相关的命令，只有超级用户可以使用这些命令进行系统环境设置，但是有些命令可以允许普通用户查看。</li><li>/usr/bin/　存放系统命令的目录，普通用户和超级用户都可以执行。这些命令和系统无关，在单用户模式下不能执行。</li><li>/usr/sbin/　存放根文件系统不必要的系统管理命令，例如多数服务程序。只有超级用户可以使用。</li><li>/boot/　系统启动目录，保存系统启动相关文件。如内核文件和启动引导程序。</li><li>/dev/　 设备文件保存位置。</li><li>/etc/　配置文件保存位置。系统内所有采用默认安装(rpm安装)的服务的配置文件全部都保存在这个目录当中。如用户的账号和密码，服务的启动脚本。常用服务的配置文件等。</li><li>/home/　普通用户的家目录。建立每个用户时，每个用户要有一个默认的登录位置，这个位置就是这个用户的家目录。所有普通用户的家目录就是在/home下建立一个和用户名相同的目录。如user1的家目录就是/home/user1</li><li>/lib/ 　 系统调用的函数库保存位置</li><li>/lost+found/　当系统意外崩溃或意外关机，而产生一些文件碎片放在这里。当系统启动的过程中fsck工具会检查这里，并修复已损坏的文件系统。这个目录只在每个分区中出现，例如/lost+found 就是根分区的备份恢复录，/boot/lost+found 就是/boot分区的备份恢复目录。</li><li>/media/ 　挂载目录，系统建议是用来挂载媒体设备的，例如软盘和光盘。</li><li>/mnt/ 　　挂载目录，早期linux中只有这一个挂载目录，并没有细分，现在这个目录系统建议挂载额外设备，例如U盘，移动硬盘和其他操作系统的分区</li><li>/misc/ 　挂载目录， 系统建议用来挂载NFS服务的共享目录。</li><li>/opt/ 　第三方安装的软件保存位置。 这个目录就是放置和安装其他软件的位置。现在行业习惯是安装在在usr/local/目录中。</li><li>/proc/ 　虚拟文件系统，该目录中的数据并不保存到硬盘当中，而是保存到内存当中。 主要保存系统的内核，进程。外部设备状态和网络状态灯。如/proc/cpuinfo 是保存cpu信息的，/proc/devices是保存设备驱动的列表的，/proc/filesystems是保存文件系统列表的， /proc/net是保存网络协议信息的。注意不要往里面写东西。</li><li>/sys/　虚拟文件系统，和/proc目录相似，都是保存在内存当中的，主要是保存于内核相关信息的。</li><li>/root/ 　超级用户的家目录，普通用户家目录在”/home”下，超级用户家目录直接在 “/”下。</li><li>/srv/ 　服务数据目录.一些系统服务启动之后，可以在这个目录中保存所需要的数据。</li><li>/tmp/　临时目录，系统存在临时文件的目录. 该目录下所有用户都可以访问和写入，建议此目录中不能存放重要数据，最好每次开机都可以把该目录清空</li><li>/usr/ 　系统软件资源目录，”unix softwre resource”的缩写，存在系统软件资源的目录。系统中安装的软件大多数保存在这里。</li><li>/var/ 　动态数据保存位置，主要保存缓存，日志已经软件运行所产生的文件。</li></ul><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h3><h4 id="命令格式与目录处理命令ls"><a href="#命令格式与目录处理命令ls" class="headerlink" title="命令格式与目录处理命令ls"></a>命令格式与目录处理命令ls</h4><ul><li><p>命令格式：命令 [-选项] [参数]<br>例 : ls -la /etc</p></li><li><p>说明:   </p><ol><li>个别命令使用不遵循此格式</li><li>当有多个选项时,可以写在一起</li><li>简化选项与完整选项<br>-a 等于 –all</li></ol></li><li><p>目录处理命令</p><p>命令名称: ls</p><p>命令英文原意: list</p><p>命令所在路径: /bin/ls</p><p>执行权限: 所有用户</p><p>功能描述: 显示目录文件</p><p>语法:  ls 选项[-ald] [文件或目录]</p><pre><code>-a 显示所有文件,包括隐藏文件-l 详细信息显示-d 查看目录属性</code></pre></li><li><p>-rw-r–r–</p><p>- 文件类型(- 文件 d 目录 l 软链接文件)<br>rw- r– r–<br>u    g   o<br>u所有者   g所属组   o其他人<br>r读 w写 x执行</p></li></ul><h4 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h4><h5 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h5><ul><li>命令名称:mkdir</li><li>命令英文原意:make directories</li><li>命令所在路径:/bin/mkdir</li><li>执行权限:所有用户</li><li>语法:mkdir -p [目录名]</li><li>功能描述:创建新目录</li><li>-p 递归创建</li><li>范例: $ mkdir -p /tmp/Japan/boduo<br>$ mkdir /tmp/Japan/longze /tmp/Japan/cangjing</li></ul><h5 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h5><ul><li><p>命令名称:cd</p></li><li><p>命令英文原意:change directory</p></li><li><p>命令所在路径:shell内置命令</p></li><li><p>执行权限:所有用户</p></li><li><p>语法:cd [目录]</p></li><li><p>功能描述:切换目录</p></li><li><p>范例:   $ cd  /tmp/Japan/boduo 切换到指定目录</p><p>​            $cd ..        回到上一级目录</p><p>​            $cd ../..     回到上上一次所在目录</p><p>​            $cd -         返回上两级目录            </p></li></ul><h5 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h5><ul><li>命令名称:pwd</li><li>命令英文原意:print working directory</li><li>命令所在路径:/bin/pwd</li><li>执行权限:所有用户</li><li>语法:pwd</li><li>功能描述:显示当前目录</li><li>范例:  $ pwd  显示当前目录</li></ul><h5 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h5><ul><li>命令名称:rmdir</li><li>命令英文原意:remove empty directories</li><li>命令所在路径:/bin/rmdir</li><li>执行权限:所有用户</li><li>语法:rmdir [目录名]</li><li>功能描述: 删除空目录</li><li>范例: $ rmdir /tmp/linux/test</li></ul><h5 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h5><ul><li><p>命令名称: cp</p></li><li><p>命令英文原意: copy</p></li><li><p>命令所在路径: /bin/cp</p></li><li><p>执行权限: 所有用户</p></li><li><p>语法: cp  -rp [原文件或目录] [目标目录]</p><p>​                -r 递归复制目录及内部的所有内容</p><p>​                -p 保留文件属性</p><p>​                -f 强制</p><p>​                -i 目标文件以存在，则在覆盖前询问是否覆盖 </p><p>​                -u 若源文件比目标文件新，则覆盖，否则跳过</p></li><li><p>功能描述:复制文件或目录</p></li></ul><h5 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h5><ul><li>命令名称:mv</li><li>命令英文原意:move</li><li>命令所在路径:/bin/mv</li><li>执行权限:所有用户</li><li>语法:mv [原文件或目录] [目标目录]</li><li>功能描述:剪切文件、改名</li></ul><h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h5><ul><li>命令名称:rm</li><li>命令英文原意:remove</li><li>命令所在路径:/bin/rm</li><li>执行权限:所有用户</li><li>语法:  rm -rf [文件或目录]</li></ul><p>​                        -r 删除目录</p><p>​                        -f 强制执行</p><ul><li>功能描述:删除文件</li></ul><h4 id="文件处理命令-1"><a href="#文件处理命令-1" class="headerlink" title="文件处理命令"></a>文件处理命令</h4><h5 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h5><ul><li><p>创建空文件</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch file_name</span><br></pre></td></tr></table></figure></li></ul><h5 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h5><ul><li><p>语法: cat [文件名]</p></li><li><p>功能描述: 显示文件内容</p><p>​                 -n 显示行号  </p></li></ul><h5 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h5><ul><li>语法:tac [文件名]</li><li>功能描述:显示文件内容(反向列示)</li></ul><h5 id="more"><a href="#more" class="headerlink" title="more"></a>more</h5><ul><li>语法:more [文件名]</li></ul><p>​         (空格) 或f   翻页<br>​         (Enter)       换行<br>​         q或Q          退出</p><ul><li>功能描述:分页显示文件内容</li></ul><h5 id="less"><a href="#less" class="headerlink" title="less"></a>less</h5><ul><li><p>语法:less [文件名]</p></li><li><p>功能描述:分页显示文件内容(可向上翻页)</p></li></ul><h5 id="head"><a href="#head" class="headerlink" title="head"></a>head</h5><ul><li>语法:head [文件名]</li><li>功能描述:显示文件前面几行<pre><code>-n 指定行数</code></pre></li></ul><h5 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h5><ul><li><p>语法:tail [文件名]</p></li><li><p>功能描述:显示文件后面几行</p><pre><code>-n 指定行数-f 动态显示文件末尾内容</code></pre></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tail -n 100 /etc/cron  <span class="comment">#显示最后100行数据</span></span><br><span class="line">tail -n -100 /etc/cron <span class="comment">#除了前99行不显示外，显示第100行到末尾行</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="链接命令"><a href="#链接命令" class="headerlink" title="链接命令"></a>链接命令</h4><h5 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h5><ul><li>语法:ln -s [原文件] [目标文件]<pre><code>-s 创建软链接</code></pre></li><li>功能描述:生成链接文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /etc/issue /tmp/issue.soft</span><br><span class="line">  创建文件/etc/issue的软链接/tmp/issue.soft</span><br><span class="line">$ ln /etc/issue /tmp/issue.hard</span><br><span class="line">  创建文件/etc/issue的硬链接/tmp/issue.hard</span><br></pre></td></tr></table></figure><ul><li>软链接特征:类似Windows快捷方式<br>1、lrwxrwxrwx l 软链接<pre><code>软链接文件权限都为rwxrwxrwx</code></pre>2、文件大小-只是符号链接<br>3、/tmp/issue.soft -&gt; /etc/issue<pre><code>箭头指向原文件</code></pre></li><li>硬链接特征:<br>1、拷贝cp -p + 同步更新<pre><code>echo &quot;this is a test&quot; &gt;&gt; /etc/motd</code></pre>2、可通过i节点识别<br>3、不能跨分区<br>4、不能针对目录使用</li></ul><h3 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h3><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><ul><li><p>语法:chmod [{ugoa}{+-=}{rwx}] [文件或目录]</p><pre><code>[mode=421 ] [文件或目录]-R 递归修改</code></pre></li><li><ul><li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li><li>表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li><li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li></ul></li><li><p>功能描述:改变文件或目录权限</p></li><li><p>将目前目录下的所有文件与子目录皆设为任何人可读取 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R a+r *</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod pqn file</span><br></pre></td></tr></table></figure><p>其中p,q,n各为一个数字，分别表示User、Group、及Other的权限。</p><p>r=4，w=2，x=1</p><ul><li>若要rwx属性则4+2+1=7；</li><li>若要rw-属性则4+2=6；</li><li>若要r-x属性则4+1=5。</li></ul></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a=rwx file</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure><p>效果相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod ug=rwx,o=x file</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 771 file</span><br></pre></td></tr></table></figure><p>效果相同</p></li></ul><h4 id="其他权限管理命令"><a href="#其他权限管理命令" class="headerlink" title="其他权限管理命令"></a>其他权限管理命令</h4><h5 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h5><ul><li><p>语法:chown [用户] [文件或目录]</p></li><li><p>功能描述:改变文件或目录的所有者</p></li><li><p>范例:$ chown usr_1 file_1</p><p>改变文件file_1的所有者为usr_1</p></li></ul><h5 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h5><ul><li>语法:chgrp [用户组] [文件或目录]</li><li>功能描述:改变文件或目录的所属组</li><li>范例:$ chgrp lampbrother file_1<pre><code>改变文件file_1的所属组为lampbrother</code></pre></li></ul><h5 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h5><ul><li><p>语法:umask [-S]</p><p>​         -S 以rwx形式显示新建文件缺省权限</p></li><li><p>功能描述:显示、设置文件的缺省权限</p></li><li><p>范例: $ umask -S</p></li></ul><h3 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h3><p>find</p><ul><li><p>功能描述:文件搜索</p></li><li><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find  path  -option  【 -<span class="built_in">print</span> 】  【 -<span class="built_in">exec</span>  -ok  |xargs  |grep  】 【  <span class="built_in">command</span>  &#123;&#125; \;  】</span><br></pre></td></tr></table></figure></li><li><p><strong>path</strong>：要查找的目录路径。 </p><ul><li>~ 表示$HOME目录</li><li>​    <strong>.</strong> 表示当前目录</li><li>​    / 表示根目录 </li></ul></li><li><p><strong>-exec</strong>　对搜索到的文件执行特定的操作，固定的格式为：<code>-exec &#39;commond&#39; {} \</code>;  <strong>注意：{} 表示查询的结果。</strong></p><p>举例1: 搜索 /etc 目录下的文件（非目录），文件以 conf 结尾，且大于 10k，然后将其删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /etc -type f -name &apos;*.conf&apos; -size +10k -exec rm -f &#123;&#125; \</span><br></pre></td></tr></table></figure></li><li><p><strong>ok</strong>：与exec作用相同，</p><pre><code>区别在于，在执行命令之前，都会给出提示，让用户确认是否执行 </code></pre></li><li><p><strong>|xargs</strong> 与exec作用相同 ，起承接作用</p><p>区别在于 <strong>|xargs</strong> 主要用于承接删除操作 ，而 <strong>-exec</strong> 都可用 如复制、移动、重命名等</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-name  filename        #查找名为filename的文件</span><br><span class="line">-iname filename        #不区分大小写</span><br><span class="line">-user  user_1　        #查找文件所属用户为user_1的所有文件</span><br><span class="line">-group group_1         #查找文件所属组为group_1的所有文件</span><br><span class="line">-type　　根据类型查找：如下</span><br><span class="line">　　　　　　f　　文件　　　　　　　  find . -type f</span><br><span class="line">　　　　　　d　　目录　　　　　　　　find . -type d</span><br><span class="line">　　　　　　c　　字符设备文件　　　　find . -type c</span><br><span class="line">　　　　　　b　　块设备文件　　　　　find . -type b</span><br><span class="line">　　　　　　l　　链接文件　　　　　  find . -type l</span><br><span class="line">　　　　　　p　　管道文件　　　　　　find . -type p</span><br><span class="line">-size　   根据文件大小查询</span><br><span class="line">　　　　　　-n　　小于 大小为 n 的文件</span><br><span class="line">　　　　　　+n　　大于 大小为 n 的文件</span><br><span class="line">-mtime　　</span><br><span class="line">　　　　　　-n　　n 天以内修改的文件。</span><br><span class="line">　　　　　　+n　　n 天以外修改的文件。</span><br><span class="line">　　　　　　n　　 正好 n天 修改的文件</span><br><span class="line">-mmin　　</span><br><span class="line">　　　　　　-n　　n 分钟以内修改过的文件</span><br><span class="line"> 　　　　　 +n　　n 分钟之前修改过的文件</span><br><span class="line">-perm     #按执行权限来查找</span><br><span class="line">-mindepth n　　从第 n 级目录开始搜索</span><br><span class="line">-maxdepth n　　表示至多搜索到第 n-1 级子目录。</span><br><span class="line"></span><br><span class="line">#逻辑运算符　</span><br><span class="line">-a　　　　与  （默认情况查询条件之间都是 与 的关系）</span><br><span class="line">-o　　　　或</span><br><span class="line">-not | ！　 非</span><br></pre></td></tr></table></figure></li></ul><h4 id="其他搜索命令"><a href="#其他搜索命令" class="headerlink" title="其他搜索命令"></a>其他搜索命令</h4><h5 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h5><ul><li>语法:locate 文件名</li><li>功能描述: 在文件资料库中查找文件</li></ul><h5 id="which"><a href="#which" class="headerlink" title="which"></a>which</h5><ul><li>语法:which 命令</li><li>功能描述:搜索命令所在目录及别名信息</li><li>范例: <code>$ which ls</code></li></ul><h5 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h5><ul><li>语法:whereis [命令名称]</li><li>功能描述:搜索命令所在目录及帮助文档路径</li><li>范例:$ whereis ls</li></ul><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><ul><li><p>语法:grep -iv [指定字串] [文件]</p></li><li><p>功能描述:在文件中搜寻字串匹配的行并输出</p><p>​                -i 不区分大小写</p><p>​                -v 排除指定字串</p></li><li><p>范例:# grep mysql /root/install.log</p></li></ul><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><ul><li>语法:man [命令或配置文件]</li><li>功能描述:获得帮助信息</li><li>范例:  $ man ls   查看ls命令的帮助信息<pre><code>\$ man services    查看配置文件services的帮助信息</code></pre></li></ul><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><ul><li>语法:help 命令</li><li>功能描述:获得Shell内置命令的帮助信息</li><li>范例: $ help umask  查看umask命令的帮助信息</li></ul><h3 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h3><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><ul><li>执行权限:root</li><li>语法:useradd 用户名</li><li>功能描述:添加新用户</li><li>范例: $ useradd finyorko</li></ul><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><ul><li>执行权限:所有用户</li><li>语法:passwd 用户名</li><li>功能描述:设置用户密码</li><li>范例: $ passwd finyorko</li></ul><h4 id="who"><a href="#who" class="headerlink" title="who"></a>who</h4><ul><li>执行权限:所有用户</li><li>语法:who</li><li>功能描述:查看登录用户信息</li><li>范例: $ who</li></ul><h4 id="w"><a href="#w" class="headerlink" title="w"></a>w</h4><ul><li>执行权限:所有用户</li><li>语法:w</li><li>功能描述:查看登录用户详细信息</li><li>范例: $ w</li></ul><h3 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h3><h4 id="gzip压缩"><a href="#gzip压缩" class="headerlink" title="gzip压缩"></a>gzip压缩</h4><ul><li>语法: gzip [文件]</li><li>功能描述: 压缩文件</li><li>压缩后文件格式:   .gz</li></ul><h4 id="gunzip解压"><a href="#gunzip解压" class="headerlink" title="gunzip解压"></a>gunzip解压</h4><ul><li>语法:gunzip [压缩文件]</li><li>功能描述:解压缩.gz的压缩文件</li><li>范例: $ gunzip boduo.gz</li></ul><h4 id="tar压缩"><a href="#tar压缩" class="headerlink" title="tar压缩"></a>tar压缩</h4><ul><li>语法:tar 选项[-zcf] [压缩后文件名] [目录]<pre><code>-c 打包-v 显示详细信息-f 指定文件名-z 打包同时压缩  </code></pre></li><li>功能描述:打包目录</li><li>压缩后文件格式: .tar.gz</li><li>范例:  <code>$ tar -zcf Japan.tar.gz Japan</code>将目录Japan打包并压缩为Japan.tar.gz文件</li></ul><h4 id="tar解压"><a href="#tar解压" class="headerlink" title="tar解压"></a>tar解压</h4><ul><li><p>tar命令解压缩语法:<br>-x 解包<br>-v 显示详细信息<br>-f 指定解压文件<br>-z 解压缩<br>-C 指定需要解压到的目录</p></li><li><p>-r：向压缩归档文件末尾追加文件<br>-u：更新原压缩包中的文件</p></li><li><p>范例:$ tar -zxvf Japan.tar.gz</p></li></ul><h4 id="zip压缩"><a href="#zip压缩" class="headerlink" title="zip压缩"></a>zip压缩</h4><ul><li><p>语法:   zip 选项[-r] [压缩后文件名] [文件或目录]</p><pre><code>-r 压缩目录</code></pre></li><li><p>功能描述:压缩文件或目录</p></li><li><p>压缩后文件格式:.zip</p></li><li><p>范例:<br>$ zip buduo.zip boduo      压缩文件<br>​$ zip -r Japan.zip Japan      压缩目录</p></li></ul><h4 id="unzip解压"><a href="#unzip解压" class="headerlink" title="unzip解压"></a>unzip解压</h4><ul><li>语法:unzip [压缩文件]</li><li>功能描述:解压.zip的压缩文件</li><li>范例:$ unzip test.zip</li></ul><h4 id="bzip2压缩"><a href="#bzip2压缩" class="headerlink" title="bzip2压缩"></a>bzip2压缩</h4><ul><li>语法: bzip2 选项 [-k] [文件]<pre><code>-k 产生压缩文件后保留原文件</code></pre></li><li>功能描述:压缩文件</li><li>压缩后文件格式:   .bz2</li><li>范例:  $ bzip2 -k boduo<br>​           $ tar -cjf Japan.tar.bz2 Japan</li></ul><h4 id="bunzip解压"><a href="#bunzip解压" class="headerlink" title="bunzip解压"></a>bunzip解压</h4><ul><li>语法: bunzip2 选项 [-k] [压缩文件]<pre><code>-k 解压缩后保留原文件</code></pre></li><li>功能描述:解压缩</li><li>范例: $ bunzip2 -k boduo.bz2<pre><code>\$ tar -xjf Japan.tar.bz2</code></pre></li></ul><h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><ul><li>语法:write &lt;用户名&gt;</li><li>功能描述:给用户发信息,以Ctrl+D保存结束</li><li>范例: # write finyorko</li></ul><h4 id="wall"><a href="#wall" class="headerlink" title="wall"></a>wall</h4><ul><li>命令英文原意:write all</li><li>执行权限:所有用户</li><li>语法:wall [message]</li><li>功能描述:发广播信息</li><li>范例: # wall Finyorko is a honest man!</li></ul><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><ul><li>语法:ping 选项 IP地址<pre><code>-c 指定发送次数</code></pre></li><li>功能描述:测试网络连通性</li><li>范例: # ping 192.168.1.156</li></ul><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><ul><li>命令英文原意:interface configure</li><li>执行权限:root</li><li>语法:ifconfig 网卡名称 IP地址</li><li>功能描述:查看和设置网卡信息</li><li>范例:  # ifconfig eth0 192.168.8.250</li></ul><h4 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h4><ul><li>语法:mail [用户名]</li><li>功能描述:查看发送电子邮件</li><li>范例:# mail root</li></ul><h4 id="last"><a href="#last" class="headerlink" title="last"></a>last</h4><ul><li>语法:last</li><li>功能描述:列出目前与过去登入系统的用户信息</li></ul><h4 id="lastlog"><a href="#lastlog" class="headerlink" title="lastlog"></a>lastlog</h4><ul><li>语法:lastlog</li><li>功能描述:检查某特定用户上次登录的时间</li><li>范例 :  $ lastlog<pre><code>\$ lastlog -u 502</code></pre></li></ul><h4 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h4><ul><li>语法:traceroute</li><li>功能描述:显示数据包到主机间的路径</li><li>范例:# traceroute <a href="http://www.lampbrother.net" target="_blank" rel="noopener">www.lampbrother.net</a></li></ul><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><ul><li><p>语法:netstat [选项]</p></li><li><p>功能描述:显示网络相关信息</p></li><li><p>选项:<br>-t :   TCP协议<br>-u :  UDP协议<br>-l :   监听<br>-r :  路由<br>-n : 显示IP地址和端口号</p></li><li><p>范例:</p><p>#netstat -tlun  查看本机监听的端口</p><p>#netstat -an    查看本机所有的网络连接</p><p>#netstat -rn     查看本机路由表</p></li></ul><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><ul><li>语法:setup</li><li>功能描述:配置网络</li><li>范例:# setup</li></ul><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><ul><li><p>mount [-t 文件系统] 设备文件名 挂载点</p></li><li><p>范例:# mount -t  iso9660  /dev/sr0 /mnt/cdrom</p></li></ul><h3 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h3><h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><ul><li>shutdown [选项] 时间</li><li>选项:<br>-c: 取消前一个关机命令<br>-h: 关机<br>-r: 重启</li></ul><h4 id="其他关机命令"><a href="#其他关机命令" class="headerlink" title="其他关机命令"></a>其他关机命令</h4><p>halt</p><p>poweroff</p><p>init 0</p><h4 id="其他重启命令"><a href="#其他重启命令" class="headerlink" title="其他重启命令"></a>其他重启命令</h4><p>reboot</p><p>init 6</p><h4 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h4><ul><li><p>0     关机</p></li><li><p>1     单用户</p></li><li><p>2     不完全多用户,不含NFS服务</p></li><li><p>3     完全多用户</p></li><li><p>4     未分配</p></li><li><p>5     图形界面</p></li><li><p>6     重启</p></li><li><p>修改默认系统运行级别   #cat /etc/inittab</p></li><li><p>查询系统运行级别  #runlevel</p></li></ul><h4 id="退出登录命令"><a href="#退出登录命令" class="headerlink" title="退出登录命令"></a>退出登录命令</h4><p># logout</p><h2 id="文本编辑器Vim"><a href="#文本编辑器Vim" class="headerlink" title="文本编辑器Vim"></a>文本编辑器Vim</h2><h3 id="Vim常用操作"><a href="#Vim常用操作" class="headerlink" title="Vim常用操作"></a>Vim常用操作</h3><h4 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h4><table><thead><tr><th align="center">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">a</td><td align="left">在光标所在字符后插入</td></tr><tr><td align="center">A</td><td align="left">在光标所在行尾插入</td></tr><tr><td align="center">i</td><td align="left">在光标所在字符前插入</td></tr><tr><td align="center">I</td><td align="left">在光标所在行行首插入</td></tr><tr><td align="center">o</td><td align="left">在光标下插入新行</td></tr><tr><td align="center">O</td><td align="left">在光标上插入新行</td></tr></tbody></table><h4 id="定位命令"><a href="#定位命令" class="headerlink" title="定位命令"></a>定位命令</h4><table><thead><tr><th align="center">命令</th><th>作用</th></tr></thead><tbody><tr><td align="center"><code>: set nu</code></td><td>设置行号</td></tr><tr><td align="center"><code>: set nonu</code></td><td>取消行号</td></tr><tr><td align="center"><code>gg</code></td><td>到第一行</td></tr><tr><td align="center"><code>G</code></td><td>到最后一行</td></tr><tr><td align="center"><code>nG</code></td><td>到第n行</td></tr><tr><td align="center"><code>n&lt;space&gt;</code></td><td>n表示数字, 按下数字而后按空格(不用同时, 先后顺序), 光标会右移n格.</td></tr><tr><td align="center"><code>n&lt;enter&gt;</code></td><td>n为数字, 输入数字再按回车, 光标向下移n行.</td></tr><tr><td align="center"><code>: n</code></td><td>到第n行</td></tr><tr><td align="center"><code>$</code></td><td>移至行尾</td></tr><tr><td align="center"><code>0</code></td><td>移至行首</td></tr><tr><td align="center"><code>Ctrl + f</code></td><td>屏幕向下翻动一页, 相当于<code>Page Down</code>按键</td></tr><tr><td align="center"><code>Ctrl + b</code></td><td>屏幕向上翻动一页, 相当于<code>Page Up</code>按键</td></tr></tbody></table><h4 id="删除复制和粘贴命令"><a href="#删除复制和粘贴命令" class="headerlink" title="删除复制和粘贴命令"></a>删除复制和粘贴命令</h4><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>x</code>/<code>X</code></td><td align="left">在当前刚标处进行删除操作. <code>x</code>为向后删除(删除光标所在字符), <code>X</code>为向前删除(删除光标所在前一个字符).</td></tr><tr><td align="left"><code>n</code> <code>x</code>/<code>X</code></td><td align="left"><code>n</code>为数字, 删除规则与上述一致, 不过删除数量为n</td></tr><tr><td align="left"><code>D</code></td><td align="left">删除光标所在处到行尾内容</td></tr><tr><td align="left"><code>:n1,n2d</code></td><td align="left">删除指定范围的行</td></tr><tr><td align="left"><code>dd</code></td><td align="left">删除/剪切光标所在整行.</td></tr><tr><td align="left"><code>ndd</code></td><td align="left">删除/剪切光标所在向下n行(包括光标所在行总共n行).</td></tr><tr><td align="left"><code>d1G</code></td><td align="left">删除光标所在到第一行所以数据.(包括光标行)</td></tr><tr><td align="left"><code>dG</code></td><td align="left">删除光标所在到最后一行所以数据.(包括光标行)</td></tr><tr><td align="left"><code>d$</code></td><td align="left">删除光标所在到该行最后一个字符(包括光标所在字符)</td></tr><tr><td align="left"><code>d0</code></td><td align="left">删除光标所在到该行第一个字符.(不包括光标所在)</td></tr><tr><td align="left"><code>yy</code></td><td align="left">复制光标所在行.</td></tr><tr><td align="left"><code>nyy</code></td><td align="left">复制光标所在向下n行. (包括该行)</td></tr><tr><td align="left"><code>y1G</code></td><td align="left">复制光标所在到第一行所以数据.(包括光标行)</td></tr><tr><td align="left"><code>yG</code></td><td align="left">复制光标所在到最后一行所以数据.(包括光标行)</td></tr><tr><td align="left"><code>y0</code></td><td align="left">复制光标所在到该行第一个字符.(不包括光标所在)</td></tr><tr><td align="left"><code>y$</code></td><td align="left">复制光标所在到该行最后一个字符(包括光标所在字符)</td></tr><tr><td align="left"><code>p</code>/<code>P</code></td><td align="left"><code>p</code>为将复制内容粘贴到光标所在的下一行. <code>P</code>为将复制内容粘贴到光标所在上一行.</td></tr><tr><td align="left"><code>J</code></td><td align="left">将光标所在行与下一行的数据结合成为一行.</td></tr><tr><td align="left"><code>u</code></td><td align="left">恢复前一个动作. 撤销.</td></tr><tr><td align="left"><code>Ctrl</code> + <code>r</code></td><td align="left">重复上一个动作.</td></tr><tr><td align="left"><code>.</code></td><td align="left">重复上一个动作.</td></tr><tr><td align="left"><code>:n1, n2 co n3</code></td><td align="left">将n1与n2行之间的内容复制到第n3行(之后).</td></tr><tr><td align="left"><code>:n1, n2 m n3</code></td><td align="left">将n1与n2行之间的内容剪切到第n3行(之后).</td></tr></tbody></table><h4 id="替换和取消命令"><a href="#替换和取消命令" class="headerlink" title="替换和取消命令"></a>替换和取消命令</h4><table><thead><tr><th align="center">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center"><code>r</code></td><td align="left">取代光标所在处字符</td></tr><tr><td align="center"><code>R</code></td><td align="left">从光标所在处开始替换字符,按Esc结束</td></tr><tr><td align="center"><code>u</code></td><td align="left">取消上一步操作</td></tr></tbody></table><h4 id="搜索和搜索替换命令"><a href="#搜索和搜索替换命令" class="headerlink" title="搜索和搜索替换命令"></a>搜索和搜索替换命令</h4><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>/word</code></td><td align="left">从光标所在之下搜索word字符串<br>搜索时忽略大小写 :set ic</td></tr><tr><td align="left"><code>?word</code></td><td align="left">从光标所在之上搜索word字符串</td></tr><tr><td align="left"><code>n</code></td><td align="left">重复前一个搜索动作. 对于<code>/word</code>即为向下查找匹配. <code>?word</code>为向上查找匹配.</td></tr><tr><td align="left"><code>N</code></td><td align="left">与<code>n</code>相反</td></tr><tr><td align="left"><code>:n1, n2s/word1/word2/g</code></td><td align="left">在n1到n2之间查找word1, 并将其替换为word2.</td></tr><tr><td align="left"><code>:1,$s/word1/word2/g</code></td><td align="left">在全文查找word1替换成word2</td></tr><tr><td align="left"><code>:1,$s/word1/word2/gc</code></td><td align="left">在全文查找word1替换成word2并在替换前向用户确定.</td></tr><tr><td align="left"><code>:s/world1/word2</code></td><td align="left">将光标所在行的第一个word1替换成word2</td></tr><tr><td align="left"><code>:s/word1/word2/g</code></td><td align="left">将光标所在整行的word1换成word2</td></tr></tbody></table><p>搜索后找到的字符串会被高亮显示, 恢复的方式为<code>:noh</code>即可.</p><h4 id="保存和退出命令"><a href="#保存和退出命令" class="headerlink" title="保存和退出命令"></a>保存和退出命令</h4><table><thead><tr><th align="center">命令</th><th>作用</th></tr></thead><tbody><tr><td align="center"><code>:w</code></td><td>保存修改</td></tr><tr><td align="center"><code>:w!</code></td><td>强制保存(是否真正能够保存取决于用户权限)</td></tr><tr><td align="center"><code>:w new_filename</code></td><td>另存为指定文件</td></tr><tr><td align="center"><code>:n1, n2, w filename</code></td><td>将n1到n2之间内容另存为</td></tr><tr><td align="center"><code>:r filename</code></td><td>打开文档将打开的文档内容添加到当前光标所在行后.</td></tr><tr><td align="center"><code>:wq</code></td><td>保存修改并退出</td></tr><tr><td align="center"><code>ZZ</code></td><td>快捷键,保存修改并退出</td></tr><tr><td align="center"><code>:q</code></td><td>退出</td></tr><tr><td align="center"><code>:q!</code></td><td>不保存修改退出</td></tr><tr><td align="center"><code>:wq</code></td><td>保存并退出</td></tr><tr><td align="center"><code>:wq!</code></td><td>保存并退出(文件所有者及root可使用)</td></tr><tr><td align="center"><code>:set nu</code></td><td>设置显示行号</td></tr><tr><td align="center"><code>:set nonu</code></td><td>设置取消行号</td></tr></tbody></table><h3 id="vim暂存机制"><a href="#vim暂存机制" class="headerlink" title="vim暂存机制"></a>vim暂存机制</h3><p>很多编辑软件都有恢复功能 ，即当系统因为某些原因而导致编辑中的文件突然退出．可以通过暂存的文件进行恢复．vim当然也存在这样一个机制．当我们使用vim打开一个文件时，在文件所在目录会自动创建一个.filename.swap文件．对原文件的操作会被记录在其中．当突然退出时，.filename.swap文件会帮我们存储下对文件的修改．当我们再次打开是可以选择是否通过该文件恢复对原文件的修改．</p><p>注意：当vim默认设置文件中存在如下字段时就不会有暂存机制．</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set noswapfile</span><br></pre></td></tr></table></figure><p>配置文件一般在<code>~/.vimrc</code>．</p><p>暂存机制主要适用于两种情况．</p><ol><li>在编辑文件过程中vim意外终止(在打开文件时.filename.swap文件已经被自动创建, 当正常退出时会自动删除).</li><li>多人编辑同一个文件.(在你之前有人已经打开了该文件正在编辑.)</li></ol><p>当存在暂存文件已经存在而你右对原文件进行操作而异常退出时会生成第二个暂存文件, 以此类推.</p><p>当暂存文件存在时打开文件就会提示响应的操作,解释如下:</p><table><thead><tr><th align="left"><code>[O]pen Read-Only</code></th><th align="left">只读模式打开.</th></tr></thead><tbody><tr><td align="left"><code>[E]dit anyway</code></td><td align="left">正常方式打开, 不载入暂存文件.</td></tr><tr><td align="left"><code>[R]ecover</code></td><td align="left">加载暂存文件. 不过不会自动删除, 完成后需要自己删除.</td></tr><tr><td align="left"><code>[Q]uit</code></td><td align="left">退出</td></tr><tr><td align="left"><code>[D]elete it</code></td><td align="left">不载入暂存文件直接将暂存文件删除</td></tr><tr><td align="left"><code>A(bout)</code></td><td align="left">类似与退出.</td></tr></tbody></table><p>在较新版本的vim中该功能似乎以及取消了(默认<code>set noswapfile</code>), 通过实验发现确实存在一些问题.所以尽量不要使用为好.</p><h3 id="vim高级操作"><a href="#vim高级操作" class="headerlink" title="vim高级操作"></a>vim高级操作</h3><h4 id="vim区块选择"><a href="#vim区块选择" class="headerlink" title="vim区块选择"></a>vim区块选择</h4><p>区块选择用来操作一个区域. 下面是区块选择键含义.</p><table><thead><tr><th align="left"><code>v</code></th><th align="left">进行区块选择, 按照进过字符选择. 即按<code>v</code>后,操作光标移动, 将会将移动范围内的内容反白标注选中.</th></tr></thead><tbody><tr><td align="left"><code>V</code></td><td align="left">与上面一个类似, 不过是按照行来选取.</td></tr><tr><td align="left"><code>Ctrl</code>+<code>v</code></td><td align="left">区块选则, 按照长方形区域选取.即按下<code>Ctrl</code>+<code>v</code>的位置为一个顶点,操纵光标选择第二个顶点. 选择这两个顶点之间的区域. 需要注意的是, 如果复制矩形区域进行粘贴操纵, 赞帖也是按照矩形区域进行的.</td></tr><tr><td align="left"><code>y</code></td><td align="left">复制选中区域</td></tr><tr><td align="left"><code>d</code></td><td align="left">复制选中区域</td></tr></tbody></table><p>区块选则在实际编程操作中使用是否有用. 区块选择后也可以进入编辑模式进行编辑, 例如将多行代码注释掉(或相反操作)只需要将对于的区块选择, 按<code>I</code>进入插入模式, 添加注释, 按<code>Esc</code>退出即可. 过程中按下<code>Esc</code>会过一会儿才出现, 别着急(一般第一行直接出现).</p><h4 id="多档案编辑"><a href="#多档案编辑" class="headerlink" title="多档案编辑"></a>多档案编辑</h4><p>我们可以一次打开多个文件进行一起操作. 实现分别打开无法完成的操作,如将一个文件的一部分复制到另一个文件中. 打开多文件方式为vim后面接多个文件名.</p><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim file1 file2</span><br></pre></td></tr></table></figure><p>多文档编辑操作:</p><table><thead><tr><th align="left"><code>:n</code></th><th align="left">编辑下一个文件</th></tr></thead><tbody><tr><td align="left"><code>:N</code></td><td align="left">编辑上一个文件</td></tr><tr><td align="left"><code>:files</code></td><td align="left">列出当前vim开启的所以文件.</td></tr></tbody></table><h4 id="多窗口编辑"><a href="#多窗口编辑" class="headerlink" title="多窗口编辑"></a>多窗口编辑</h4><p>上面的操作需要使用指令进行切换而且无法同时查看两个文件, 这对于编程时是十分不方便的, 要能够保存上面多文档的便捷和查看多文件的舒适多窗口才是王道.</p><p>多窗口操作:</p><table><thead><tr><th align="left"><code>:sp filename</code></th><th align="left">开启一个新的窗口, 如果参数filename则在新窗口打开对于文件,否则打开当前文件.</th></tr></thead><tbody><tr><td align="left"><code>[Ctrl]</code>+<code>w</code>+<code>j</code>/下箭头</td><td align="left">按键操作是先<code>[Ctrl]</code>+<code>w</code>, 而后松开按第三个键. 切换到下一个窗口中.</td></tr><tr><td align="left"><code>[Ctrl]</code>+<code>w</code>+<code>k</code>/上箭头</td><td align="left">切换到上一个窗口中.</td></tr><tr><td align="left"><code>[Ctrl]</code>+<code>w</code>+<code>q</code></td><td align="left">退出当前窗口. 可以按照这个操作,也可以直接在当前窗口<code>:q</code></td></tr></tbody></table><h4 id="操作目录"><a href="#操作目录" class="headerlink" title="操作目录"></a>操作目录</h4><table><thead><tr><th align="left"><code>:Ex</code></th><th align="left">在当前窗口开启目录浏览器.</th></tr></thead><tbody><tr><td align="left"><code>:Sex</code></td><td align="left">新打开一个窗口开启目录浏览器.</td></tr></tbody></table><h2 id="Linux软件安装"><a href="#Linux软件安装" class="headerlink" title="Linux软件安装"></a>Linux软件安装</h2><h3 id="编译安装方式"><a href="#编译安装方式" class="headerlink" title="编译安装方式"></a>编译安装方式</h3><p>(小贴士:使用编译安装前,需要先建立编译环境,使用以下命令建立基本的编译环境:<br>sudo apt-get install build-essential)<br>在 linux 的世界,有很多软件只提供了源代码给你,需要你自己进行编译安装,一般开源的软件都会使用 tar.gz 压缩档来进行发布,当然也有其他的形式。拿到源代码的压缩文档<br>把它解压到/tmp 目录下,进入/tmp/软件目录,然后执行以下三个命令:</p><p><strong>1）解压tar.gz包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.8.1.tar.gz -C /home/Desktop  # 将软件包名.tar.gz解压到指定的目录下</span><br></pre></td></tr></table></figure><p><strong>2）进入解压后的文件目录下</strong></p><p>   <strong>执行“./configure”命令为编译做好准备；</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx</span><br><span class="line">sudo ./configure --prefix=/opt/nginx  # 表示安装到/opt目录下</span><br></pre></td></tr></table></figure><p><strong>3）执行“make”命令进行软件编译；</strong></p><p><strong>4）执行“make install”完成安装；</strong></p><p><strong>5）执行“make clean”删除安装时产生的临时文件。</strong></p><p>在 ./configure 时可能会提示说有某某软件找不到,例如提示“ libgnome”这个开<br>发包找不到,那就把 libgnome 这个关键词 copy,然后打开新立得软件管理器,在里面<br>搜索 libgnome 这个关键词,就会找到 libgnome 相关的项目,把前面有个 ubuntu 符号的 libgnome 包(注意:同样需要安装 dev 包,但可以不装 doc 包)全部安装,通过这个方法把./configure 过程中缺失的开发包都全部装上就 OK 了,第一步能顺利通过,第二 ,三步基本问题不大。</p><p>源码包的卸载：不需要卸载命令,直接删除安装目录即可。不会遗留任何垃圾文件</p><p>以上就是一般初学 ubuntu 的朋友必须掌握的编译安装的基本方法!</p><h4 id="apt-get-安装方法"><a href="#apt-get-安装方法" class="headerlink" title="apt-get 安装方法"></a>apt-get 安装方法</h4><p>ubuntu 默认的软件管理系统是apt。apt有很多国内软件源，推荐使用淘宝。</p><p>apt-get 的基本软件安装命令是:</p><p><code>sudo apt-get install 软件名</code></p><h4 id="deb-包的安装方式"><a href="#deb-包的安装方式" class="headerlink" title="deb 包的安装方式"></a><strong>deb 包的安装方式</strong></h4><p>deb 是 debian 系 Linux 的包管理方式，ubuntu 是属于 debian 系的 Linux 发行版，所以默认支持这种软件安装方式。<br>当下载到一个 deb 格式的软件后,在终端输入这个命令就能安装：</p><p><code>sudo dpkg -i \**软件名\**.deb</code></p><h3 id="二进制编译或者脚本安装方式"><a href="#二进制编译或者脚本安装方式" class="headerlink" title="二进制编译或者脚本安装方式"></a>二进制编译或者脚本安装方式</h3><p>github上一般都会提供二进制源码或者脚本安装方式。<br>这类软件,你会在软件安装目录下发现类似后缀名的文件，如： .sh .py .run 等等,有的甚至连后缀名都没有,直接只有一个 INSTALL 文件。或者是一个其他什么的可执行文件。<br>对于这种软件,可尝试以下几种方式安装：</p><p><em>在软件目录下输入: ./软件名*</em> **或者 : sh 软件名.sh<br>或者: python 软件名.py**</p><h3 id="rpm-包的安装方式"><a href="#rpm-包的安装方式" class="headerlink" title="rpm 包的安装方式"></a>rpm 包的安装方式</h3><p>rpm 包是 deb 包外最常见的一种包管理方式,但 ubuntu 同样可以使用 rpm 的软件资源,首先我们需要安装一个 rpm 转 deb 的软件<br><code>sudo apt-get install alien</code><br>然后就可以对 rpm 格式的软件转换成 deb 格式了:<br><code>alien -d *.rpm</code><br>然后就可以用 deb 的安装方式进行软件安装<br>也可以不需转换而直接对 rpm 包进行安装:<br>alien -i *.rpm<br>更多的 alien 使用方法可以用-h 参数查看相应说明文档</p><h2 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h2><blockquote><p>用户管理简介</p></blockquote><ul><li>越是对服务器安全性要求高的服务器,越需要建立合理的用户权限等级制度和<br>服务器操作规范。</li><li>在Linux中主要是通过用户配置文件来查看和修改用户信息</li></ul><h3 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h3><h4 id="用户信息文件-etc-passwd"><a href="#用户信息文件-etc-passwd" class="headerlink" title="用户信息文件/etc/passwd"></a>用户信息文件/etc/passwd</h4><ul><li>第1字段:用户名称</li><li>第2字段:密码标志</li><li>第3字段:UID(用户ID)<ul><li>0:                     超级用户</li><li>1-499:             系统用户(伪用户)</li><li>500-65535:    普通用户 </li></ul></li><li>第4字段:GID(用户初始组ID)</li><li>第5字段:用户说明</li><li>第6字段:家目录<ul><li>普通用户:/home/用户名/</li><li>超级用户:/root/</li></ul></li><li>第7字段:登录之后的Shell</li></ul><h5 id="初始组和附加组"><a href="#初始组和附加组" class="headerlink" title="初始组和附加组"></a>初始组和附加组</h5><ul><li>初始组:就是指用户一登录就立刻拥有这个用户组的相关权限,每个用户的初始组<br>只能有一个,一般就是和这个用户的用户名相同的组名作为这个用户的初始组。</li><li>附加组:指用户可以加入多个其他的用户组,并拥有这些组的权限,附加组可以有<br>多个。</li></ul><h5 id="Shell是什么"><a href="#Shell是什么" class="headerlink" title="Shell是什么"></a>Shell是什么</h5><ul><li>Shell就是Linux的命令解释器。</li><li>在/etc/passwd当中,除了标准Shell是/bin/bash之外,还可以写如/sbin/nologin,<br>/usr/bin/passwd等。</li></ul><h4 id="影子文件-etc-shadow"><a href="#影子文件-etc-shadow" class="headerlink" title="影子文件/etc/shadow"></a>影子文件/etc/shadow</h4><ul><li>第1字段:用户名</li><li>第2字段:加密密码<ul><li>加密算法升级为SHA512散列加密算法</li><li>如果密码位是“!!”或“*”代表没有密码,不能登<br>录</li></ul></li><li>第3字段:密码最后一次修改日期<br>使用1970年1月1日作为标准时间,每过一天时间戳加1</li><li>第4字段:两次密码的修改间隔时间(和第3字段相比)</li><li>第5字段:密码有效期(和第3字段相比)</li><li>第6字段:密码修改到期前的警告天数(和第5字段相比)</li><li>第7字段:密码过期后的宽限天数(和第5字段相比)<ul><li>0:代表密码过期后立即失效</li><li>-1:则代表密码永远不会失效。</li></ul></li><li>第8字段:账号失效时间<ul><li>要用时间戳表示</li></ul></li><li>第9字段:保留</li></ul><h5 id="时间戳换算"><a href="#时间戳换算" class="headerlink" title="时间戳换算"></a>时间戳换算</h5><ul><li>把时间戳换算为日期<br>date -d “1970-01-01 16066 days”</li><li>把日期换算为时间戳<br>echo $(($(date –date=”2014/01/06” +%s)/86400+1))</li></ul><h4 id="组信息文件-etc-group和组密码文件-etc-gshadow"><a href="#组信息文件-etc-group和组密码文件-etc-gshadow" class="headerlink" title="组信息文件/etc/group和组密码文件/etc/gshadow"></a>组信息文件/etc/group和组密码文件/etc/gshadow</h4><h4 id="组信息文件-etc-group"><a href="#组信息文件-etc-group" class="headerlink" title="组信息文件/etc/group"></a>组信息文件/etc/group</h4><ul><li>第一字段:组名</li><li>第二字段:组密码标志</li><li>第三字段:GID</li><li>第四字段:组中附加用户</li></ul><h5 id="组密码文件-etc-gshadow"><a href="#组密码文件-etc-gshadow" class="headerlink" title="组密码文件/etc/gshadow"></a>组密码文件/etc/gshadow</h5><ul><li>第一字段:组名</li><li>第二字段:组密码</li><li>第三字段:组管理员用户名</li><li>第四字段:组中附加用户</li></ul><h3 id="用户管理相关文件"><a href="#用户管理相关文件" class="headerlink" title="用户管理相关文件"></a>用户管理相关文件</h3><h4 id="用户的家目录"><a href="#用户的家目录" class="headerlink" title="用户的家目录"></a>用户的家目录</h4><ul><li>普通用户：/home/用户名/,所有者和所属组都是此用户,权限是700</li><li>超级用户:/root/,所有者和所属组都是root用户,权限是550</li></ul><h4 id="用户的邮箱"><a href="#用户的邮箱" class="headerlink" title="用户的邮箱"></a>用户的邮箱</h4><ul><li>/var/spool/mail/用户名/</li></ul><h4 id="用户模板目录"><a href="#用户模板目录" class="headerlink" title="用户模板目录"></a>用户模板目录</h4><ul><li>/etc/skel/</li></ul><h3 id="用户管理命令-1"><a href="#用户管理命令-1" class="headerlink" title="用户管理命令"></a>用户管理命令</h3><h4 id="用户添加命令useradd"><a href="#用户添加命令useradd" class="headerlink" title="用户添加命令useradd"></a>用户添加命令useradd</h4><h5 id="useradd命令格式"><a href="#useradd命令格式" class="headerlink" title="useradd命令格式"></a>useradd命令格式</h5><p>[root@localhost ~]#useradd [选项] 用户名<br>选项:<br>-u UID:           手工指定用户的UID号<br>-d 家目录:      手工指定用户的家目录<br>-c 用户说明:   手工指定用户的说明<br>-g 组名:           手工指定用户的初始组<br>-G 组名:          指定用户的附加组<br>-s shell:          手工指定用户的登录shell。默认是/bin/bash</p><h5 id="添加默认用户"><a href="#添加默认用户" class="headerlink" title="添加默认用户"></a>添加默认用户</h5><p>[root@localhost ~]# useradd lamp<br>[root@localhost ~]# grep “lamp” /etc/passwd<br>[root@localhost ~]# grep “lamp” /etc/shadow<br>[root@localhost ~]# grep “lamp” /etc/group<br>[root@localhost ~]# grep “lamp” /etc/gshadow<br>[root@localhost ~]# ll -d /home/lamp/<br>[root@localhost ~]# ll /var/spool/mail/lamp</p><h5 id="指定选项添加用户"><a href="#指定选项添加用户" class="headerlink" title="指定选项添加用户"></a>指定选项添加用户</h5><ul><li>groupadd lamp1</li><li>useradd -u 550 -g lamp1 -G root -d /home/lamp1 <br>-c “test user” -s /bin/bash lamp1</li></ul><h5 id="用户默认值文件"><a href="#用户默认值文件" class="headerlink" title="用户默认值文件"></a>用户默认值文件</h5><ul><li><p>/etc/default/useradd</p><ul><li>GROUP=100           #用户默认组</li><li>HOME=/home        #用户家目录</li><li>NACTIVE=-1             #密码过期宽限天数( 7 )</li><li>EXPIRE=                    #密码失效时间( 8 )</li><li>SHELL=/bin/bash    # 默认 shell</li><li>SKEL=/etc/skel         #模板目录</li><li>CREATE_MAIL_SPOOL=yes   #是否建立邮箱</li></ul></li><li><p>/etc/login.defs</p><ul><li>PASS_MAX_DAYS  99999     # 密码有效期( 5 )</li><li>PASS_MIN_DAYS  0               # 密码修改间隔( 4 )</li><li>PASS_MIN_LEN  5                # 密码最小 5 位( PAM )</li><li>PASS_WARN_AGE  7            # 密码到期警告( 6 )</li><li>UID_MIN    500                     # 最小和最大 UID 范围<br>GID_MAX   60000</li><li>ENCRYPT_METHOD  SHA512   #加密模式</li></ul></li></ul><h4 id="修改用户密码passwd"><a href="#修改用户密码passwd" class="headerlink" title="修改用户密码passwd"></a>修改用户密码passwd</h4><h5 id="passwd命令格式"><a href="#passwd命令格式" class="headerlink" title="passwd命令格式"></a>passwd命令格式</h5><p>[root@localhost ~]#passwd [选项] 用户名<br>选项:<br>-S           查询用户密码的密码状态。仅root用户可用。<br>-l            暂时锁定用户。仅root用户可用<br>-u           解锁用户。仅root用户可用<br>–stdin   可以通过管道符输出的数据作为用户的密码。</p><h5 id="查看密码状态"><a href="#查看密码状态" class="headerlink" title="查看密码状态"></a>查看密码状态</h5><p>[root@localhost ~]# passwd -S lamp<br>lamp PS 2013-01-06 0 99999 7 -1</p><p>#用户名 密码设定时间( 2013-01-06 ) 密码修改间隔时间( 0 )</p><p>#密码有效期( 99999 ) 警告时间( 7 ) 密码不失效( -1 )</p><h5 id="锁定用户和解锁用户"><a href="#锁定用户和解锁用户" class="headerlink" title="锁定用户和解锁用户"></a>锁定用户和解锁用户</h5><p>[root@localhost ~]# passwd -l lamp<br>[root@localhost ~]# passwd -u lamp</p><h5 id="使用字符串作为用户的密码"><a href="#使用字符串作为用户的密码" class="headerlink" title="使用字符串作为用户的密码"></a>使用字符串作为用户的密码</h5><p>[root@localhost ~]# echo “123” | passwd –stdin lamp</p><h4 id="修改用户信息usermod和修改用户密码状态chage"><a href="#修改用户信息usermod和修改用户密码状态chage" class="headerlink" title="修改用户信息usermod和修改用户密码状态chage"></a>修改用户信息usermod和修改用户密码状态chage</h4><h5 id="修改用户信息usermod"><a href="#修改用户信息usermod" class="headerlink" title="修改用户信息usermod"></a>修改用户信息usermod</h5><p>[root@localhost ~]#usermod [选项] 用户名<br>选项:<br>-u UID:              修改用户的UID号<br>-c 用户说明:      修改用户的说明信息<br>-G 组名:             修改用户的附加组<br>-L:                       临时锁定用户(Lock)<br>-U:                      解锁用户锁定(Unlock)</p><ul><li><p>[root@localhost ~]# usermod -c “test user” lamp<br>修改用户的说明</p></li><li><p>[root@localhost ~]# usermod -G root lamp<br>把 lamp 用户加入 root 组</p></li><li><p>[root@localhost ~]# usermod -L lamp<br>锁定用户</p></li><li><p>[root@localhost ~]# usermod -U lamp<br>解锁用户</p></li></ul><h5 id="修改用户密码状态chage"><a href="#修改用户密码状态chage" class="headerlink" title="修改用户密码状态chage"></a>修改用户密码状态chage</h5><p>[root@localhost ~]#chage [选项] 用户名<br>选项:<br>-l:                     列出用户的详细密码状态<br>-d 日期:           修改密码最后一次更改日期(shadow3字段)<br>-m 天数:          两次密码修改间隔(4字段)<br>-M 天数:          密码有效期(5字段)<br>-W 天数:          密码过期前警告天数(6字段)<br>-I 天数:            密码过后宽限天数(7字段)<br>-E 日期:           账号失效时间(8字段)</p><ul><li>[root@localhost ~]# chage -d 0 lamp</li></ul><p>#这个命令其实是把密码修改日期归 0 了( shadow 第 3 字段)</p><p>#这样用户一登陆就要修改密码</p><h4 id="删除用户userdel和用户切换命令su"><a href="#删除用户userdel和用户切换命令su" class="headerlink" title="删除用户userdel和用户切换命令su"></a>删除用户userdel和用户切换命令su</h4><h5 id="删除用户userdel"><a href="#删除用户userdel" class="headerlink" title="删除用户userdel"></a>删除用户userdel</h5><p>[root@localhost ~]# userdel [-r] 用户名<br>选项:<br>       -r      删除用户的同时删除用户家目录</p><h5 id="手工删除用户"><a href="#手工删除用户" class="headerlink" title="手工删除用户"></a>手工删除用户</h5><p>[root@localhost ~]# vi /etc/passwd<br>[root@localhost ~]# vi /etc/shadow<br>[root@localhost ~]# vi /etc/group<br>[root@localhost ~]# vi /etc/gshadow<br>[root@localhost ~]# rm -rf /var/spool/mail/lamp<br>[root@localhost ~]# rm -rf /home/lamp/</p><h5 id="查看用户ID"><a href="#查看用户ID" class="headerlink" title="查看用户ID"></a>查看用户ID</h5><p>[root@localhost ~]# id 用户名</p><h5 id="切换用户身份su"><a href="#切换用户身份su" class="headerlink" title="切换用户身份su"></a>切换用户身份su</h5><p>[root@localhost ~]# su [选项] 用户名<br>选项:</p><p>​      -:                 选项只使用“-”代表连带用户的环境 变量一起切换<br>​      -c 命令:      仅执行一次命令,而不切换用户身份</p><ul><li>[lamp@localhost ~]$ su – root<br>切换成 root</li></ul><ul><li>[lamp@localhost ~]$ su - root -c “useradd user3”<br>不切换成 root ,但是执行 useradd 命令添加 user1 用户</li></ul><h3 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h3><h4 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h4><p>用法：groupmod [选项] 组</p><p>选项:<br>  -g, –gid GID                 将组 ID 改为 GID<br>  -h, –help                    显示此帮助信息并推出<br>  -n, –new-name NEW_GROUP      改名为 NEW_GROUP<br>  -o, –non-unique              允许使用重复的 GID<br>  -p, –password PASSWORD    将密码更改为(加密过的) PASSWORD<br>  -R, –root CHROOT_DIR         chroot 到的目录</p><h4 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h4><p>groupdel [用户组名]</p><h4 id="gpasswd"><a href="#gpasswd" class="headerlink" title="gpasswd"></a>gpasswd</h4><p>用法：gpasswd [选项] 组</p><p>选项：<br>  -a, –add USER                向组 GROUP 中添加用户 USER<br>  -d, –delete USER             从组 GROUP 中添加或删除用户<br>  -h, –help                    显示此帮助信息并推出<br>  -Q, –root CHROOT_DIR         要 chroot 进的目录<br>  -r, –remove-password         移除组 GROUP 的密码<br>  -R, –restrict                向其成员限制访问组 GROUP<br>  -M, –members USER,…        设置组 GROUP 的成员列表<br>  -A, –administrators ADMIN,…    设置组的管理员列表</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="ACL权限"><a href="#ACL权限" class="headerlink" title="ACL权限"></a>ACL权限</h3><h4 id="ACL权限简介与开启"><a href="#ACL权限简介与开启" class="headerlink" title="ACL权限简介与开启"></a>ACL权限简介与开启</h4><h5 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h5><p>根目录中有一个 /project 目录，这是班级的项目目录。班级中的每个学员都可以访问和修改这个目录，老师也需要对这个目录拥有访问和修改权限，其他班级的学员当然不能访问这个目录。需要怎么规划这个目录的权限呢？应该这样：老师使用 root 用户，作为这个目录的属主，权限为 rwx；班级所有的学员都加入 tgroup 组，使 tgroup 组作为 /project 目录的属组，权限是 rwx；其他人的权限设定为 0。这样这个目录的权限就可以符合我们的项目开发要求了。</p><p>有一天，班里来了一位试听的学员 st，她必须能够访问 /project 目录，所以必须对这个目录拥有 r 和 x 权限；但是她又没有学习过以前的课程，所以不能赋予她 w 权限，怕她改错了目录中的内容，所以学员 st 的权限就是 r-x。可是如何分配她的身份呢？变为属主？当然不行，要不 root 该放哪里？加入 tgroup 组？也不行，因为 tgroup 组的权限是 rwx，而我们要求学员 st 的权限是 r-x。如果把其他人的权限改为 r-x 呢？这样一来，其他班级的所有学员都可以访问 /project 目录了。</p><p>当出现这种情况时，普通权限中的三种身份就不够用了。ACL 权限就是为了解决这个问题的。在使用 ACL 权限给用户 st 陚予权限时，st 既不是 /project 目录的属主，也不是属组，仅仅赋予用户 st 针对此目录的 r-x 权限。这有些类似于 Windows 系统中分配权限的方式，单独指定用户并单独分配权限，这样就解决了用户身份不足的问题。</p><p>ACL是Access Control List（访问控制列表）的缩写，不过在Linux系统中，ACL用于设定用户针对文件的权限，而不是在交换路由器中用来控制数据访问的功能（类似于防火墙）</p><h5 id="开启："><a href="#开启：" class="headerlink" title="开启："></a>开启：</h5><ol><li><p>查看分区是否开启ACL权限<br>[root@hhh<del>]#df  -h  看一下根目录所在分区<br>[root@hhh</del>]#dumpe2fs -h [根目录所在分区]</p><p>​                       -h：仅显示超级块中的信息，而不显示磁盘块组的详细信息</p><p>查找：Default mount options 后面是否有ACL（一般分区都开启ACL）</p></li><li><p>如果没开启，则可以临时开启分区ACL权限<br>[root@hhh<del>]#mount -o remount ,acl 重新挂载根分区，并加入acl权限<br>或者：永久开启ACL权限<br>[root@hhh</del>]#vim /etc/fstab<br>查找到：UUID=c2ca6f57-b15c-43ea-bca0-f239083d8bd2 / ext4 default  1 1<br>在default后加上“，acl”<br>然后重新挂载文件系统#mount -o remount/ 或 重启动系统，使修改生效</p></li></ol><h4 id="查看与设定ACL权限"><a href="#查看与设定ACL权限" class="headerlink" title="查看与设定ACL权限"></a>查看与设定ACL权限</h4><h5 id="查看ACL命令"><a href="#查看ACL命令" class="headerlink" title="查看ACL命令"></a>查看ACL命令</h5><p><code>[root@localhost ~]# getfacle 文件名</code></p><p>#查看 acl 权限</p><h5 id="设定ACL权限的命令"><a href="#设定ACL权限的命令" class="headerlink" title="设定ACL权限的命令"></a>设定ACL权限的命令</h5><p><code>[root@localhost ~]# setfacl 选项 文件名</code><br>选项:<br>-m       设定ACL权限<br>            如果是给予用户 ACL 权限，则使用”u:用户名：权限”格式赋予<br>            如果是给予组 ACL 权限，则使用”g:组名：权限” 格式赋予；<br>-x         删除指定的ACL权限<br>-b         删除所有的ACL权限,只对目录生效，指目录中新建立的文件拥有此默认权限；<br>-d         设定默认ACL权限。<br>-k         删除默认ACL权限<br>-R        递归设定ACL权限。</p><h5 id="给用户和用户组设定ACL权限"><a href="#给用户和用户组设定ACL权限" class="headerlink" title="给用户和用户组设定ACL权限"></a>给用户和用户组设定ACL权限</h5><p>我们要求 root 是 /project 目录的属主，权限是 rwx；tgroup 是此目录的属组，tgroup 组中拥有班级学员 zhangsan 和 lisi，权限是 rwx；其他人的权限是 0。这时，试听学员 st 来了，她的权限是 r-x。我们来看具体的分配命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd zhangsan</span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd lisi</span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd st</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd tgroup</span></span><br><span class="line"><span class="comment">#添加需要试验的用户和用户组，省略设定密码的过程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /project #建立需要分配权限的目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown root:tgroup /project/</span></span><br><span class="line"><span class="comment">#改变/project目录的属主和属组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 770 /project/</span></span><br><span class="line"><span class="comment">#指定/project目录的权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll -d /project/</span></span><br><span class="line">drwxrwx--- 2 root tgroup 4096 1月19 04:21 /project/</span><br><span class="line"><span class="comment">#查看一下权限，已经符合要求了</span></span><br><span class="line"><span class="comment">#这时st学员来试听了，如何给她分配权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -m u:st:rx /project/</span></span><br><span class="line"><span class="comment">#给用户st赋予r-x权限，使用"u:用户名：权限" 格式</span></span><br><span class="line">[root@localhost /]<span class="comment"># cd /</span></span><br><span class="line">[root@localhost /]<span class="comment"># ll -d project/</span></span><br><span class="line">drwxrwx---+ 3 root tgroup 4096 1月19 05:20 project/</span><br><span class="line"><span class="comment">#使用ls-l査询时会发现，在权限位后面多了一个"+"，表示此目录拥有ACL权限</span></span><br><span class="line">[root@localhost /]<span class="comment"># getfacl project</span></span><br><span class="line"><span class="comment">#查看/prpject目录的ACL权限</span></span><br><span class="line"><span class="comment">#file: project &lt;-文件名</span></span><br><span class="line"><span class="comment">#owner: root &lt;-文件的属主</span></span><br><span class="line"><span class="comment">#group: tgroup &lt;-文件的属组</span></span><br><span class="line">user::rwx &lt;-用户名栏是空的，说明是属主的权限</span><br><span class="line">user:st:r-x &lt;-用户st的权限</span><br><span class="line">group::rwx &lt;-组名栏是空的，说明是属组的权限</span><br><span class="line">mask::rwx &lt;-mask权限</span><br><span class="line">other::--- &lt;-其他人的权限</span><br></pre></td></tr></table></figure><p>大家可以看到，st 用户既不是 /prpject 目录的属主、属组，也不是其他人，我们单独给 st 用户分配了 r-x 权限。这样分配权限太方便了，完全不用先辛苦地规划用户身份了。</p><p>我想给用户组赋予 ACL 权限可以吗？当然可以，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># groupadd tgroup2</span></span><br><span class="line"><span class="comment">#添加测试组</span></span><br><span class="line">[root@localhost /]<span class="comment"># setfacl -m g:tgroup2:rwx project/</span></span><br><span class="line"><span class="comment">#为组tgroup2纷配ACL权限，使用"g:组名:权限"格式</span></span><br><span class="line">[root@localhost /]<span class="comment"># ll -d project/</span></span><br><span class="line">drwxrwx---+ 2 root tgroup 4096 1月19 04:21 project/</span><br><span class="line"><span class="comment">#属组并没有更改</span></span><br><span class="line">[root@localhost /]<span class="comment"># getfacl project/</span></span><br><span class="line"><span class="comment">#file: project/</span></span><br><span class="line"><span class="comment">#owner: root</span></span><br><span class="line"><span class="comment">#group: tgroup</span></span><br><span class="line">user::rwx</span><br><span class="line">user:st:r-x</span><br><span class="line">group::rwx</span><br><span class="line">group:tgroup2:rwx &lt;-用户组tgroup2拥有了rwx权限</span><br><span class="line">mask::rwx</span><br><span class="line">other::--</span><br></pre></td></tr></table></figure><h4 id="最大有效权限与删除ACL权限"><a href="#最大有效权限与删除ACL权限" class="headerlink" title="最大有效权限与删除ACL权限"></a>最大有效权限与删除ACL权限</h4><h5 id="最大有效权限mask"><a href="#最大有效权限mask" class="headerlink" title="最大有效权限mask"></a>最大有效权限mask</h5><p>mask 是用来指定最大有效权限的。mask 的默认权限是 rwx，如果我给 st 用户赋予了 r-x 的 ACL 权限，是需要和 mask 的 rwx 权限”相与”才能得到 st 的真正权限，也就是 r-x “相与”rwx 出的值是 r-x，所以 st 用户拥有 r-x 权限。</p><p>如果把 mask 的权限改为 r–，和 st 用户的权限相与，也就是 r–”相与”r-x 得出的值是 r–，st 用户的权限就会变为只读。大家可以这么理解：用户和用户组所设定的权限必须在 mask 权限设定的范围之内才能生效，mask权限就是最大有效权限。</p><p>不过我们一般不更改 mask 权限，只要给予 mask 最大权限 rwx，那么任何权限和 mask 权限相与，得出的值都是权限本身。也就是说，我们通过给用户和用户组直接赋予权限，就可以生效，这样做更直观。</p><p>修改最大有效权限的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># setfacl -m m:rx project/</span></span><br><span class="line"><span class="comment">#设定mask权限为r-x，使用"m:权限"格式</span></span><br><span class="line">[root@localhost /]<span class="comment"># getfacl project/</span></span><br><span class="line"><span class="comment">#file：project/</span></span><br><span class="line"><span class="comment">#owner：root</span></span><br><span class="line"><span class="comment">#group：tgroup</span></span><br><span class="line">user::rwx</span><br><span class="line">group::rwx <span class="comment">#effective:r-x</span></span><br><span class="line">mask::r-x</span><br><span class="line"><span class="comment">#mask权限变为r-x</span></span><br><span class="line">other::--</span><br></pre></td></tr></table></figure><h5 id="删除ACL权限"><a href="#删除ACL权限" class="headerlink" title="删除ACL权限"></a>删除ACL权限</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># setfacl -x u:用户名 文件名</span></span><br><span class="line"><span class="comment"># 删除指定用户的 ACL 权限</span></span><br><span class="line">[root@localhost /]<span class="comment"># setfacl -x g:组名 文件名</span></span><br><span class="line"><span class="comment"># 删除指定用户组的 ACL 权限</span></span><br><span class="line">[root@localhost /]<span class="comment"># setfacl -b 文件名</span></span><br><span class="line"><span class="comment"># 会删除文件的所有的 ACL 权限</span></span><br></pre></td></tr></table></figure><h4 id="默认ACL权限和递归ACL权限"><a href="#默认ACL权限和递归ACL权限" class="headerlink" title="默认ACL权限和递归ACL权限"></a>默认ACL权限和递归ACL权限</h4><h5 id="默认ACL权限"><a href="#默认ACL权限" class="headerlink" title="默认ACL权限"></a>默认ACL权限</h5><p>我们已经给 /project 目录设定了 ACL 权限，那么，在这个目录中新建一些子文件和子目录，这些文件是否会继承父目录的 ACL 权限呢？我们试试吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># cd /project/</span></span><br><span class="line">[root@localhost prq<span class="string">'ect]# touch abc</span></span><br><span class="line"><span class="string">[root@localhost prq'</span>ect]<span class="comment"># mkdir d1</span></span><br><span class="line"><span class="comment">#在/project目录中新建了abc文件和d1目录</span></span><br><span class="line">[root@localhost project]<span class="comment">#ll</span></span><br><span class="line">总用量4</span><br><span class="line">-rw-r--r-- 1 root root 01月19 05:20 abc</span><br><span class="line">drwxr-xr-x 2 root root 4096 1月19 05:20 d1</span><br><span class="line"><span class="comment">#这两个新建立的文件权限位后面并没有"+"，表示它们没有继承ACL权限</span></span><br></pre></td></tr></table></figure><p>子文件 abc 和子目录 d1 因为是后建立的，所以并没有继承父目录的 ACL 权限。当然，我们可以手工给这两个文件分配 ACL 权限，但是如果在目录中再新建文件，都要手工指定，则显得过于麻烦。这时就需要用到默认 ACL 权限。</p><p><font color="#0099ff" face="宋体">默认 ACL 权限的作用是：如果给父目录设定了默认 ACL 权限，那么父目录中所有新建的子文件都会继承父目录的 ACL 权限。默认 ACL 权限只对目录生效。</font></p><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># setfacl -m d:u:st:rx /project/</span></span><br><span class="line"><span class="comment">#使用"d:u:用户名：权限"格式设定默认ACL权限</span></span><br><span class="line">[root@localhost project]<span class="comment"># getfacl project/</span></span><br><span class="line"><span class="comment"># file: project/</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: tgroup</span></span><br><span class="line">user:: rwx</span><br><span class="line">user:st:r-x</span><br><span class="line">group::rwx</span><br><span class="line">group:tgroup2:rwx</span><br><span class="line">mask::rwx</span><br><span class="line">other::--</span><br><span class="line">default:user::rwx &lt;-多出了default字段</span><br><span class="line">default:user:st:r-x</span><br><span class="line">default:group::rwx</span><br><span class="line">default:mask::rwx</span><br><span class="line">default:other::--</span><br><span class="line">[root@localhost /]<span class="comment"># cd project/</span></span><br><span class="line">[root@localhost project]<span class="comment"># touch bcd</span></span><br><span class="line">[root@localhost project]<span class="comment"># mkdir d2</span></span><br><span class="line"><span class="comment">#新建子文件和子目录</span></span><br><span class="line">[root@localhost project]<span class="comment"># ll 总用量8</span></span><br><span class="line">-rw-r--r-- 1 root root 01月19 05:20 abc</span><br><span class="line">-rw-rw----+ 1 root root 01月19 05:33 bcd</span><br><span class="line">drwxr-xr-x 2 root root 4096 1月19 05:20 d1</span><br><span class="line">drwxrwx---+ 2 root root 4096 1月19 05:33 d2</span><br><span class="line"><span class="comment">#新建的bcd和d2已经继承了父目录的ACL权限</span></span><br></pre></td></tr></table></figure><p>原先的 abc 和 d1 还是没有 ACL 权限，因为默认 ACL 权限是针对新建立的文件生效的。</p><h5 id="递归-ACL-权限"><a href="#递归-ACL-权限" class="headerlink" title="递归 ACL 权限"></a>递归 ACL 权限</h5><p>递归是指父目录在设定 ACL 权限时，所有的子文件和子目录也会拥有相同的 ACL 权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost project]<span class="comment"># setfacl -m u:st:rx -R/project/</span></span><br><span class="line"><span class="comment">#-R递归</span></span><br><span class="line">[root@localhost project]<span class="comment"># ll</span></span><br><span class="line">总用量8</span><br><span class="line">-rw-r-xr--+ 1 root root 01月19 05:20 abc</span><br><span class="line">-rw-rwx--+ 1 root root 01月19 05:33 bcd</span><br><span class="line">drwxr-xr-x+ 2 root root 4096 1月19 05:20 d1</span><br><span class="line">drwxrwx--+ 2 root root 4096 1月19 05:33 d2</span><br><span class="line"><span class="comment">#abc和d1也拥有了ACL权限</span></span><br></pre></td></tr></table></figure><p>总结一下：</p><ul><li>默认 ACL 权限指的是针对父目录中新建立的文件和目录会继承父目录的 ACL 权限，格式是<code>setfacl-m d:u:用户名：权限 文件名</code>；</li><li>递归 ACL 权限指的是针对父目录中已经存在的所有子文件和子目录继承父目录的 ACL 权限，格式是<code>setfacl-m u:用户名： 权限 -R 文件名</code>。</li></ul><h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><h4 id="SetUID"><a href="#SetUID" class="headerlink" title="SetUID"></a>SetUID</h4><h5 id="SetUID的功能"><a href="#SetUID的功能" class="headerlink" title="SetUID的功能"></a>SetUID的功能</h5><ul><li><p>只有可以执行的二进制程序才能设定SUID权限</p></li><li><p>命令执行者要对该程序拥有x(执行)权限</p></li><li><p>命令执行者在执行该程序时获得该程序文件属主的身份(在执行程序的过程中灵魂附体为文件的属主)</p></li><li><p>SetUID权限只在该程序执行过程中有效,也就是说身份改变只在程序执行过程中有效</p></li><li><p>passwd命令拥有SetUID权限,所以普通可以修改自己的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@finyorke:/home/finyorko<span class="comment"># ll /usr/bin/passwd</span></span><br><span class="line">-rwsr-xr-x 1 root root 54256 3月  27  2019 /usr/bin/passwd*</span><br></pre></td></tr></table></figure></li><li><p>cat命令没有SetUID权限,所以普通用户不能查看/etc/shadow文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@finyorke:/home/finyorko<span class="comment"># ll /bin/cat</span></span><br><span class="line">-rwxr-xr-x 1 root root 52080 3月   3  2017 /bin/cat*</span><br></pre></td></tr></table></figure></li></ul><h5 id="设定SetUID的方法"><a href="#设定SetUID的方法" class="headerlink" title="设定SetUID的方法"></a>设定SetUID的方法</h5><ul><li>4代表SUID<ul><li>chmod 4755 文件名</li><li>chmod u+s 文件名</li></ul></li></ul><h5 id="取消SetUID的方法"><a href="#取消SetUID的方法" class="headerlink" title="取消SetUID的方法"></a>取消SetUID的方法</h5><ul><li>chmod 755 文件名</li><li>chmod u-s 文件名</li></ul><h5 id="危险的SetUID"><a href="#危险的SetUID" class="headerlink" title="危险的SetUID"></a>危险的SetUID</h5><ul><li>关键目录应严格控制写权限。比如“/”、“/usr”等</li><li>用户的密码设置要严格遵守密码三原则</li><li>对系统中默认应该具有SetUID权限的文件作一列表,定时检查有没有这之外的文件被设置了SetUID权限</li></ul><h4 id="SetGID"><a href="#SetGID" class="headerlink" title="SetGID"></a>SetGID</h4><h5 id="SetGID针对文件的作用"><a href="#SetGID针对文件的作用" class="headerlink" title="SetGID针对文件的作用"></a>SetGID针对文件的作用</h5><ul><li><p>只有可执行的二进制程序才能设置SGID权限</p></li><li><p>命令执行者要对该程序拥有x(执行)权限</p></li><li><p>命令执行在执行程序的时候,组身份升级为该程序文件的属组</p></li><li><p>SetGID权限同样只在该程序执行过程中有效,也就是说组身份改变只在程序执行过程中有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@finyorke:/home/finyorko<span class="comment"># ll /usr/bin/locate</span></span><br><span class="line">lrwxrwxrwx 1 root root 24 4月  16  2019 /usr/bin/locate -&gt; /etc/alternatives/locate*</span><br><span class="line">root@finyorke:/home/finyorko<span class="comment"># ll /var/lib/mlocate/mlocate.db</span></span><br><span class="line">-rw-r----- 1 root mlocate 17479196 12月  3 07:17 /var/lib/mlocate/mlocate.db</span><br></pre></td></tr></table></figure></li><li><p><strong>/usr/bin/locate</strong>是可执行二进制程序,可以赋予SGID</p></li><li><p>执行用户lamp对<strong>/usr/bin/locate</strong>命令拥有执行权限</p></li><li><p>执行<strong>/usr/bin/locate</strong>命令时,组身份会升级为slocate组,而slocate组对<strong>/var/lib/mlocate/mlocate.db</strong>数据库拥有r权限,所以普通用户可以使用locate命令查询mlocate.db数据库</p></li><li><p>命令结束,lamp用户的组身份返回为lamp组</p></li></ul><h5 id="SetGID针对目录的作用"><a href="#SetGID针对目录的作用" class="headerlink" title="SetGID针对目录的作用"></a>SetGID针对目录的作用</h5><ul><li>普通用户必须对此目录拥有r和x权限,才能进入此目录</li><li>普通用户在此目录中的有效组会变成此目录的属组</li><li>若普通用户对此目录拥有w权限时,新建的文件的默认属组是这个目录的属组</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /tmp/</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># mkdir dtest</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># chmod g+s dtest</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># ll -d dtest/</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># chmod 777 dtest/</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># su – lamp</span></span><br><span class="line">[lamp@localhost ~]$ <span class="built_in">cd</span> /tmp/dtest/</span><br><span class="line">[lamp@localhost dtest]$ touch abc</span><br><span class="line">[lamp@localhost dtest]$ ll</span><br></pre></td></tr></table></figure><h5 id="设定SetGID"><a href="#设定SetGID" class="headerlink" title="设定SetGID"></a>设定SetGID</h5><ul><li>2代表SGID<ul><li>chmod 2755 文件名</li><li>chmod g+s 文件名</li></ul></li></ul><h5 id="取消SetGID"><a href="#取消SetGID" class="headerlink" title="取消SetGID"></a>取消SetGID</h5><ul><li>chmod 755 文件名</li><li>chmod g-s 文件名</li></ul><h4 id="Sticky-BIT"><a href="#Sticky-BIT" class="headerlink" title="Sticky BIT"></a>Sticky BIT</h4><h5 id="SBIT粘着位作用"><a href="#SBIT粘着位作用" class="headerlink" title="SBIT粘着位作用"></a>SBIT粘着位作用</h5><ul><li><p>粘着位目前只对目录有效</p></li><li><p>普通用户对该目录拥有w和x权限,即普通用户可以在此目录拥有写入权限</p></li><li><p>如果没有粘着位,因为普通用户拥有w权限,所以可以删除此目录下所有文件,包括其他用户建立的文件。一但赋予了粘着位,除了root可以删除所有文件,普通用户就算拥有w权限,也只能删除自己建立的文件,但是不能删除其他用户建立的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@finyorke:/home/finyorko<span class="comment"># ll -d /tmp/</span></span><br><span class="line">drwxrwxrwt 27 root root 4096 12月  3 20:18 /tmp//</span><br></pre></td></tr></table></figure></li></ul><h5 id="设置与取消粘着位"><a href="#设置与取消粘着位" class="headerlink" title="设置与取消粘着位"></a>设置与取消粘着位</h5><ul><li>设置粘着位<ul><li>chmod 1755 目 录名</li><li>chmod o+t 目录名</li></ul></li><li>取消粘着位<ul><li>chmod 777 目录名</li><li>chmod o-t 目录名</li></ul></li></ul><h3 id="文件系统属性chattr权限"><a href="#文件系统属性chattr权限" class="headerlink" title="文件系统属性chattr权限"></a>文件系统属性chattr权限</h3><h4 id="chattr命令格式"><a href="#chattr命令格式" class="headerlink" title="chattr命令格式"></a>chattr命令格式</h4><p>[root@localhost ~]# chattr [+-=] [选项] 文件或目录名<br>                                   +: 增加权限<br>                                   -: 删除权限<br>                                   =: 等于某权限</p><ul><li>选项<ul><li>i:如果对文件设置i属性,那么不允许对文件进行删除、改名,也不能添加和修改数据;如果对目录设置i属性,那么只能修改目录下文件的数据,但不允许建立和删除文件。</li><li>a:如果对文件设置a属性,那么只能在文件中增加数据,但是不能删除也不能修改数据;如果对目录设置a属性,那么只允许在目录中建立和修改文件,但是不允许删除</li></ul></li></ul><h4 id="查看文件系统属性"><a href="#查看文件系统属性" class="headerlink" title="查看文件系统属性"></a>查看文件系统属性</h4><p>[root@localhost ~]# lsattr 选项 文件名</p><p>选项:</p><ul><li>-a 显示所有文件和目录</li><li>-d 若目标是目录,仅列出目录本身的属性,而不是子文件的</li></ul><h3 id="系统命令sudo权限"><a href="#系统命令sudo权限" class="headerlink" title="系统命令sudo权限"></a>系统命令sudo权限</h3><h4 id="sudo权限"><a href="#sudo权限" class="headerlink" title="sudo权限"></a>sudo权限</h4><ul><li>root把本来只能超级用户执行的命令赋予普通用户执行。</li><li>sudo的操作对象是系统命令</li></ul><h4 id="sudo使用"><a href="#sudo使用" class="headerlink" title="sudo使用"></a>sudo使用</h4><p>[root@localhost ~]# visudo</p><p>#实际修改的是 /etc/sudoers 文件</p><p>root ALL=(ALL)   ALL</p><p>#用户名   被管理主机的地址 = (可使用的身份)    授权命令(绝对路径)</p><p>#%wheel    ALL=(ALL)     ALL</p><p>#% 组名   被管理主机的地址 = (可使用的身份)    授权命令(绝对路径)</p><p>授权sc用户可以重启服务器<br>[root@localhost ~]# visudo<br>sc<br>ALL= /sbin/shutdown –r now</p><h4 id="授权sc用户可以重启服务器"><a href="#授权sc用户可以重启服务器" class="headerlink" title="授权sc用户可以重启服务器"></a>授权sc用户可以重启服务器</h4><p>[root@localhost ~]# visudo<br>sc   ALL= /sbin/shutdown –r now</p><h4 id="普通用户执行sudo赋予的命令"><a href="#普通用户执行sudo赋予的命令" class="headerlink" title="普通用户执行sudo赋予的命令"></a>普通用户执行sudo赋予的命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># su – sc</span></span><br><span class="line">[sc@localhost ~]$ sudo -l</span><br><span class="line"><span class="comment"># 查看可用的 sudo 命令</span></span><br><span class="line">[lamp@localhost ~]$ sudo /sbin/shutdown -r now</span><br><span class="line"><span class="comment"># 普通用户执行 sudo 赋予的命令</span></span><br></pre></td></tr></table></figure><h2 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h2><h3 id="回顾分区和文件系统"><a href="#回顾分区和文件系统" class="headerlink" title="回顾分区和文件系统"></a>回顾分区和文件系统</h3><h4 id="分区类型"><a href="#分区类型" class="headerlink" title="分区类型"></a>分区类型</h4><ul><li>主分区:总共最多只能分四个</li><li>扩展分区:只能有一个,也算作主分区的一种,也就是说主分区加扩展分区最多有四个。但是扩展分区不能存储数据和格式化,必须再划分成逻辑分区才能使用。</li><li>逻辑分区:逻辑分区是在扩展分区中划分的,如果是IDE硬盘,Linux最多支持59个逻辑分区,如果是SCSI硬盘Linux最多支持11个逻辑分区</li></ul><p>问题：第2块SCSI硬盘的第3个逻辑分区，Linux如何表示？</p><p>答：</p><p>​        硬盘表示的规律：磁盘设备存放于/dev/文件夹下；对于IDE接口的磁盘，按照顺序分别表示为/dev/hda、/dev/hdb、/dev/hdc、/dev/hdd；对于SCSI接口的磁盘，按照顺序分别表示为/dev/sda、/dev/sdb、/dev/sdc、/dev/sdd、……。</p><p>​        MBR传统分区模式的特点：主分区最多只能有四个（其中一个可作为扩展分区），其分区编号对应1-4；扩展分区最多只能有一个，也可以没有，扩展分区需要占用主分区编号，不能被格式化用来存放文档；逻辑分区只能从扩展分区范围内再次划分，其分区编号始终从5开始。</p><p>​        综上所述，第2块SCSI硬盘的第3个逻辑分区，其设备文件应该位于/dev/sdb7。</p><h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><ul><li>ext2:是ext文件系统的升级版本,Red Hat Linux7.2版本以前的系统默认都是ext2文件系统。1993年发布,最大支持16TB的分区和最大2TB的文件(1TB=1024GB=1024*1024KB)</li><li>ext3: ext3文件系统是ext2文件系统的升级版本,最大的区别就是带日志功能,以在系统突然停止时提高文件系统的可靠性。支持最大16TB的分区和最大2TB的文件</li><li>ext4:它是ext3文件系统的升级版。ext4 在性能 、伸缩性和可靠性方面进行了大量改进。EXT4 的变化可以说是翻天覆地的,比如向下兼容 EXT3、最大1EB文件系统和16TB文件、无限数 量子目录、Extents连续数据块概念、多块分配 、延迟分配、持久预分配、快速FSCK、日志校 验、无日志模式、在线碎片整理、inode增强、 默认启用barrier等。是CentOS 6.3的默认文件系 统 (1EB=1024PB=1024*1024TB)</li></ul><h3 id="文件系统常用命令"><a href="#文件系统常用命令" class="headerlink" title="文件系统常用命令"></a>文件系统常用命令</h3><h4 id="df命令、du命令、fsck命令和dump2fs命令"><a href="#df命令、du命令、fsck命令和dump2fs命令" class="headerlink" title="df命令、du命令、fsck命令和dump2fs命令"></a>df命令、du命令、fsck命令和dump2fs命令</h4><h5 id="文件系统查看命令df"><a href="#文件系统查看命令df" class="headerlink" title="文件系统查看命令df"></a>文件系统查看命令df</h5><p>[root@localhost ~]# df [选项] [挂载点]</p><p>选项:<br>-a 显示所有的文件系统信息,包括特殊文件系统,如 /proc、/sysfs<br>-h 使用习惯单位显示容量,如KB,MB或GB等<br>-T 显示文件系统类型<br>-m 以MB为单位显示容量<br>-k 以KB为单位显示容量。默认就是以KB为单位</p><h5 id="统计目录或文件大小"><a href="#统计目录或文件大小" class="headerlink" title="统计目录或文件大小"></a>统计目录或文件大小</h5><p>[root@localhost ~]# du [选项] [目录或文件名]<br>选项:<br>-a 显示每个子文件的磁盘占用量。默认只统计子目录的磁盘占用量<br>-h 使用习惯单位显示磁盘占用量,如KB,MB或GB等<br>-s 统计总占用量,而不列出子目录和子文件的占用量</p><h5 id="du命令和df命令的区别"><a href="#du命令和df命令的区别" class="headerlink" title="du命令和df命令的区别"></a>du命令和df命令的区别</h5><ul><li>df命令是从文件系统考虑的,不光要考虑 文件占用的空间,还要统计被命令或程序 占用的空间(最常见的就是文件已经删除 ,但是程序并没有释放空间) </li><li>du命令是面向文件的,只会计算文件或目录占用的空间</li></ul><h5 id="文件系统修复命令fsck"><a href="#文件系统修复命令fsck" class="headerlink" title="文件系统修复命令fsck"></a>文件系统修复命令fsck</h5><p>[root@localhost ~]# fsck [选项] 分区设备文件名<br>选项:<br>-a: 不用显示用户提示,自动修复文件系统<br>-y: 自动修复。和-a作用一致,不过有些文件系统只支持-y</p><h5 id="显示磁盘状态命令dumpe2fs"><a href="#显示磁盘状态命令dumpe2fs" class="headerlink" title="显示磁盘状态命令dumpe2fs"></a>显示磁盘状态命令dumpe2fs</h5><p>[root@localhost ~]# dumpe2fs 分区设备文件名</p><h4 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h4><h5 id="查询与自动挂载"><a href="#查询与自动挂载" class="headerlink" title="查询与自动挂载"></a>查询与自动挂载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mount [-l]</span></span><br><span class="line"><span class="comment">#查询系统中已经挂载的设备, -l 会显示卷标名称</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount –a</span></span><br><span class="line"><span class="comment">#依据配置文件 /etc/fstab 的内容,自动挂载</span></span><br></pre></td></tr></table></figure><h5 id="挂载命令格式"><a href="#挂载命令格式" class="headerlink" title="挂载命令格式"></a>挂载命令格式</h5><p>[root@localhost ~]# mount [-t 文件系统] [-L 卷标名] <br>[-o 特殊选项] 设备文件名 挂载点<br>选项:<br>-t 文件系统:加入文件系统类型来指定挂载的类型,可以ext3、ext4、iso9660等文件系统<br>-L 卷标名:挂载指定卷标的分区,而不是安装设备文件名挂载<br>-o 特殊选项:可以指定挂载的额外选项</p><p>参数 说明 </p><ul><li>atime/noatime 更新访问时间/不更新访问时间。访问分区文件时,是否更新文件 的访问时间,默认为更新 </li><li>async/sync 异步/同步,默认为异步</li><li>auto/noauto  自动/手动,mount –a命令执行时,是否会自动安装/etc/fstab文件 内容挂载,默认为自动 </li><li>defaults 定义默认值,相当于rw,suid,dev,exec,auto,nouser,async这七个选项</li><li>exec/noexec  执行/不执行,设定是否允许在文件系统中执行可执行文件,默认是exec允许</li><li>remount 重新挂载已经挂载的文件系统,一般用于指定修改特殊权限 </li><li>rw/ro   读写/只读,文件系统挂载时,是否具有读写权限,默认是rw </li><li>suid/nosuid   具有/不具有SUID权限,设定文件系统是否具有SUID和SGID的权 限,默认是具有 </li><li>user/nouser 允许/不允许普通用户挂载,设定文件系统是否允许普通用户挂载, 默认是不允许,只有root可以挂载分区 </li><li>usrquota 写入代表文件系统支持用户磁盘配额,默认不支持 </li><li>grpquota  写入代表文件系统支持组磁盘配额,默认不支持</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mount -o remount,noexec /home</span></span><br><span class="line"><span class="comment"># 重新挂载 /boot 分区,并使用 noexec 权限</span></span><br><span class="line">[root@localhost sh]<span class="comment"># cd /home</span></span><br><span class="line">[root@localhost boot]<span class="comment"># vi hello.sh</span></span><br><span class="line">[root@localhost boot]<span class="comment"># chmod 755 hello.sh</span></span><br><span class="line">[root@localhost boot]<span class="comment"># ./hello.sh</span></span><br><span class="line">[root@localhost boot]<span class="comment"># mount -o remount,exec /home</span></span><br><span class="line"><span class="comment"># 记得改回来啊,要不会影响系统启动的</span></span><br></pre></td></tr></table></figure><h4 id="挂载光盘与U盘"><a href="#挂载光盘与U盘" class="headerlink" title="挂载光盘与U盘"></a>挂载光盘与U盘</h4><h5 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /mnt/cdrom/</span></span><br><span class="line"><span class="comment"># 建立挂载点</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount -t iso9660 /dev/cdrom /mnt/cdrom/</span></span><br><span class="line"><span class="comment"># 挂载光盘</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/sr0 /mnt/cdrom/</span></span><br></pre></td></tr></table></figure><h5 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># umount 设备文件名或挂载点</span></span><br><span class="line">[root@localhost ~]<span class="comment"># umount /mnt/cdrom</span></span><br></pre></td></tr></table></figure><h5 id="挂载U盘"><a href="#挂载U盘" class="headerlink" title="挂载U盘"></a>挂载U盘</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># fdisk –l</span></span><br><span class="line"><span class="comment"># 查看 U 盘设备文件名</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount -t vfat /dev/sdb1 /mnt/usb/</span></span><br></pre></td></tr></table></figure><p>注意:Linux默认是不支持NTFS文件系统的</p><h4 id="支持NTFS文件系统"><a href="#支持NTFS文件系统" class="headerlink" title="支持NTFS文件系统"></a>支持NTFS文件系统</h4><h5 id="下载NTFS-3G插件"><a href="#下载NTFS-3G插件" class="headerlink" title="下载NTFS-3G插件"></a>下载NTFS-3G插件</h5><p><a href="http://www.tuxera.com/community/ntfs-3g-download/" target="_blank" rel="noopener">http://www.tuxera.com/community/ntfs-3g-download/</a></p><h5 id="安装NTFS-3G"><a href="#安装NTFS-3G" class="headerlink" title="安装NTFS-3G"></a>安装NTFS-3G</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tar -zxvf ntfs-3g_ntfsprogs-2013.1.13.tgz</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd ntfs-3g_ntfsprogs-2013.1.13</span></span><br><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line">[root@localhost ntfs-3g_ntfsprogs-2013.1.13]<span class="comment"># ./configure</span></span><br><span class="line"><span class="comment"># 编译器准备。没有指定安装目录,安装到默认位置中</span></span><br><span class="line">[root@localhost ntfs-3g_ntfsprogs-2013.1.13]<span class="comment"># make</span></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">[root@localhost ntfs-3g_ntfsprogs-2013.1.13]<span class="comment"># make install</span></span><br><span class="line"><span class="comment"># 编译安装</span></span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>[root@localhost ~]# mount -t ntfs-3g 分区设备文件名 挂载点</p><h3 id="fdisk分区"><a href="#fdisk分区" class="headerlink" title="fdisk分区"></a>fdisk分区</h3><h4 id="fdisk命令分区过程"><a href="#fdisk命令分区过程" class="headerlink" title="fdisk命令分区过程"></a>fdisk命令分区过程</h4><ol><li><p>添加新硬盘</p></li><li><p>查看新硬盘<br>[root@localhost ~]# fdisk -l</p></li><li><p>使用fdisk命令分区<br>[root@localhost ~]# fdisk /dev/sdb</p><p>fdisk交互指令说明</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>设置可引导标记</td></tr><tr><td>b</td><td>编辑bsd磁盘标签</td></tr><tr><td>c</td><td>设置DOS操作系统兼容标记</td></tr><tr><td>d</td><td>删除一个分区</td></tr><tr><td>l</td><td>显示已知的文件系统类型。82为Linux swap分区,83为Linux分区</td></tr><tr><td>m</td><td>显示帮助菜单</td></tr><tr><td>n</td><td>新建分区</td></tr><tr><td>o</td><td>建立空白DOS分区表</td></tr><tr><td>p</td><td>显示分区列表</td></tr><tr><td>q</td><td>不保存退出</td></tr><tr><td>s</td><td>新建空白SUN磁盘标签</td></tr><tr><td>t</td><td>改变一个分区的系统ID</td></tr><tr><td>u</td><td>改变显示记录单位</td></tr><tr><td>n</td><td>验证分区表验证分区表</td></tr><tr><td>w</td><td>保存退出</td></tr><tr><td>x</td><td>附加功能(仅专家)</td></tr></tbody></table></li><li><p>重新读取分区表信息<br>[root@localhost ~]# partprobe</p></li><li><p>格式化分区<br>[root@localhost ~]# mkfs -t ext4 /dev/sdb1</p></li><li><p>建立挂载点并挂载<br>[root@localhost ~]# mkdir /disk1<br>[root@localhost ~]# mount /dev/sdb1 /disk1/</p></li></ol><h4 id="分区自动挂载与fstab文件修复"><a href="#分区自动挂载与fstab文件修复" class="headerlink" title="分区自动挂载与fstab文件修复"></a>分区自动挂载与fstab文件修复</h4><ol><li><p>/etc/fstab文件<br>第一字段:分区设备文件名或UUID(硬盘通用唯一识别码)<br>第二字段:挂载点<br>第三字段:文件系统名称<br>第四字段:挂载参数<br>第五字段:指定分区是否被dump备份,0代表不备份,1代表每天备份,2代表不定期备份<br>第六字段:指定分区是否被fsck检测,0代表不检测,其他数字代表检测的优先级,那么当然1的优先级比2高</p></li><li><p>分区自动挂载<br>[root@localhost ~]# vi /etc/fstab<br>…省略部分输出…<br>/dev/sdb5    /disk5    ext4  defaults   1 2</p></li><li><p>/etc/fstab文件修复<br>[root@localhost ~]# mount -o remount,rw /</p></li></ol><h3 id="分配swap分区"><a href="#分配swap分区" class="headerlink" title="分配swap分区"></a>分配swap分区</h3><h4 id="新建swap分区"><a href="#新建swap分区" class="headerlink" title="新建swap分区"></a>新建swap分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># fdisk /dev/sdb</span></span><br></pre></td></tr></table></figure><p>别忘记把分区ID改为82</p><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkswap /dev/sdb1</span></span><br></pre></td></tr></table></figure><h4 id="加入swap分区"><a href="#加入swap分区" class="headerlink" title="加入swap分区"></a>加入swap分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># swapon /dev/sdb1</span></span><br><span class="line"><span class="comment"># 加入 swap 分区</span></span><br><span class="line">[root@localhost ~]<span class="comment"># swapoff /dev/sdb1</span></span><br><span class="line"><span class="comment"># 取消 swap 分区</span></span><br></pre></td></tr></table></figure><h4 id="swap分区开机自动挂载"><a href="#swap分区开机自动挂载" class="headerlink" title="swap分区开机自动挂载"></a>swap分区开机自动挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi /etc/fstab</span></span><br><span class="line">/dev/sdb1  swap  swap defaults  0 0</span><br></pre></td></tr></table></figure><h4 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># free</span></span><br><span class="line"><span class="comment"># 查看内存与 swap 分区使用状况</span></span><br></pre></td></tr></table></figure><ul><li>cached(缓存):是指把读取出来的数据保存在内存当 中,当再次读取时,不用读取硬盘而直接从内存当中读 取,加速了数据的读取过程 </li><li>buffer(缓冲):是指在写入数据时,先把分散的写入操 作保存到内存当中,当达到一定程度再集中写入硬盘, 减少了磁盘碎片和硬盘的反复寻道,加速了数据的写入 过程</li></ul><h2 id="Shell基础"><a href="#Shell基础" class="headerlink" title="Shell基础"></a>Shell基础</h2><h3 id="Shell概述"><a href="#Shell概述" class="headerlink" title="Shell概述"></a>Shell概述</h3><h4 id="Shell是什么-1"><a href="#Shell是什么-1" class="headerlink" title="Shell是什么"></a>Shell是什么</h4><ul><li>Shell是一个命令行解释器,它为用户提供 了一个向Linux内核发送请求以便运行程 序的界面系统级程序,用户可以用Shell来 启动、挂起、停止甚至是编写一些程序。</li><li>Shell还是一个功能相当强大的编程语言, 易编写,易调试,灵活性较强。Shell是解 释执行的脚本语言,在Shell中可以直接调 用Linux系统命令。</li></ul><h4 id="Shell的分类"><a href="#Shell的分类" class="headerlink" title="Shell的分类"></a>Shell的分类</h4><ul><li>Bourne Shell:从1979起Unix就开始使用 Bourne Shell,Bourne Shell的主文件名为 sh。</li><li>C Shell: C Shell主要在BSD版的Unix系 统中使用,其语法和C语言相类似而得名</li><li>Shell的两种主要语法类型有Bourne和C, 这两种语法彼此不兼容。Bourne家族主要 包括sh、ksh、Bash、psh、zsh;C家族主 要包括:csh、tcsh</li><li>Bash: Bash与sh兼容,现在使用的Linux 就是使用Bash作为用户的基本Shell</li></ul><h4 id="Linux支持的Shell"><a href="#Linux支持的Shell" class="headerlink" title="Linux支持的Shell"></a>Linux支持的Shell</h4><p>/etc/shells</p><h3 id="Shell脚本的执行方式"><a href="#Shell脚本的执行方式" class="headerlink" title="Shell脚本的执行方式"></a>Shell脚本的执行方式</h3><h4 id="echo输出命令"><a href="#echo输出命令" class="headerlink" title="echo输出命令"></a>echo输出命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo [选项] [输出内容]</span></span><br><span class="line">选项:</span><br><span class="line">-e:   支持反斜线控制的字符转换</span><br><span class="line">控制字符及其作用</span><br><span class="line">\\ 输出\本身</span><br><span class="line">\a 输出警告音</span><br><span class="line">\b 退格键,也就是向左删除键</span><br><span class="line">\c 取消输出行末的换行符。和“-n”选项一致</span><br><span class="line">\e ESCAPE键</span><br><span class="line">\f 换页符</span><br><span class="line">\n 换行符</span><br><span class="line">\r 回车键</span><br><span class="line">\t 制表符,也就是Tab键</span><br><span class="line">\v 垂直制表符</span><br><span class="line">\0nnn 按照八进制ASCII码表输出字符。其中0为数字零,nnn是三位八进制数</span><br><span class="line">\xhh 按照十六进制ASCII码表输出字符。其中hh是两位十六进制数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo -e &quot;ab\bc&quot;</span><br><span class="line"># 删除左侧字符</span><br><span class="line">[root@localhost ~]# echo -e &quot;a\tb\tc\nd\te\tf&quot;</span><br><span class="line"># 制表符与换行符</span><br><span class="line">[root@localhost ~]# echo -e \ &quot;\x61\t\x62\t\x63\n\x64\t\x65\t\x66&quot;</span><br><span class="line"># 按照十六进制 ASCII 码也同样可以输出</span><br><span class="line">[root@localhost ~]# echo -e &quot;\e[1;31m abcd \e[0m&quot;</span><br><span class="line"># 输出颜色</span><br><span class="line">#\e[ 开始颜色输出</span><br><span class="line">#\e[0m 结束颜色输出</span><br><span class="line">#30m= 黑色, 31m= 红色, 32m= 绿色, 33m= 黄色</span><br><span class="line">#34m= 蓝色, 35m= 洋红, 36m= 青色, 37m= 白色</span><br></pre></td></tr></table></figure><h4 id="第一个脚本"><a href="#第一个脚本" class="headerlink" title="第一个脚本"></a>第一个脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sh]<span class="comment"># vi hello.sh</span></span><br><span class="line"><span class="comment">#!/bin/Bash    -----注意这一行不是注释</span></span><br><span class="line"><span class="comment">#The first program</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"The first shell.sh"</span></span><br></pre></td></tr></table></figure><h4 id="脚本执行"><a href="#脚本执行" class="headerlink" title="脚本执行"></a>脚本执行</h4><ul><li>赋予执行权限,直接运行<ul><li>chmod 755 hello.sh</li><li>./hello.sh</li></ul></li><li>绝对路径执行<br>/root/sh/hello.sh</li><li>相对路径执行<br>./hello.sh</li><li>通过Bash调用执行脚本<ul><li>bash hello.sh    #此种方式，甚至执行权限不给都可以用</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># unix2dos  </span><br><span class="line">#unix格式转化为Windows格式</span><br><span class="line"># dos2unix   </span><br><span class="line">#Windows格式转化为unix格式</span><br></pre></td></tr></table></figure><h3 id="Bash的基本功能"><a href="#Bash的基本功能" class="headerlink" title="Bash的基本功能"></a>Bash的基本功能</h3><h4 id="历史命令与命令补全"><a href="#历史命令与命令补全" class="headerlink" title="历史命令与命令补全"></a>历史命令与命令补全</h4><h5 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# history [选项] [历史命令保存文件]</span><br><span class="line">选项:</span><br><span class="line">-c:   清空历史命令</span><br><span class="line">-w:   把缓存中的历史命令写入历史命令保存文件</span><br><span class="line">~/.bash_history</span><br></pre></td></tr></table></figure><p>历史命令默认会保存1000条,可以在环境变量配置文件/etc/profile中进行修改</p><p>历史命令的调用</p><ul><li>使用上、下箭头调用以前的历史命令</li><li>使用“!n”重复执行第n条历史命令</li><li>使用“!!”重复执行上一条命令</li><li>使用“!字串”重复执行最后一条以该字串开头的命令</li></ul><h5 id="命令与文件补全"><a href="#命令与文件补全" class="headerlink" title="命令与文件补全"></a>命令与文件补全</h5><p>在Bash中,命令与文件补全是非常方便与常用的功能,我们只要在输入命令或文件时,按“Tab”键就会自动进行补全</p><h4 id="命令别名与常用快捷键"><a href="#命令别名与常用快捷键" class="headerlink" title="命令别名与常用快捷键"></a>命令别名与常用快捷键</h4><h5 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># alias 别名='原命令'</span></span><br><span class="line"><span class="comment"># 设定命令别名</span></span><br><span class="line">[root@localhost ~]<span class="comment"># alias</span></span><br><span class="line"><span class="comment"># 查询命令别名</span></span><br></pre></td></tr></table></figure><p>命令执行时顺序</p><ol><li>第一顺位执行用绝对路径或相对路径执行的命令。</li><li>第二顺位执行别名。</li><li>第三顺位执行Bash的内部命令。</li><li>第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令。</li></ol><p>让别名永久生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi /root/.bashrc</span></span><br></pre></td></tr></table></figure><p>删除别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># unalias 别名</span></span><br></pre></td></tr></table></figure><h5 id="Bash常用快捷键"><a href="#Bash常用快捷键" class="headerlink" title="Bash常用快捷键"></a>Bash常用快捷键</h5><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl+A</td><td>把光标移动到命令行开头。如果我们输入的命令过长,想要把光标移动到命令行开头时使用。</td></tr><tr><td>ctrl+E</td><td>把光标移动到命令行结尾。</td></tr><tr><td>ctrl+C</td><td>强制终止当前的命令。</td></tr><tr><td>ctrl+L</td><td>清屏,相当于clear命令。</td></tr><tr><td>ctrl+U</td><td>删除或剪切光标之前的命令。我输入了一行很长的命令,不用使用退格键一个一个字符的删除,使用这个快捷键会更加方便</td></tr><tr><td>ctrl+K</td><td>删除或剪切光标之后的内容。</td></tr><tr><td>ctrl+Y</td><td>粘贴ctrl+U或ctrl+K剪切的内容。</td></tr><tr><td>ctrl+R</td><td>在历史命令中搜索,按下ctrl+R之后,就会出现搜索界面,只要输入搜索内容,就会从历史命令中搜索。</td></tr><tr><td>ctrl+D</td><td>退出当前终端。</td></tr><tr><td>ctrl+Z</td><td>暂停,并放入后台。这个快捷键牵扯工作管理的内容,我们在系统管理章节详细介绍。</td></tr><tr><td>ctrl+S</td><td>暂停屏幕输出。</td></tr><tr><td>ctrl+Q</td><td>恢复屏幕输出</td></tr></tbody></table><h4 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h4><h5 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h5><table><thead><tr><th>设备</th><th>设备文件夹</th><th>文件描述符</th><th>类型</th></tr></thead><tbody><tr><td>键盘</td><td>/dev/stdin</td><td>0</td><td>标准输入</td></tr><tr><td>显示器</td><td>/dev/sdtout</td><td>1</td><td>标准输出</td></tr><tr><td>显示器</td><td>/dev/sdterr</td><td>2</td><td>标准错误输出</td></tr></tbody></table><h5 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h5><table><thead><tr><th>类型</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>标准输出重定向</td><td>命令 &gt; 文件</td><td>以覆盖的方式,把命令的正确输出输出到指定的文件或设备当中。</td></tr><tr><td></td><td>命令 &gt;&gt; 文件</td><td>以追加的方式,把命令的 正确输出输出到指定的文 件或设备当中。</td></tr><tr><td>标准错误输出重定向</td><td>错误命令 2&gt;文件</td><td>以覆盖的方式,把命令的 错误输出输出到指定的文 件或设备当中</td></tr><tr><td></td><td>错误命令 2&gt;&gt;文件</td><td>以追加的方式,把命令的 错误输出输出到指定的文 件或设备当中。</td></tr><tr><td>正确输出和错误输出同时保存</td><td>命令 &gt; 文件 2&gt;&amp;1</td><td>以覆盖的方式,把正确输 出和错误输出都保存到同 一个文件当中。</td></tr><tr><td></td><td>命令 &gt;&gt; 文件 2&gt;&amp;1</td><td>以追加的方式,把正确输出和错误输出都保存到同一个文件当中。</td></tr><tr><td></td><td>命令 &amp;&gt;文件</td><td>以覆盖的方式,把正确输出和错误输出都保存到同一个文件当中。</td></tr><tr><td></td><td>命令 &amp;&gt;&gt;文件</td><td>以追加的方式,把正确输出和错误输出都保存到同一个文件当中。</td></tr><tr><td></td><td>命令&gt;&gt;文件1 2&gt;&gt;文件2</td><td>把正确的输出追加到文件1中,把错误的输出追加到文件2中。</td></tr></tbody></table><h5 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h5><p>[root@localhost ~]# wc [选项] [文件名]<br>选项:<br>-c  统计字节数<br>-w 统计单词数<br>-l  统计行数</p><ul><li><p>命令&lt;文件              把文件作为命令的输入</p></li><li><p>命令&lt;&lt; 标识符<br>…<br>标识符                   把标识符之间内容作为命令的输入</p></li></ul><h4 id="多命令顺序执行与管道符"><a href="#多命令顺序执行与管道符" class="headerlink" title="多命令顺序执行与管道符"></a>多命令顺序执行与管道符</h4><h5 id="多命令顺序执行"><a href="#多命令顺序执行" class="headerlink" title="多命令顺序执行"></a>多命令顺序执行</h5><table><thead><tr><th>多命令执行符</th><th>格式</th><th>作用</th></tr></thead><tbody><tr><td>;</td><td>命令1 ;命令2</td><td>多个命令顺序执行,命令之间没有任何逻辑联系</td></tr><tr><td>&amp;&amp;</td><td>命令1 &amp;&amp; 命令２</td><td>逻辑与<br>当命令1正确执行,则命令2才会执行<br>当命令1执行不正确,则命令2不会执行</td></tr><tr><td>||</td><td>命令１||命令２</td><td>逻辑或<br>当命令1 执行不正确,则命令2才会执<br>当命令1正确执行,则命令2不会执行</td></tr></tbody></table><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls ; date ; cd /user ; pwd</span></span><br></pre></td></tr></table></figure><p>[root@localhost ~]# dd if=输入文件 of=输出文件 bs=字节数 count=个数<br>选项:<br>if=输入文件      指定源文件或源设备<br>of=输出文件    指定目标文件或目标设备<br>bs=字节数       指定一次输入/输出多少字节,即把这些字节看做一个数据块<br>count=个数     指定输入/输出多少个数据块</p><p>例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># date ; dd if=/dev/zero of=/root/testfile bs=1k count=100000 ;date</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls anaconda-ks.cfg &amp;&amp; echo yes</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls /root/test || echo "no</span></span><br><span class="line">[root@localhost ~]<span class="comment"># 命令 &amp;&amp; echo yes || echo no</span></span><br></pre></td></tr></table></figure><h5 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h5><p>命令格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# 命令1 | 命令2</span><br><span class="line"># 命令 1 的正确输出作为命令 2 的操作对象</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll -a /etc/ | more</span></span><br><span class="line">[root@localhost ~]<span class="comment"># netstat -an | grep "ESTABLISHED"</span></span><br></pre></td></tr></table></figure><p>[root@localhost ~]# grep [选项] “搜索内容” 文件名<br>选项:<br>-i:                        忽略大小写<br>-n:                       输出行号<br>-v:                       反向查找<br>–color=auto      搜索出的关键字用颜色显示</p><h4 id="通配符与其他特殊符号"><a href="#通配符与其他特殊符号" class="headerlink" title="通配符与其他特殊符号"></a>通配符与其他特殊符号</h4><h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h5><table><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td>？</td><td>匹配一个任意字符</td></tr><tr><td>*</td><td>匹配0个或任意多个任意字符,也就是可以匹配任何内容</td></tr><tr><td>[]</td><td>匹配中括号中任意一个字符。例如:[abc]代表一定匹配一个字符,或者是a,或者是b,或者是c。</td></tr><tr><td>[-]</td><td>匹配中括号中任意一个字符,-代表一个范围。例如:[a-z]代表匹配一个小写字母。</td></tr><tr><td>[^]</td><td>逻辑非,表示匹配不是中括号内的一个字符。例如:[^0-9]代表匹配一个不是数字的字符。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /tmp/</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># rm -rf *</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># touch abc</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># touch abcd</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># touch 012</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># touch 0abc</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># ls ?abc</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># ls [0-9]*</span></span><br><span class="line">[root@localhost tmp]<span class="comment"># ls [^0-9]*</span></span><br></pre></td></tr></table></figure><h5 id="Bash中其他特殊符号"><a href="#Bash中其他特殊符号" class="headerlink" title="Bash中其他特殊符号"></a>Bash中其他特殊符号</h5><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>‘ ‘</td><td>单引号。在单引号中所有的特殊符号,如“$”和“`”(反引号)都没有特殊含义</td></tr><tr><td>“”</td><td>双引号。在双引号中特殊符号都没有特殊含义,但是“$”、“`”和“\”是例外,拥有“调用变量的值”、“引用命令”和“转义符”的特殊含义。</td></tr><tr><td>``</td><td>反引号。反引号括起来的内容是系统命令,在Bash中会先执行它。和$()作用一样,不过推荐使用$(),因为反引号非常容易看错。</td></tr><tr><td>$()</td><td>和反引号作用一样,用来引用系统命令</td></tr><tr><td>#</td><td>在Shell脚本中,#开头的行代表注释。</td></tr><tr><td>$</td><td>用于调用变量的值,如需要调用变量name的值时,需要用$name的方式得到变量的值</td></tr><tr><td>\</td><td>转义符,跟在\之后的特殊符号将失去特殊含义,变为普通字符。如$将输出“$”符号,而不当做是变量引用。</td></tr></tbody></table><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">反引号与$()</span><br><span class="line">[root@localhost ~]<span class="comment"># echo `ls`</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $(date)</span></span><br><span class="line"></span><br><span class="line">单引号与双引号</span><br><span class="line">[root@localhost ~]<span class="comment"># name=sc</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo '$name'</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo "$name"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo ‘$(date)'</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo “$(date)"</span></span><br></pre></td></tr></table></figure><h3 id="Bash的变量"><a href="#Bash的变量" class="headerlink" title="Bash的变量"></a>Bash的变量</h3><h4 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h4><ol><li>什么是变量</li></ol><ul><li>变量是计算机内存的单元,其中存放的值可以改变。当Shell脚本需要保存一些信息时,如一个文件名或是一个数字,就把它存放在一个变量中。每个变量有一个名字,所以很容易引用它。使用变量可以保存有用信息,使系统获知用户相关设置,变量也可以用于保存暂时信息。</li></ul><ol start="2"><li><p>变量设置规则</p><ul><li>变量名称可以由字母、数字和下划线组成,但是不能以数字开头。如果变量名是“2name”则是错误的。</li><li>在Bash中,变量的默认类型都是字符串型,如果要进行数值运算,则必修指定变量类型为数值型。</li><li>变量用等号连接值,等号左右两侧不能有空格。</li><li>变量的值如果有空格,需要使用单引号或双引号包括。</li><li>在变量的值中,可以使用“\”转义符。</li><li>如果需要增加变量的值,那么可以进行变量值的叠加。不过变量需要用双引号包含“$变量名”或用${变量名}包含。</li><li>如果是把命令的结果作为变量值赋予变量,则需要使用反引号或$()包含命令。</li><li>环境变量名建议大写,便于区分。</li></ul></li><li><p>变量分类</p><ul><li>用户自定义变量</li><li>环境变量:这种变量中主要保存的是和系统操作环境相关的数据。</li><li>位置参数变量:这种变量主要是用来向脚本当中传递参数或数据的,变量名不能自定义,变量作用是固定的。</li><li>预定义变量:是Bash中已经定义好的变量,变量名不能自定义,变量作用也是固定的。</li></ul></li><li><p>本地变量</p><ul><li><p>变量定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># name="finyorke"</span></span><br></pre></td></tr></table></figure></li><li><p>变量叠加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># aa=123</span></span><br><span class="line">[root@localhost ~]<span class="comment"># aa="$aa"456</span></span><br><span class="line">[root@localhost ~]<span class="comment"># aa=$&#123;aa&#125;789</span></span><br></pre></td></tr></table></figure></li><li><p>变量调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo $name</span></span><br></pre></td></tr></table></figure></li><li><p>变量查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># set</span></span><br></pre></td></tr></table></figure></li><li><p>变量删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># unset name</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ol><li><p>环境变量是什么<br>用户自定义变量只在当前的Shell中生效,而环境变量会在当前Shell和这个Shell的所有子Shell当中生效。如果把环境变量写入相应的配置文件,那么这个环境变量就会在所有的Shell中生效</p></li><li><p>设置环境变量</p><p>export 变量名=变量值</p><p>#申明变量</p></li></ol><p>   env</p><p>   #查询变量</p><p>   unset 变量名</p><p>   #删除变量</p><ol start="3"><li><p>系统常见环境变量</p><ul><li><p>PATH:系统查找命令的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo $PATH</span></span><br></pre></td></tr></table></figure></li><li><p>PATH=”$PATH”:/root/sh<br>#PATH 变量叠加</p></li><li><p>PS1:定义系统提示符的变量<br>\d:  显示日期,格式为“星期 月 日”<br>\h:  显示简写主机名。如默认主机名“localhost”<br>\t:   显示24小时制时间,格式为“HH:MM:SS”<br>\T:  显示12小时制时间,格式为“HH:MM:SS”<br>\A:  显示24小时制时间,格式为“HH:MM”<br>\u:  显示当前用户名<br>\w:  显示当前所在目录的完整名称<br>\W:  显示当前所在目录的最后一个目录<br>\#:  执行的第几个命令<br>\$:  提示符。如果是root用户会显示提示符为“#”,如果是普通用户会显示提  示符为“​$”</p></li></ul><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># PS1='[\u@\t \w]\$ '</span></span><br><span class="line">[root@04:50:08 /usr/<span class="built_in">local</span>/src]<span class="comment">#PS1='[\u@\@ \h \# \W]\$‘</span></span><br><span class="line">[root@04:53 上午 localhost 31 src]<span class="comment">#PS1='[\u@\h \W]\$ '</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h4><table><thead><tr><th>位置参数变量</th><th>作用</th></tr></thead><tbody><tr><td>$ｎ</td><td>n为数字,$0代表命令本身,​$1-$9代表第一到第九个参数,十以上的参数需要用大括号包含,如${10}</td></tr><tr><td>$*</td><td>这个变量代表命令行中所有的参数,$*把所有的参数看成一个整体</td></tr><tr><td>$0</td><td>这个变量也代表命令行中所有的参数,不过$@把每个参数区分对待</td></tr><tr><td>$#</td><td>这个变量代表命令行中所有参数的个数</td></tr></tbody></table><p>例子：</p><ul><li><p>例子1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">  num1=<span class="variable">$1</span></span><br><span class="line">  num2=<span class="variable">$2</span></span><br><span class="line">  sum=$(( <span class="variable">$num1</span> + <span class="variable">$num2</span>))</span><br><span class="line">  <span class="comment">#变量 sum 的和是 num1 加 num2</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line">  <span class="comment">#打印变量 sum 的值</span></span><br></pre></td></tr></table></figure><p>例子２：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"A total of <span class="variable">$#</span> parameters"</span></span><br><span class="line"><span class="comment">#使用 $# 代表所有参数的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The parameters is: $*"</span></span><br><span class="line"><span class="comment">#使用 $* 代表所有的参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The parameters is: <span class="variable">$@</span>"</span></span><br><span class="line"><span class="comment">#使用 $@ 也代表所有参数</span></span><br></pre></td></tr></table></figure></li><li><p>例子3:$*与$@的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"$*"</span></span><br><span class="line"><span class="comment">#$* 中的所有参数看成是一个整体,所以这个 for 循环只会循环一次</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The parameters is: <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">x=1</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="comment">#$@ 中的每个参数都看成是独立的,所以“ $@ ”中有几个参数,就会循环几次</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The parameter<span class="variable">$x</span> is: <span class="variable">$y</span>"</span></span><br><span class="line">x=$(( <span class="variable">$x</span> +1 ))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><table><thead><tr><th>预定义变量</th><th>作用</th></tr></thead><tbody><tr><td>$?</td><td>最后一次执行的命令的返回状态。如果这个变量的值为0,证明上一个命令正确执行;如果这个变量的值为非0(具体是哪个数,由命令自己来决定),则证明上一个命令执行不正确了。</td></tr><tr><td>$$</td><td>当前进程的进程号(PID)</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的进程号(PID)</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Author: shenchao (E-mail: shenchao@lampbrother.net)</span><br><span class="line">echo &quot;The current process is $$&quot;</span><br><span class="line"># 输出当前进程的 PID 。</span><br><span class="line"># 这个 PID 就是 variable.sh 这个脚本执行时,生成的进程的 PID</span><br><span class="line">find /root -name hello.sh &amp;</span><br><span class="line"># 使用 find 命令在 root 目录下查找 hello.sh 文件</span><br><span class="line"># 符号 &amp; 的意思是把命令放入后台执行,工作管理我们在系统管理章节</span><br><span class="line">有详细介绍</span><br><span class="line">echo &quot;The last one Daemon process is $!&quot;</span><br></pre></td></tr></table></figure><ul><li><p>接收键盘输入</p><p>[root@localhost ~]# read [选项] [变量名]<br>选项:<br>-p “提示信息”:　　在等待read输入时,输出提示信息<br>-t 秒数:　　　　　read命令会一直等待用户输入,使用此选项可以指定等待时间<br>-n 字符数:　　　   read命令只接受指定的字符数,就会执行<br>-s:　　　　　　　隐藏输入的数据,适用于机密信息的输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: shenchao (E-mail: shenchao@lampbrother.net)</span></span><br><span class="line"><span class="built_in">read</span> -t 30 -p <span class="string">"Please input your name: "</span> name</span><br><span class="line"><span class="comment"># 提示“请输入姓名”并等待 30 秒,把用户的输入保存入变量 name 中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Name is <span class="variable">$name</span> "</span></span><br><span class="line"><span class="built_in">read</span> -s -t 30 -p <span class="string">"Please enter your age: "</span> age</span><br><span class="line"><span class="comment"># 年龄是隐私,所以我们用“ -s ”选项隐藏输入</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Age is <span class="variable">$age</span> "</span></span><br><span class="line"><span class="built_in">read</span> -n 1 -t 30 -p <span class="string">"Please select your gender[M/F]: "</span> gender</span><br><span class="line"><span class="comment"># 使用“ -n 1 ”选项只接收一个输入字符就会执行(都不用输入回车)</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Sex is <span class="variable">$gender</span>"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Bash的运算符"><a href="#Bash的运算符" class="headerlink" title="Bash的运算符"></a>Bash的运算符</h3><h4 id="数值运算与运算符"><a href="#数值运算与运算符" class="headerlink" title="数值运算与运算符"></a>数值运算与运算符</h4><ol><li><p>declare声明变量类型<br>[root@localhost ~]# declare [+/-][选项] 变量名<br>选项:<br>-:   给变量设定类型属性<br>+:   取消变量的类型属性<br>-i:   将变量声明为整数型(integer)<br>-x:   将变量声明为环境变量<br>-p:   显示指定变量的被声明的类型</p></li><li><p>数值运算</p><ul><li><p>方法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># aa=11</span></span><br><span class="line">[root@localhost ~]<span class="comment"># bb=22</span></span><br><span class="line"><span class="comment"># 给变量 aa 和 bb 赋值</span></span><br><span class="line">[root@localhost ~]<span class="comment"># declare -i cc=$aa+$bb</span></span><br></pre></td></tr></table></figure></li><li><p>方法二:expr或let数值运算工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># aa=11</span></span><br><span class="line">[root@localhost ~]<span class="comment"># bb=22</span></span><br><span class="line"><span class="comment"># 给变量 aa 和变量 bb 赋值</span></span><br><span class="line">[root@localhost ~]<span class="comment"># dd=$(expr $aa + $bb)</span></span><br><span class="line"><span class="comment">#dd 的值是 aa 和 bb 的和。注意“ + ”号左右两</span></span><br><span class="line">侧必须有空格</span><br></pre></td></tr></table></figure></li><li><p>方法3:“$((运算式))”或“$[运算式]”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># aa=11</span></span><br><span class="line">[root@localhost ~]<span class="comment"># bb=22</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ff=$(( $aa+$bb ))</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gg=$[ $aa+$bb ]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>运算符</p><table><thead><tr><th>优先级</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>13</td><td>-, +</td><td>单目负、单目正</td></tr><tr><td>12</td><td>!, ~</td><td>逻辑非、按位取反或补码</td></tr><tr><td>11</td><td>* , / , %</td><td>乘、除、取模</td></tr><tr><td>10</td><td>+, -</td><td>加、减</td></tr><tr><td>9</td><td>&lt;&lt; , &gt;&gt;</td><td>按位左移、按位右移</td></tr><tr><td>8</td><td>&lt; =, &gt; =, &lt; , &gt;</td><td>小于或等于、大于或等于、小于、大于</td></tr><tr><td>7</td><td>== , !=</td><td>等于、不等于</td></tr><tr><td>6</td><td>&amp;</td><td>按位与</td></tr><tr><td>5</td><td>^</td><td>按位异或</td></tr><tr><td>4</td><td>|</td><td>按位或</td></tr><tr><td>3</td><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>2</td><td>||</td><td>逻辑或</td></tr><tr><td>1</td><td>=,+=,-=,*=,/=,%=,&amp;=, ^=,=, &lt;&lt;=, &gt;&gt;=</td><td>赋值、运算且赋值</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># aa=$(( (11+3)*3/2 ))</span></span><br><span class="line"><span class="comment"># 虽然乘和除的优先级高于加,但是通过小括号可以调整运算优先级</span></span><br><span class="line">[root@localhost ~]<span class="comment"># bb=$(( 14%3 ))</span></span><br><span class="line"><span class="comment">#14 不能被 3 整除,余数是 2</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cc=$(( 1 &amp;&amp; 0 ))</span></span><br><span class="line"><span class="comment"># 逻辑与运算只有想与的两边都是 1 ,与的结果才是 1 ,否则</span></span><br><span class="line">与的结果是 0</span><br></pre></td></tr></table></figure></li></ol><h4 id="变量测试与内容替换"><a href="#变量测试与内容替换" class="headerlink" title="变量测试与内容替换"></a>变量测试与内容替换</h4><table><thead><tr><th>变量置换方式</th><th>变量y没有设置</th><th>变量y为空值</th><th>变量y设置值</th></tr></thead><tbody><tr><td>x=${y-新值}</td><td>x=新值</td><td>x为空</td><td>x=$y</td></tr><tr><td>x=${y:-新值}</td><td>x=新值</td><td>x=新值</td><td>x=$y</td></tr><tr><td>x=${y+新值}</td><td>x为空</td><td>x=新值</td><td>x=新值</td></tr><tr><td>x=${y:+新值}</td><td>x为空</td><td>x为空</td><td>x=新值</td></tr><tr><td>x=${y=新值}</td><td>x=新值<br>y=新值</td><td>x为空<br>y值不变</td><td>x=$y<br>y值不变</td></tr><tr><td>x=${y:=新值}</td><td>x=新值<br>y=新值</td><td>x=新值<br>y=新值</td><td>x=$y<br>y值不变</td></tr><tr><td>x=${y?新值}</td><td>新值输出到标准错误输出(就是屏幕)</td><td>x为空</td><td>x=$y</td></tr><tr><td>x=${y:?新值}</td><td>新值输出到标准错误输出</td><td>新值输出到标准错误输出</td><td>x=$y</td></tr></tbody></table><p>例子：测试x=${y-新值}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># unset y</span></span><br><span class="line"><span class="comment"># 删除变量 y</span></span><br><span class="line">[root@localhost ~]<span class="comment"># x=$&#123;y-new&#125;</span></span><br><span class="line"><span class="comment"># 进行测试</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $x</span></span><br><span class="line">new</span><br><span class="line"><span class="comment"># 因为变量 y 不存在,所以 x=new</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># y=""</span></span><br><span class="line"><span class="comment"># 给变量 y 赋值为空</span></span><br><span class="line">[root@localhost ~]<span class="comment"># x=$&#123;y-new&#125;</span></span><br><span class="line"><span class="comment"># 进行测试</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $x</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># y=old</span></span><br><span class="line"><span class="comment"># 给变量 y 赋值</span></span><br><span class="line">[root@localhost ~]<span class="comment"># x=$&#123;y-new&#125;</span></span><br><span class="line"><span class="comment"># 进行测试</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $x</span></span><br><span class="line">old</span><br></pre></td></tr></table></figure><h3 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h3><h4 id="环境变量配置文件简介"><a href="#环境变量配置文件简介" class="headerlink" title="环境变量配置文件简介"></a>环境变量配置文件简介</h4><ol><li><p>source命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# source 配置文件</span><br><span class="line">或</span><br><span class="line">[root@localhost ~]# . 配置文件</span><br></pre></td></tr></table></figure></li><li><p>环境变量配置文件简介</p><ul><li>环境变量配置文件中主要是定义对系统的操作环境生效的系统默认环境变量,比如PATH、HISTSIZE、PS1、HOSTNAME等默认环境变量。</li><li>/etc/profile</li><li>/etc/profile.d/*.sh</li><li>~/.bash_profile</li><li>~/.bashrc</li><li>/etc/bashrc</li></ul></li></ol><h4 id="环境变量配置文件作用"><a href="#环境变量配置文件作用" class="headerlink" title="环境变量配置文件作用"></a>环境变量配置文件作用</h4><ul><li>/etc/profile</li><li>/etc/profile.d/*.sh</li><li>~/.bash_profile</li><li>~/.bashrc</li><li>/etc/bashrc</li></ul><p><img src="https://pic2.superbed.cn/item/5dea16c2f1f6f81c5003cfa2.png" alt></p><ul><li><p>/etc/profile的作用:</p><ul><li>USER变量:</li><li>LOGNAME变量:</li><li>MAIL变量:</li><li>PATH变量:</li><li>HOSTNAME变量:</li><li>HISTSIZE变量:</li><li>umask:</li><li>调用/etc/profile.d/*.sh文件</li></ul></li><li><p>~/.bash_profile的作用</p><ul><li>调用了~/.bashrc文件。</li><li>在PATH变量后面加入了“:$HOME/bin”<br>这个目录</li></ul></li><li><p>~/.bashrc的作用</p><ul><li>定义默认别名</li><li>调用/etc/bashrc</li></ul></li><li><p>/etc/bashrc的作用</p><ul><li>PS1变量</li><li>umask</li><li>PATH变量</li><li>调用/etc/profile.d/*.sh文件</li></ul></li></ul><h4 id="其他配置文件和登录信息"><a href="#其他配置文件和登录信息" class="headerlink" title="其他配置文件和登录信息"></a>其他配置文件和登录信息</h4><ul><li><p>注销时生效的环境变量配置文件<br>~/.bash_logout</p></li><li><p>其他配置文件<br>~/bash_history</p></li><li><p>Shell登录信息</p><ul><li><p>本地终端欢迎信息: /etc/issue</p><table><thead><tr><th>转义符</th><th>作用</th></tr></thead><tbody><tr><td>\d</td><td>显示当前系统日期</td></tr><tr><td>\s</td><td>显示操作系统名称</td></tr><tr><td>\l</td><td>显示登录的终端号,这个比较常用。</td></tr><tr><td>\m</td><td>显示硬件体系结构,如i386、i686等</td></tr><tr><td>\n</td><td>显示主机名</td></tr><tr><td>\o</td><td>显示域名</td></tr><tr><td>\r</td><td>显示内核版本</td></tr><tr><td>\t</td><td>显示当前系统时间</td></tr><tr><td>\u</td><td>显示当前登录用户的序列号</td></tr></tbody></table></li></ul></li></ul><ul><li><p>远程终端欢迎信息: /etc/issue.net</p><ul><li>转义符在/etc/issue.net文件中不能使用</li><li>是否显示此欢迎信息,由ssh的配置文件/etc/ssh/sshd_config决定,加入“Banner/etc/issue.net”行才能显示(记得重启SSH服务)</li></ul></li><li><p>登陆后欢迎信息:/etc/motd<br>不管是本地登录,还是远程登录,都可以显示此欢迎信息</p></li></ul><h2 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h2><h3 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h3><h4 id="正则表达式与通配符"><a href="#正则表达式与通配符" class="headerlink" title="正则表达式与通配符"></a>正则表达式与通配符</h4><ul><li>正则表达式用来在文件中匹配符合条件的字符串,正则是包含匹配。grep、awk、sed等命令可以支持正则表达式。</li><li>通配符用来匹配符合条件的文件名,通配符是完全匹配。ls、find、cp这些命令不支持正则表达式,所以只能使用shell自己的通配符来进行匹配了。</li></ul><h4 id="基础正则表达式-1"><a href="#基础正则表达式-1" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h4><table><thead><tr><th>元字符</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>前一个字符匹配0次或任意多次。</td></tr><tr><td>.</td><td>匹配除了换行符外任意一个字符。</td></tr><tr><td>^</td><td>匹配行首。例如:^hello会匹配以hello开头的行。</td></tr><tr><td>$</td><td>匹配行尾。例如:hello&amp;会匹配以hello结尾的行。</td></tr><tr><td>[]</td><td>匹配中括号中指定的任意一个字符,只匹配一个字符。<br>例如:[aoeiu] 匹配任意一个元音字母,[0-9] 匹配任意一位<br>数字, [a-z][0-9]匹配小写字和一位数字构成的两位字符。</td></tr><tr><td>[^]</td><td>匹配除中括号的字符以外的任意一个字符。例如:[^0-9] 匹配<br>任意一位非数字字符,[^a-z] 表示任意一位非小写字母。</td></tr><tr><td>\</td><td>转义符。用于取消讲特殊符号的含义取消。</td></tr><tr><td>\{n\}</td><td>表示其前面的字符恰好出现n次。例如:[0-9]\{4\} 匹配4位数<br>字,[1][3-8][0-9]{9} 匹配手机号码。</td></tr><tr><td>\{n,\}</td><td>表示其前面的字符出现不小于n次。例如: [0-9]\{2,\} 表示两<br>位及以上的数字。</td></tr><tr><td>\{n,m\}</td><td>表示其前面的字符至少出现n次,最多出现m次。例如: [a-<br>z]\{6,8\} 匹配6到8位的小写字母。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">“*”前一个字符匹配0次,或任意多次:</span><br><span class="line">grep &quot;a*&quot; test_rule.txt</span><br><span class="line"># 匹配所有内容,包括空白行</span><br><span class="line">grep &quot;aa*&quot; test_rule.txt</span><br><span class="line"># 匹配至少包含有一个 a 的行</span><br><span class="line">grep &quot;aaa*&quot; test_rule.txt</span><br><span class="line">匹配最少包含两个连续a的字符串</span><br><span class="line">grep &quot;aaaaa*&quot; test_rule.txt</span><br><span class="line">#则会匹配最少包含四个个连续a的字符串</span><br><span class="line"></span><br><span class="line">“.” 匹配除了换行符外任意一个字符:</span><br><span class="line">grep &quot;s..d&quot; test_rule.txt</span><br><span class="line"># “ s..d ”会匹配在 s 和 d 这两个字母之间一定有两个字符的单词</span><br><span class="line">grep &quot;s.*d&quot; test_rule.txt</span><br><span class="line"># 匹配在 s 和 d 字母之间有任意字符</span><br><span class="line">grep &quot;.*&quot; test_rule.txt</span><br><span class="line"># 匹配所有内容</span><br><span class="line"></span><br><span class="line">“^”匹配行首,“$”匹配行尾:</span><br><span class="line">grep &quot;^M&quot; test_rule.txt</span><br><span class="line"># 匹配以大写“ M ”开头的行</span><br><span class="line">grep &quot;n$&quot; test_rule.txt</span><br><span class="line"># 匹配以小写“ n ”结尾的行</span><br><span class="line">grep &quot;^M.*n$&quot; test_rule.txt</span><br><span class="line"># 匹配以大写“ M ”开头,以小写“ n ”结尾的行</span><br><span class="line">grep -n &quot;^$&quot; test_rule.txt</span><br><span class="line"># 会匹配空白行</span><br><span class="line"></span><br><span class="line">“[]” 匹配中括号中指定的任意一个:</span><br><span class="line">字符,只匹配一个字符</span><br><span class="line">grep &quot;s[ao]id&quot; test_rule.txt</span><br><span class="line"># 匹配 s 和 i 字母中,要不是 a 、要不是 o</span><br><span class="line">grep &quot;[0-9]&quot; test_rule.txt</span><br><span class="line"># 匹配任意一个数字</span><br><span class="line">grep &quot;^[a-z]&quot; test_rule.txt</span><br><span class="line"># 匹配用小写字母开头的行</span><br><span class="line"></span><br><span class="line">“[^]” 匹配除中括号的字符以外的:</span><br><span class="line">任意一个字符</span><br><span class="line">grep &quot;^[^a-z]&quot; test_rule.txt</span><br><span class="line"># 匹配不用小写字母开头的行</span><br><span class="line">grep &quot;^[^a-zA-Z]&quot; test_rule.txt</span><br><span class="line"># 匹配不用字母开头的行</span><br><span class="line"></span><br><span class="line">“\” 转义符:</span><br><span class="line">grep &quot;\.$&quot; test_rule.txt</span><br><span class="line"># 匹配使用“ . ”结尾的行</span><br><span class="line"></span><br><span class="line">“\&#123;n\&#125;”表示其前面的字符恰好出现n次:</span><br><span class="line">grep &quot;a\&#123;3\&#125;&quot; test_rule.txt</span><br><span class="line"># 匹配 a 字母连续出现三次的字符串</span><br><span class="line">grep &quot;[0-9]\&#123;3\&#125;&quot; test_rule.txt</span><br><span class="line"># 匹配包含连续的三个数字的字符串</span><br><span class="line"></span><br><span class="line">“\&#123;n,\&#125;”表示其前面的字符出现不小于n次</span><br><span class="line">grep &quot;^[0-9]\&#123;3,\&#125;[a-z]&quot; test_rule.txt</span><br><span class="line"># 匹配最少用连续三个数字开头的行</span><br><span class="line"></span><br><span class="line">“\&#123;n,m\&#125;”匹配其前面的字符至少出现n次,</span><br><span class="line">最多出现m次</span><br><span class="line">grep &quot;sa\&#123;1,3\&#125;i&quot; test_rule.txt</span><br><span class="line"># 匹配在字母 s 和字母 i 之间有最少一个 a ,最多三个 a</span><br></pre></td></tr></table></figure><h3 id="字符截取命令"><a href="#字符截取命令" class="headerlink" title="字符截取命令"></a>字符截取命令</h3><h4 id="cut字段提取命令"><a href="#cut字段提取命令" class="headerlink" title="cut字段提取命令"></a>cut字段提取命令</h4><p>[root@localhost ~]# cut [选项] 文件名<br>选项:<br>-f 列号:        提取第几列<br>-d 分隔符:   按照指定分隔符分割列</p><p>eg:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cut -f 2 student.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -f 2,3 student.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d ":" -f 1,3 etc/passwd</span></span><br></pre></td></tr></table></figure><p>cut命令的局限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># df -h | cut -d " " -f 1,3</span></span><br></pre></td></tr></table></figure><h4 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h4><p>printf  ’输出类型输出格式’  输出内容<br>输出类型:<br>%ns:       输出字符串。n是数字指代输出几个字符<br>%ni:        输出整数。n是数字指代输出几个数字<br>%m.nf:   位数和小数位数。如%8.2f代表共输出8位数,其中2位是小数,6位是整数。</p><p>输出格式:<br>\a:         输出警告声音<br>\b:         输出退格键,也就是Backspace键<br>\f:          清除屏幕<br>\n:         换行<br>\r:          回车,也就是Enter键<br>\t:          水平输出退格键,也就是Tab键<br>\v:          垂直输出退格键,也就是Tab键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># printf %s 1 2 3 4 5 6</span></span><br><span class="line">[root@localhost ~]<span class="comment"># printf %s %s %s 1 2 3 4 5 6</span></span><br><span class="line">[root@localhost ~]<span class="comment"># printf '%s %s %s' 1 2 3 4 5 6</span></span><br><span class="line">[root@localhost ~]<span class="comment"># printf '%s %s %s\n' 1 2 3 4 5 6</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vi student.txt</span></span><br><span class="line">ID Name   PHP Linux MySQL Average</span><br><span class="line">1  Liming 82  95    86    87.66</span><br><span class="line">2  Sc     74  96    87    85.66</span><br><span class="line">3  Gao    99  83    93    91.66</span><br><span class="line">[root@localhost ~]<span class="comment"># printf '%s' $(cat student.txt)</span></span><br><span class="line"><span class="comment">#不调整输出格式</span></span><br><span class="line">[root@localhost ~]<span class="comment"># printf '%s\t %s\t %s\t %s\t %s\t %s\t \n' $(cat student.txt)</span></span><br><span class="line"><span class="comment">#调整格式输出</span></span><br></pre></td></tr></table></figure><p>在awk命令的输出中支持print和printf命令</p><ul><li>print:print会在每个输出之后自动加入一个换行符(Linux默认没有print命令)</li><li>printf:printf是标准格式输出命令,并不会自动加入换行符,如果需要换行,需要手工加入换行符</li></ul><h4 id="awk命令"><a href="#awk命令" class="headerlink" title="awk命令"></a>awk命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># awk ‘条件1&#123;动作1&#125; 条件2&#123;动作2&#125;...’ 文件名</span></span><br><span class="line">----条件(Pattern):</span><br><span class="line">一般使用关系表达式作为条件</span><br><span class="line">x &gt; 10  判断变量 x是否大于10</span><br><span class="line">x&gt;=10   大于等于</span><br><span class="line">x&lt;=10   小于等于</span><br><span class="line">----动作(Action):</span><br><span class="line">格式化输出</span><br><span class="line">流程控制语句</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi student.txt</span></span><br><span class="line">ID Name   PHP Linux MySQL Average</span><br><span class="line">1  Liming 82  95    86    87.66</span><br><span class="line">2  Sc     74  96    87    85.66</span><br><span class="line">3  Gao    99  83    93    91.66</span><br><span class="line">[root@localhost ~]<span class="comment"># awk '&#123;printf $2 "\t" $6 "\n"&#125;' student.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># df -h | awk '&#123;print $1 "\t" $3&#125;'</span></span><br></pre></td></tr></table></figure><p>BEGIN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># awk 'BEGIN&#123;printf "This is a transcript \n" &#125;&#123;printf $2 "\t" $6 "\n"&#125;' student.txt</span></span><br></pre></td></tr></table></figure><p>END</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># awk 'END&#123;printf "The End \n" &#125; &#123;printf $2 "\t" $6 "\n"&#125;' student.txt</span></span><br></pre></td></tr></table></figure><p>FS内置变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/passwd | grep "/bin/bash" | \awk 'BEGIN &#123;FS=":"&#125; &#123;printf $1 "\t" $3 "\n"&#125;'</span></span><br></pre></td></tr></table></figure><p>关系运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat student.txt | grep -v Name | \awk '$6 &gt;= 87 &#123;printf $2 "\n" &#125;'</span></span><br></pre></td></tr></table></figure><h4 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h4><blockquote><p>sed 是一种几乎包括在所有 UNIX 平台( 包括 Linux)的轻量级流编辑器。sed主要 是用来将数据进行选取、替换、删除、新 增的命令。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sed [选项] ‘[动作]’ 文件名</span></span><br><span class="line">选项:</span><br><span class="line">-n:   一般sed命令会把所有数据都输出到屏幕 ,如果加入此选择,则只会把经过         sed命令处理的行输出到屏幕</span><br><span class="line">-e:   允许对输入数据应用多条sed命令编辑</span><br><span class="line">-i:   用sed的修改结果直接修改读取数据的文件,而不是由屏幕输出</span><br><span class="line">动作:</span><br><span class="line">a\:   追加,在当前行后添加一行或多行。添加多行时,除最后 一行</span><br><span class="line">      外,每行末尾需要用“\”代表数据未完结。</span><br><span class="line">c\:   行替换,用c后面的字符串替换原数据行,替换多行时,除最</span><br><span class="line">      后一行外,每行末尾需用“\”代表数据未完结。</span><br><span class="line">i\:   插入,在当期行前插入一行或多行。插入多行时,除最后 一行</span><br><span class="line">      ,每行末尾需要用“\”代表数据未完结。</span><br><span class="line">d:    删除,删除指定的行。</span><br><span class="line">p:    打印,输出指定的行。</span><br><span class="line">s:    字串替换,用一个字符串替换另外一个字符串。格式为“行范</span><br><span class="line">      围s/旧字串/新字串/g”(和vim中的替换格式类似) 。</span><br></pre></td></tr></table></figure><p>学生成绩表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi student.txt</span></span><br><span class="line">ID Name   PHP Linux MySQL Average</span><br><span class="line">1  Liming 82  95    86    87.66</span><br><span class="line">2  Sc     74  96    87    85.66</span><br><span class="line">3  Gao    99  83    93    91.66</span><br></pre></td></tr></table></figure><p>行数据操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sed '2p' student.txt</span></span><br><span class="line"><span class="comment">#查看文件的第二行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed -n '2p' student.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed '2,4d' student.txt</span></span><br><span class="line"><span class="comment"># 删除第二行到第四行的数据,但不修改文件本身</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed '2a hello' student.txt</span></span><br><span class="line"><span class="comment"># 在第二行后追加 hello</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sed '2i hello \world' student.txt</span></span><br><span class="line"><span class="comment"># 在第二行前插入两行数据</span></span><br><span class="line"><span class="comment"># sed '2c No such person‘ student.txt</span></span><br><span class="line"><span class="comment"># 数据替换</span></span><br></pre></td></tr></table></figure><p>字符串替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed ‘s/旧字串/新字串/g’ 文件名</span></span><br><span class="line"><span class="comment"># sed '3s/74/99/g' student.txt</span></span><br><span class="line"><span class="comment"># 在第三行中,把 74 换成 99</span></span><br><span class="line"><span class="comment">#sed -i '3s/74/99/g' student.txt</span></span><br><span class="line"><span class="comment">#sed操作的数据直接写入文件</span></span><br><span class="line"><span class="comment"># sed -e 's/Liming//g ; s/Gao//g' student.txt</span></span><br><span class="line"><span class="comment"># 同时把“ Liming ”和“ Gao ”替换为空</span></span><br></pre></td></tr></table></figure><h3 id="字符处理命令"><a href="#字符处理命令" class="headerlink" title="字符处理命令"></a>字符处理命令</h3><h4 id="排序命令sort"><a href="#排序命令sort" class="headerlink" title="排序命令sort"></a>排序命令sort</h4><p>[root@localhost ~]# sort [选项] 文件名<br>选项:<br>-f:               忽略大小写<br>-n:             以数值型进行排序,默认使用字符串型排序<br>-r:              反向排序<br>-t:              指定分隔符,默认是分隔符是制表符<br>-k n[,m]:   按照指定的字段范围排序。从第n字段开始,m字段结束(默认到行尾)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sort /etc/passwd</span></span><br><span class="line"><span class="comment"># 排序用户信息文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sort -r /etc/passwd</span></span><br><span class="line"><span class="comment"># 反向排序</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sort -t ":" -k 3,3 /etc/passwd</span></span><br><span class="line"><span class="comment"># 指定分隔符是“:”,用第三字段开头,第三字段结尾排</span></span><br><span class="line">序,就是只用第三字段排序</span><br><span class="line">[root@localhost ~]<span class="comment"># sort -n -t ":" -k 3,3 /etc/passwd</span></span><br></pre></td></tr></table></figure><h4 id="统计命令wc"><a href="#统计命令wc" class="headerlink" title="统计命令wc"></a>统计命令wc</h4><p>[root@localhost ~]# wc [选项] 文件名<br>选项:<br>-l:     只统计行数<br>-w:   只统计单词数<br>-m:   只统计字符数</p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ol><li><p>按照文件类型进行判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>-b 文件</td><td>判断该文件是否存在,并且是否为块设备文件(是块设备文件 为真)</td></tr><tr><td>-c 文件</td><td>判断该文件是否存在,并且是否为字符设备文件(是字符设备 文件为真)</td></tr><tr><td>-d 文件</td><td>判断该文件是否存在,并且是否为目录文件(是目录为真)</td></tr><tr><td>-e 文件</td><td>判断该文件是否存在(存在为真)</td></tr><tr><td>-f 文件</td><td>判断该文件是否存在,并且是否为普通文件(是普通文件为真)</td></tr><tr><td>-L 文件</td><td>判断该文件是否存在,并且是否为符号链接文件(是符号链接 文件为真)</td></tr><tr><td>-p 文件</td><td>判断该文件是否存在,并且是否为管道文件(是管道文件为真)</td></tr><tr><td>-s 文件</td><td>判断该文件是否存在,并且是否为非空(非空为真)</td></tr><tr><td>-S 文件</td><td>判断该文件是否存在,并且是否为套接字文件(是套接字文件 为真)</td></tr></tbody></table><p> 两种判断格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># test -e /root/install.log</span></span><br><span class="line">[root@localhost ~]<span class="comment"># [ -e /root/install.log ]</span></span><br><span class="line">[ -d /root ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"yes"</span> || <span class="built_in">echo</span> <span class="string">"no"</span></span><br><span class="line"><span class="comment"># 第一个判断命令如果正确执行,则打印“ yes ”,否则打</span></span><br><span class="line">印“ no ”</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>按照文件权限进行判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>-r</td><td>判断该文件是否存在,并且是否该文件拥有读权限(有读 权限为真)</td></tr><tr><td>-w</td><td>判断该文件是否存在,并且是否该文件拥有写权限(有写 权限为真)</td></tr><tr><td>-x</td><td>判断该文件是否存在,并且是否该文件拥有执行权限(有执行权限为真)</td></tr><tr><td>-u</td><td>判断该文件是否存在,并且是否该文件拥有SUID权限(有SUID权限为真)</td></tr><tr><td>-g</td><td>判断该文件是否存在,并且是否该文件拥有SGID权限(有SGID权限为真)</td></tr><tr><td>-k</td><td>判断该文件是否存在,并且是否该文件拥有SBit权限(有SBit权限为真)</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ -w student.txt ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br><span class="line"># 判断文件是拥有写权限的</span><br></pre></td></tr></table></figure></li><li><p>两个文件之间进行比较</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>文件1 -nt 文件2</td><td>判断文件1的修改时间是否比文件2的新(如果新则为真)</td></tr><tr><td>文件1 -ot 文件2</td><td>判断文件1的修改时间是否比文件2的旧(如果旧则为真)</td></tr><tr><td>文件1 -ef 文件2</td><td>判断文件1是否和文件2的Inode号一致,可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的方法</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln /root/student.txt /tmp/stu.txt</span><br><span class="line"># 创建个硬链接吧</span><br><span class="line">[ /root/student.txt -ef /tmp/stu.txt ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br><span class="line">yes</span><br><span class="line"># 用 test 测试下,果然很有用</span><br></pre></td></tr></table></figure></li><li><p>两个整数之间比较</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>整数1 -eq 整数２</td><td>判断整数1是否和整数2相等(相等为真)</td></tr><tr><td>整数1 -ne 整数２</td><td>判断整数1是否和整数2不相等(不相等位置)</td></tr><tr><td>整数1 -gt 整数2</td><td>判断整数1是否大于整数2(大于为真)</td></tr><tr><td>整数1 -lt 整数2</td><td>判断整数1是否小于整数2(小于位置)</td></tr><tr><td>整数1 -ge 整数2</td><td>判断整数1是否大于等于整数2(大于等于为真)</td></tr><tr><td>整数1 -le 整数2</td><td>判断整数1是否小于等于整数2(小于等于为真)</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ 23 -ge 22 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br><span class="line">yes</span><br><span class="line"># 判断 23 是否大于等于 22 ,当然是了</span><br><span class="line">[ 23 -le 22 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br><span class="line">no</span><br><span class="line"># 判断 23 是否小于等于 22 ,当然不是了</span><br></pre></td></tr></table></figure></li><li><p>字符串的判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>-z 字符串</td><td>判断字符串是否为空(为空返回真)</td></tr><tr><td>-n 字符串</td><td>判断字符串是否为非空(非空返回真)</td></tr><tr><td>字串1 ==字串2</td><td>判断字符串1是否和字符串2相等(相等返回真)</td></tr><tr><td>字串1 != 字串2</td><td>判断字符串1是否和字符串2不相等(不相等返回真)</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name=sc</span><br><span class="line"># 给 name 变量赋值</span><br><span class="line">[ -z &quot;$name&quot; ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br><span class="line">no</span><br><span class="line"># 判断 name 变量是否为空,因为不为空,所</span><br><span class="line">以返回 no</span><br><span class="line">aa=11</span><br><span class="line">bb=22</span><br><span class="line"># 给变量 aa 和变量 bb 赋值</span><br><span class="line">[ &quot;$aa&quot; == &quot;bb&quot; ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br><span class="line">no</span><br><span class="line"># 判断两个变量的值是否相等,明显不相等</span><br><span class="line">,所以返回 no</span><br></pre></td></tr></table></figure></li><li><p>多重条件判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>判断1 -a 判断2</td><td>逻辑与,判断1和判断2都成立,最终的结果才为真</td></tr><tr><td>判断1 -o 判断2</td><td>逻辑或,判断1和判断2有一个成立,最终的结果就为真</td></tr><tr><td>!判断</td><td>逻辑非,使原始的判断式取反</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aa=11</span><br><span class="line">[ -n &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br><span class="line">no</span><br><span class="line"># 判断变量 aa 是否有值,同时判断变量 aa 的是否大于 23</span><br><span class="line"># 因为变量 aa 的值不大于 23 ,所以虽然第一个判断值为真,</span><br><span class="line">返回的结果也是假</span><br><span class="line">aa=24</span><br><span class="line">[ -n &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br><span class="line">yes</span><br></pre></td></tr></table></figure></li></ol><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><ol><li><p>单分支if条件语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ];then</span><br><span class="line">  程序</span><br><span class="line">fi</span><br><span class="line">或者</span><br><span class="line">if [ 条件判断式 ]</span><br><span class="line">  then</span><br><span class="line">      程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>单分支条件语句需要注意几个点</p><ul><li>if语句使用fi结尾,和一般语言使用大括号结尾不同</li><li>[ 条件判断式 ]就是使用test命令判断,所以中括号和条件判断式之间必须有空格</li><li>then后面跟符合条件之后执行的程序,可以放在[]之后,用“;”分割。也可以换<br>行写入,就不需要“;”了</li></ul><p>例子:判断分区使用率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#统计根分区使用率</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line">rate=$(df -h | grep <span class="string">"/dev/sda3"</span> | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">"%"</span> -f1)</span><br><span class="line"><span class="comment">#把根分区使用率作为变量值赋予变量 rate</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$rate</span> -ge 80 ]</span><br><span class="line">   <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"Warning! /dev/sda3 is full!!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>双分支if条件语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">     条件成立时,执行的程序</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     条件不成立时,执行的另一个程序</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>例子1:备份mysql数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#备份 mysql 数据库。</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line">ntpdate asia.pool.ntp.org &amp;&gt;/dev/null</span><br><span class="line"><span class="comment">#同步系统时间</span></span><br><span class="line">date=$(date +%y%m%d)</span><br><span class="line"><span class="comment">#把当前系统时间按照“年月日”格式赋予变量 date</span></span><br><span class="line">size=$(du -sh /var/lib/mysql)</span><br><span class="line"><span class="comment">#统计 mysql 数据库的大小,并把大小赋予 size 变量</span></span><br><span class="line"><span class="keyword">if</span> [ -d /tmp/dbbak ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Date : <span class="variable">$date</span>!"</span> &gt; /tmp/dbbak/dbinfo.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Data size : <span class="variable">$size</span>"</span> &gt;&gt; /tmp/dbbak/dbinfo.txt</span><br><span class="line"><span class="built_in">cd</span> /tmp/dbbak</span><br><span class="line">tar -zcf mysql-lib-<span class="variable">$date</span>.tar.gz /var/lib/mysql &amp;&gt;/dev/null</span><br><span class="line">rm -rf /tmp/dbbak/dbinfo.txt</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mkdir /tmp/dbbak</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Date : <span class="variable">$date</span>!"</span> &gt; /tmp/dbbak/dbinfo.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Data size : <span class="variable">$size</span>"</span> &gt;&gt; /tmp/dbbak/dbinfo.txt</span><br><span class="line"><span class="built_in">cd</span> /tmp/dbbak dbinfo.txt</span><br><span class="line">tar -zcf mysql-lib-<span class="variable">$date</span>.tar.gz /var/lib/mysql dbinfo.txt &amp;&gt;/dev/null</span><br><span class="line">rm -rf /tmp/dbbak/dbinfo.txt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>例子2:判断apache是否启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Author: finyorko</span><br><span class="line">port=$(nmap -sT 192.168.1.156 | grep tcp | grep http | awk &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">#使用nmap命令扫描服务器,并截取apache服务的状态,赋予变量port</span><br><span class="line">if [ &quot;$port&quot; == &quot;open&quot; ]</span><br><span class="line">then</span><br><span class="line">echo “$(date) httpd is ok!” &gt;&gt; /tmp/autostart-acc.log</span><br><span class="line">else</span><br><span class="line">/etc/rc.d/init.d/httpd start &amp;&gt;/dev/null</span><br><span class="line">echo &quot;$(date) restart httpd !!&quot; &gt;&gt; /tmp/autostart-err.log</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>多分支if条件语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件判断式1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">当条件判断式1成立时,执行程序1</span><br><span class="line"><span class="keyword">elif</span> [ 条件判断式2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">当条件判断式2成立时,执行程序2</span><br><span class="line">„省略更多条件 ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">当所有条件都不成立时,最后执行此程序</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#判断用户输入的是什么文件</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input a filename: "</span> file</span><br><span class="line"><span class="comment">#接收键盘的输入,并赋予变量 file</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$file</span>"</span> ]</span><br><span class="line"><span class="comment">#判断 file 变量是否为空</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Error,please input a filename"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [ ! -e <span class="string">"<span class="variable">$file</span>"</span> ]</span><br><span class="line"><span class="comment">#判断 file 的值是否存在</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Your input is not a file!"</span></span><br><span class="line"><span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">elif</span> [ -f <span class="string">"<span class="variable">$file</span>"</span> ]</span><br><span class="line"><span class="comment">#判断 file 的值是否为普通文件</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is a regulare file!"</span></span><br><span class="line"><span class="keyword">elif</span> [ -d <span class="string">"<span class="variable">$file</span>"</span> ]</span><br><span class="line"><span class="comment">#判断 file 的值是否为目录文件</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is a directory!"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is an other file!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h4><p>多分支case条件语句</p><p>case语句和if…elif…else语句一样都是多分支条件语句,不过和if多分支条件语句不同的是,case语句只能判断一种条件关系,而if语句可以判断多种条件关系。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名 <span class="keyword">in</span></span><br><span class="line"><span class="string">"值1"</span>)</span><br><span class="line">如果变量的值等于值1,则执行程序1</span><br><span class="line">;;</span><br><span class="line"><span class="string">"值2"</span>)</span><br><span class="line">如果变量的值等于值2,则执行程序2</span><br><span class="line">;;</span><br><span class="line">...省略其他分支...</span><br><span class="line">*)</span><br><span class="line">如果变量的值都不是以上的值,则执行此程序</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#判断用户输入</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please choose yes/no: "</span> -t 30 cho</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$cho</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">"yes"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Your choose is yes!"</span></span><br><span class="line">;;</span><br><span class="line">    <span class="string">"no"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Your choose is no!"</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Your choose is error!"</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><ul><li><p>语法一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 值1 值2 值3...</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#打印时间</span></span><br><span class="line"><span class="comment"># Author: finyorkp</span></span><br><span class="line"><span class="keyword">for</span> time <span class="keyword">in</span> morning noon afternoon evening</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This time is <span class="variable">$time</span>!"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#批量解压缩脚本</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line"><span class="built_in">cd</span> /lamp</span><br><span class="line">ls *.tar.gz &gt; ls.log</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(cat ls.log)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">tar -zxf <span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">rm -rf /lamp/ls.log</span><br></pre></td></tr></table></figure></li><li><p>语法二</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( 初始值;循环控制条件;变量变化 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 从 1 加到 100</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line"></span><br><span class="line">s=0</span><br><span class="line"><span class="keyword">for</span> (( i=1;i&lt;=100;i=i+1 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">s=$(( <span class="variable">$s</span>+<span class="variable">$i</span> ))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The sum of 1+2+...+100 is : <span class="variable">$s</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#批量添加指定数量的用户</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input user name: "</span> -t 30 name</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input the number of users: "</span> -t 30 num</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input the password of users: "</span> -t 30 pass</span><br><span class="line"><span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$name</span>"</span> -a ! -z <span class="string">"<span class="variable">$num</span>"</span> -a ! -z <span class="string">"<span class="variable">$pass</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">y=$(<span class="built_in">echo</span> <span class="variable">$num</span> | sed <span class="string">'s/[0-9]//g'</span>)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$y</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="keyword">for</span> (( i=1;i&lt;=<span class="variable">$num</span>;i=i+1 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">/usr/sbin/useradd <span class="variable">$name</span><span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span> | /usr/bin/passwd --stdin<span class="variable">$name</span><span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="while循环与until循环"><a href="#while循环与until循环" class="headerlink" title="while循环与until循环"></a>while循环与until循环</h4><ol><li><p>while循环<br>while循环是不定循环,也称作条件循环 。只要条件判断式成立,循环就会一直继 续,直到条件判断式不成立,循环才会停 止。这就和for的固定循环不太一样了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#从1加到100</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line">s=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 100 ]</span><br><span class="line"><span class="comment">#如果变量 i 的值小于等于 100 ,则执行循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">s=$(( <span class="variable">$s</span>+<span class="variable">$i</span> ))</span><br><span class="line">i=$(( <span class="variable">$i</span>+1 ))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The sum is: <span class="variable">$s</span>"</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>until循环<br>until循环,和while循环相反,until循环时 只要条件判断式不成立则进行循环,并执 行循环程序。一旦循环条件成立,则终止 循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ 条件判断式 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#从1加到100</span></span><br><span class="line"><span class="comment"># Author: finyorko</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line">s=0</span><br><span class="line">until [ <span class="variable">$i</span> -gt 100 ]</span><br><span class="line"><span class="comment">#循环直到变量 i 的值大于 100 ,就停止循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">s=$(( <span class="variable">$s</span>+<span class="variable">$i</span> ))</span><br><span class="line">i=$(( <span class="variable">$i</span>+1 ))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The sum is: <span class="variable">$s</span>"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Linux服务管理"><a href="#Linux服务管理" class="headerlink" title="Linux服务管理"></a>Linux服务管理</h2><h3 id="服务简介与分类"><a href="#服务简介与分类" class="headerlink" title="服务简介与分类"></a>服务简介与分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[Linux服务]</span><br><span class="line">    A --&gt;D[RPM包安装的服务]</span><br><span class="line">    A --&gt;E[源码包安装的服务]</span><br><span class="line">    D --&gt;F[独立的服务]</span><br><span class="line">    D --&gt;G[基于xinetd服务]</span><br></pre></td></tr></table></figure><p>启动与自启动</p><ul><li>服务启动:就是在当前系统中让服务运行,并提供功能。</li><li>服务自启动:自启动是指让服务在系统开机或重启动之后,随着系统的启动而自动启动服务。</li></ul><p>查询已安装的服务</p><ul><li><p>RPM包安装的服务</p><p>chkconfig –list</p></li></ul><p>​       #查看服务自启动状态,可以看到所有 RPM 包安装的服务</p><ul><li>源码包安装的服务<br>查看服务安装位置,一般是/usr/local/下</li></ul><p>RPM安装服务和源码包安装服务的区别</p><ul><li>RPM安装服务和源码包安装服务的区别<br>就是安装位置的不同</li></ul><h3 id="RPM包安装服务的管理"><a href="#RPM包安装服务的管理" class="headerlink" title="RPM包安装服务的管理"></a>RPM包安装服务的管理</h3><h4 id="独立服务的管理"><a href="#独立服务的管理" class="headerlink" title="独立服务的管理"></a>独立服务的管理</h4><ol><li><p>RPM包安装服务的位置</p><ul><li>RPM安装服务和源码包安装服务的区别就是安装位置的不同<ul><li>源码包安装在指定位置,一般是/usr/local/</li><li>RPM包安装在默认位置中</li></ul></li><li>/etc/init.d/:启动脚本位置</li><li>/etc/sysconfig/:初始化环境配置文件位置</li><li>/etc/:配置文件位置</li><li>/etc/xinetd.conf:xinetd配置文件</li><li>/etc/xinetd.d/:基于xinetd服务的启动脚本</li><li>/var/lib/:服务产生的数据放在这里</li><li>/var/log/:日志</li></ul></li><li><p>独立服务的启动</p><ul><li>/etc/init.d/独立服务名 start|stop|status|restart|</li><li>service 独立服务名 start|stop|restart||status</li></ul></li><li><p>独立服务的自启动</p><ul><li>chkconfig [–level 运行级别] [独立服务名] [on|off]</li><li>修改/etc/rc.d/rc.local文件</li><li>使用ntsysv命令管理自启动</li></ul></li></ol><h4 id="基于xinetd服务的管理"><a href="#基于xinetd服务的管理" class="headerlink" title="基于xinetd服务的管理"></a>基于xinetd服务的管理</h4><ol><li><p>安装xinetd与telnet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install xinetd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum -y install telnet-server</span></span><br></pre></td></tr></table></figure></li><li><p>xinetd服务的启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi /etc/xinetd.d/telnet</span></span><br><span class="line">service telnet      <span class="comment">#服务的名称为 telnet</span></span><br><span class="line">&#123;</span><br><span class="line">flags    = REUSE     <span class="comment">#标志为 REUSE ,设定 TCP/IP socket 可重用</span></span><br><span class="line">socket_type = stream <span class="comment">#使用 TCP 协议数据包</span></span><br><span class="line"><span class="built_in">wait</span>  = no           <span class="comment">#允许多个连接同时连接</span></span><br><span class="line">user= root           <span class="comment">#启动服务的用户为 root</span></span><br><span class="line">server= /usr/sbin/in.telnetd <span class="comment">#服务的启动程序</span></span><br><span class="line">log_on_failure += USERID     <span class="comment">#登陆失败后,记录用户的 ID</span></span><br><span class="line"><span class="built_in">disable</span>= no          <span class="comment">#服务不启动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启xinetd服务</p><figure class="highlight plain"><figcaption><span>~]# service xinetd restart```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. xinetd服务的自启动</span><br><span class="line"></span><br><span class="line">   - `[root@localhost ~]# chkconfig telnet on`</span><br><span class="line">   - `ntsysv`</span><br><span class="line"></span><br><span class="line">### 源码包安装服务的管理</span><br><span class="line"></span><br><span class="line">1. 源码包安装服务的启动</span><br><span class="line"></span><br><span class="line">   - 使用绝对路径,调用启动脚本来启动。不同的源码包的启动脚本不同。可以查看源码包的安装说明,查看启动脚本的方法。</span><br><span class="line">   - /usr/local/apache2/bin/apachectl start|stop</span><br><span class="line"></span><br><span class="line">2. 源码包服务的自启动</span><br><span class="line">   `[root@localhost ~]# vi /etc/rc.d/rc.local`</span><br><span class="line">   加入</span><br><span class="line">   `/usr/local/apache2/bin/apachectl start`</span><br><span class="line"></span><br><span class="line">3. 让源码包服务被服务管理命令识别</span><br><span class="line"></span><br><span class="line">   - 让源码包的apache服务能被service命令管理启动</span><br><span class="line">     `ln -s /usr/local/apache2/bin/apachectl /etc/init.d/apache`</span><br><span class="line"></span><br><span class="line">   - 让源码包的apache服务能被chkconfig与ntsysv命令管理自启动</span><br><span class="line"></span><br><span class="line">     ```bash</span><br><span class="line">     vi /etc/init.d/apache</span><br><span class="line">     # chkconfig: 35 86 76</span><br><span class="line">     # 指定 httpd 脚本可以被 chkconfig 命令管理 。 格式是:</span><br><span class="line">     chkconfig : 运行级别 启动顺序 关闭顺序</span><br><span class="line">     # description: source package apache</span><br><span class="line">     # 说明,内容随意</span><br><span class="line">     [root@localhost ~]# chkconfig --add apache</span><br><span class="line">     #把源码包apache加入chkconfig命令</span><br></pre></td></tr></table></figure></li></ol><h3 id="服务管理总结"><a href="#服务管理总结" class="headerlink" title="服务管理总结"></a>服务管理总结</h3><p><img src="https://pic.superbed.cn/item/5deb9969f1f6f81c504b865e.png" alt></p><h2 id="Linux系统管理"><a href="#Linux系统管理" class="headerlink" title="Linux系统管理"></a>Linux系统管理</h2><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="进程查看"><a href="#进程查看" class="headerlink" title="进程查看"></a>进程查看</h4><ol><li><p>进程简介<br>进程是正在执行的一个程序或命令,每一个进程都是一个运行的实体,都有自己的地址空间,并占用一定的系统资源。</p></li><li><p>进程管理的作用</p><ul><li>判断服务器健康状态</li><li>查看系统中所有进程</li><li>杀死进程</li></ul></li><li><p>查看系统中所有进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps aux</span><br><span class="line"># 查看系统中所有进程,使用 BSD 操作系统格式</span><br><span class="line">[root@localhost ~]# ps -le</span><br><span class="line"># 查看系统中所有进程,使用 Linux 标准命令格式。</span><br><span class="line"></span><br><span class="line">USER:该进程是由哪个用户产生的;</span><br><span class="line">PID:进程的ID号;</span><br><span class="line">%CPU:该进程占用CPU资源的百分比,占用越高,进程越耗费资源;</span><br><span class="line">%MEM:该进程占用物理内存的百分比,占用越高,进程越耗费资源;</span><br><span class="line">VSZ:该进程占用虚拟内存的大小,单位KB;</span><br><span class="line">RSS:该进程占用实际物理内存的大小,单位KB;</span><br><span class="line">TTY:该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端,tty1-tty6是本地的字符界面终端,tty7是图形终端。pts/0-255代表虚拟终端。</span><br><span class="line">STAT:进程状态。常见的状态有:R:运行、S:睡眠、T:停止状态、s:包含子进 程、+:位于后台</span><br><span class="line">START:该进程的启动时间</span><br><span class="line">TIME:该进程占用CPU的运算时间,注意不是系统时间</span><br><span class="line">OMMAND:产生此进程的命令名</span><br></pre></td></tr></table></figure></li><li><p>查看系统健康状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># top [选项]</span></span><br><span class="line">选项:</span><br><span class="line">-d 秒数: 指定top命令每隔几秒更新。默认是3秒</span><br><span class="line">在top命令的交互模式当中可以执行的命令:</span><br><span class="line">?或h:  显示交互模式的帮助</span><br><span class="line">P:     以CPU使用率排序,默认就是此项</span><br><span class="line">M:     以内存的使用率排序</span><br><span class="line">N:     以PID排序</span><br><span class="line">q:     退出top</span><br></pre></td></tr></table></figure><ul><li><p>第一行信息为任务队列信息</p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>12:26:46</td><td>系统当前时间</td></tr><tr><td>up 1 day, 13:32</td><td>系统的运行时间,本机已经运行1天13小时32分钟</td></tr><tr><td>2 users</td><td>当前登录了两个用户</td></tr><tr><td>load average:0.00,0.00, 0.00</td><td>系统在之前1分钟,5分钟,15分钟 的平均负载。一般认为小于1时,负载较小。如果大于1,系统已经超出负荷。</td></tr></tbody></table></li><li><p>第二行为进程信息</p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Tasks: 95 total</td><td>系统中的进程总数</td></tr><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>94 sleeping</td><td>睡眠的进程</td></tr><tr><td>0 stopped</td><td>正在停止的进程</td></tr><tr><td>0 zombie</td><td>僵尸进程。如果不是0,需要手工检查僵尸进程</td></tr></tbody></table></li><li><p>第三行为CPU信息</p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Cpu(s): 0.1%us</td><td>用户模式占用的CPU百分比</td></tr><tr><td>0.1%sy</td><td>系统模式占用的CPU百分比</td></tr><tr><td>0.0%ni</td><td>改变过优先级的用户进程占用的CPU百分比</td></tr><tr><td>99.7%id</td><td>空闲CPU的CPU百分比</td></tr><tr><td>0.1%wa</td><td>空闲CPU的CPU百分比比</td></tr><tr><td>0.0%hi</td><td>硬中断请求服务占用的CPU百分比</td></tr><tr><td>0.1%si</td><td>软中断请求服务占用的CPU百分比</td></tr><tr><td>0.0%st</td><td>st(Steal time)虚拟时间百分比。就是当有虚拟机时 ,虚拟CPU等待实际CPU的时间百分比。</td></tr></tbody></table></li><li><p>第四行为物理内存信息</p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Mem:625344k total</td><td>物理内存的总量,单位KB</td></tr><tr><td>571504k used</td><td>已经使用的物理内存数量</td></tr><tr><td>53840k free</td><td>空闲的物理内存数量,我们使用的是虚拟机,总共只分配了628MB内存,所以只有53MB的空闲内存了</td></tr><tr><td>65800k buffers</td><td>作为缓冲的内存数量</td></tr></tbody></table></li><li><p>第五行为交换分区(swap)信息</p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Swap:524280k total</td><td>交换分区(虚拟内存)的总大小</td></tr><tr><td>0k used</td><td>已经使用的交互分区的大小</td></tr><tr><td>524280k free</td><td>空闲交换分区的大小</td></tr><tr><td>409280k cached</td><td>作为缓存的交互分区的大小</td></tr></tbody></table></li></ul></li><li><p>查看进程树</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pstree [选项]</span></span><br><span class="line">选项:</span><br><span class="line">-p:  显示进程的PID</span><br><span class="line">-u:  显示进程的所属用户</span><br></pre></td></tr></table></figure></li></ol><h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><ol><li><p>kill命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># kill –l</span></span><br><span class="line"><span class="comment"># 查看可用的进程信号</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>信号代号</th><th>信号代号</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>SIGHUP</td><td>该信号让进程立即关闭,然后重新读取配置文件之后重启。</td></tr><tr><td>2</td><td>SIGINT</td><td>程序终止信号,用于终止前台进程。相当于输出ctrl+c快捷键。</td></tr><tr><td>8</td><td>SIGFPE</td><td>在发生致命的算术运算错误时发出. 不仅包括浮点运算错误,还包括溢出及除数为0等其它所有的算术的错误。</td></tr><tr><td>9</td><td>SIGKILL</td><td>用来立即结束程序的运行. 本信号不能被阻塞、处理和忽略。一般用于强制终止进程</td></tr><tr><td>14</td><td>SIGALRM</td><td>时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号。</td></tr><tr><td>15</td><td>SIGTERM</td><td>正常结束进程的信号,kill命令的默认信号。有时如果进程已经发生问题,这个信号是无法正常终止进程的,我们才会尝试SIGKILL信号,也就是信号9。</td></tr><tr><td>18</td><td>SIGCONT</td><td>该信号可以让暂停的进程恢复执行,本信号不能被阻断</td></tr><tr><td>19</td><td>SIGSTOP</td><td>该信号可以暂停前台进程,相当于输入ctrl+z快捷键。本信号不能被阻断。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># kill -1 22354</span></span><br><span class="line"><span class="comment"># 重启进程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># kill -9 22368</span></span><br><span class="line"><span class="comment"># 强制杀死进程</span></span><br></pre></td></tr></table></figure></li><li><p>killall命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># killall [选项][信号] 进程名</span></span><br><span class="line"><span class="comment"># 按照进程名杀死进程</span></span><br><span class="line">选项:</span><br><span class="line">-i:   交互式,询问是否要杀死某个进程</span><br><span class="line">-I:   忽略进程名的大小写</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>pkill命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pkill [选项] [信号] 进程名</span></span><br><span class="line"><span class="comment"># 按照进程名终止进程</span></span><br><span class="line">选项:</span><br><span class="line">-t 终端号:按照终端号踢出用户</span><br></pre></td></tr></table></figure><p>按照终端号踢出用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># w</span></span><br><span class="line"><span class="comment"># 使用 w 命令查询本机已经登录的用户</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pkill -t -9 pts/1</span></span><br><span class="line"><span class="comment"># 强制杀死从 pts/1 虚拟终端登录的进程</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="工作管理"><a href="#工作管理" class="headerlink" title="工作管理"></a>工作管理</h3><ol><li><p>把进程放入后台</p><ul><li>tar -zcf etc.tar.gz /etc &amp;</li><li>[root@localhost ~]# top<br>#在 top 命令执行的过程中,按下 ctrl+z 快捷键</li></ul></li><li><p>查看后台的工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jobs [-l]</span></span><br><span class="line">选项:</span><br><span class="line">-l:  显示工作的PID</span><br><span class="line">注:“ + ”号代表最近一个放入后台的工作,也是工作恢复时,默认恢复的工作。“ - ”号代表倒数第二个放入后台的工作</span><br></pre></td></tr></table></figure></li><li><p>将后台暂停的工作恢复到前台执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># fg %工作号</span></span><br><span class="line">参数:</span><br><span class="line">%工作号: %号可以省略,但是注意工作号和PID的区别</span><br></pre></td></tr></table></figure></li><li><p>把后台暂停的工作恢复到后台执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># bg %工作号</span></span><br></pre></td></tr></table></figure><p>注:后台恢复执行的命令,是不能和前台有交互的,否则不能恢复到后台执行</p></li></ol><h3 id="系统资源查看"><a href="#系统资源查看" class="headerlink" title="系统资源查看"></a>系统资源查看</h3><h4 id="vmstat命令监控系统资源"><a href="#vmstat命令监控系统资源" class="headerlink" title="vmstat命令监控系统资源"></a>vmstat命令监控系统资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vmstat [刷新延时 刷新次数]</span><br><span class="line">例如:</span><br><span class="line">[root@localhost proc]# vmstat 1 3</span><br></pre></td></tr></table></figure><h4 id="dmesg开机时内核检测信息"><a href="#dmesg开机时内核检测信息" class="headerlink" title="dmesg开机时内核检测信息"></a>dmesg开机时内核检测信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# dmesg</span><br><span class="line">[root@localhost ~]# dmesg | grep CPU</span><br></pre></td></tr></table></figure><h4 id="free命令查看内存使用状态"><a href="#free命令查看内存使用状态" class="headerlink" title="free命令查看内存使用状态"></a>free命令查看内存使用状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# free [-b|-k|-m|-g]</span><br><span class="line">选项:</span><br><span class="line">-b:  以字节为单位显示</span><br><span class="line">-k:  以KB为单位显示,默认就是以KB为单位显示</span><br><span class="line">-m:  以MB为单位显示</span><br><span class="line">-g:  以GB为单位显示</span><br></pre></td></tr></table></figure><p>缓存和缓冲的区别</p><p>简单来说缓存(cache)是用来加速数据 从硬盘中“读取”的,而缓冲(buffer) 是用来加速数据“写入”硬盘的。</p><h4 id="查看CPU信息"><a href="#查看CPU信息" class="headerlink" title="查看CPU信息"></a>查看CPU信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /proc/cpuinfo</span><br></pre></td></tr></table></figure><h4 id="uptime命令"><a href="#uptime命令" class="headerlink" title="uptime命令"></a>uptime命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# uptime</span><br><span class="line"># 显示系统的启动时间和平均负载,也就是 top 命令的第一行。 w 命令也可以看到这个数据。</span><br></pre></td></tr></table></figure><h4 id="查看系统与内核相关信息"><a href="#查看系统与内核相关信息" class="headerlink" title="查看系统与内核相关信息"></a>查看系统与内核相关信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# uname [选项]</span><br><span class="line">选项:</span><br><span class="line">-a: 查看系统所有相关信息;</span><br><span class="line">-r: 查看内核版本;</span><br><span class="line">-s: 查看内核名称。</span><br></pre></td></tr></table></figure><p>判断当前系统的位数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# file /bin/ls</span><br></pre></td></tr></table></figure><p>查询当前Linux系统的发行版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# lsb_release -a</span><br></pre></td></tr></table></figure><h4 id="列出进程打开或使用的文件信息"><a href="#列出进程打开或使用的文件信息" class="headerlink" title="列出进程打开或使用的文件信息"></a>列出进程打开或使用的文件信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# lsof [选项]</span><br><span class="line">#列出进程调用或打开的文件的信息</span><br><span class="line">选项:</span><br><span class="line">-c 字符串:只列出以字符串开头的进程打开的文件</span><br><span class="line">-u 用户名:只列出某个用户的进程打开的文件</span><br><span class="line">-p pid:列出某个PID进程打开的文件</span><br></pre></td></tr></table></figure><h3 id="系统定时任务"><a href="#系统定时任务" class="headerlink" title="系统定时任务"></a>系统定时任务</h3><h4 id="crond服务管理与访问控制"><a href="#crond服务管理与访问控制" class="headerlink" title="crond服务管理与访问控制"></a>crond服务管理与访问控制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# service crond restart</span><br><span class="line">[root@localhost ~]# chkconfig crond on</span><br></pre></td></tr></table></figure><h4 id="用户的crontab设置"><a href="#用户的crontab设置" class="headerlink" title="用户的crontab设置"></a>用户的crontab设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# crontab [选项]</span><br><span class="line">选项:</span><br><span class="line">-e: 编辑crontab定时任务</span><br><span class="line">-l: 查询crontab任务</span><br><span class="line">-r: 删除当前用户所有的crontab任务</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# crontab -e</span><br><span class="line"># 进入 crontab 编辑界面。会打开 vim 编辑你的工作。</span><br><span class="line">* * * * * 执行的任务</span><br></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个“*”</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个“*”</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个“*”</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个“*”</td><td>一年当中的第几月</td><td>1-12</td></tr><tr><td>第五个“*”</td><td>一周当中的星期几</td><td>0-7(0和7都代表星期日)</td></tr></tbody></table><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一次的意思。</td></tr><tr><td>,</td><td>代表不连续的时间。比如“0 8,12,16 * * * 命令”,就代表在每天的8点0分,12点0分,16点0分都执行一次命令</td></tr><tr><td>-</td><td>代表连续的时间范围。比如“0 5 * * 1-6命令”,代表在周一到周六的凌晨5点0分执行命令</td></tr><tr><td>*/n</td><td>代表每隔多久执行一次。比如“*/10 * * * * 命令”,代表每隔10分钟就执行一遍命令</td></tr></tbody></table><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td>45 22 * * * 命令</td><td>在22点45分执行命令</td></tr><tr><td>0 17 * * 1 命令</td><td>每周1 的17点0分执行命令</td></tr><tr><td>0 5 1,15 * * 命令</td><td>每月1号和15号的凌晨5点0分执行命令</td></tr><tr><td>40 4 * * 1-5 命令</td><td>每周一到周五的凌晨4点40分执行命令</td></tr><tr><td>*/10 4 * * * 命令</td><td>每天的凌晨4点,每隔10分钟执行一次命令</td></tr><tr><td>0 0 1,15 * 1 命令</td><td>每月1号和15号,每周1的0点0分都会执行命令。注意:星期几和几号最好不要同时出现,因为他们定义的都是天。非常容易让管理员混乱。</td></tr></tbody></table><p>举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*/5 * * * * /bin/echo ”11” &gt;&gt; /tmp/test</span><br><span class="line">5 5 * * 2 /sbin/shutdown -r now</span><br><span class="line">0 5 1,10,15 * * /root/sh/autobak.sh</span><br></pre></td></tr></table></figure><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h3 id="日志管理简介"><a href="#日志管理简介" class="headerlink" title="日志管理简介"></a>日志管理简介</h3><h4 id="日志服务"><a href="#日志服务" class="headerlink" title="日志服务"></a>日志服务</h4><ul><li>在CentOS 6.x中日志服务已经由rsyslogd取代了原先的syslogd服务。rsyslogd日志服务更加先进,功能更多。但是不论该服务的使用,还是日志文件的格式其实都是和syslogd服务相兼容的,所以学习起来基本和syslogd服务一致。</li><li>rsyslogd的新特点:<ul><li>基于TCP网络协议传输日志信息;</li><li>更安全的网络传输方式;</li><li>有日志消息的及时分析框架;</li><li>后台数据库;</li><li>配置文件中可以写简单的逻辑判断;</li><li>与syslog配置文件相兼容。</li></ul></li></ul><blockquote><p> 确定服务启动</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps aux | grep rsyslogd</span><br><span class="line"># 查看服务是否启动</span><br><span class="line">chkconfig --list | grep rsyslog</span><br><span class="line"># 查看服务是否自启动</span><br></pre></td></tr></table></figure><h4 id="常见日志的作用"><a href="#常见日志的作用" class="headerlink" title="常见日志的作用"></a>常见日志的作用</h4><table><thead><tr><th>日志文件</th><th>说明</th></tr></thead><tbody><tr><td>/var/log/cron</td><td>记录了系统定时任务相关的日志</td></tr><tr><td>/var/log/cups/</td><td>记录打印信息的日志</td></tr><tr><td>/var/log/dmesg</td><td>记录了系统在开机时内核自检的信息。也可以使用dmesg命令直接查看内核自检信息。</td></tr><tr><td>/var/log/btmp</td><td>记录错误登录的日志。这个文件是二进制文件,不能直接vi查看,而要使用lastb命令查看,命令如下:<br>[root@localhost log]# lastb<br>root   tty1   Tue Jun 4 22:38 - 22:38  (00:00)<br>#有人在 6 月 4 日 22:38 使用 root 用户,在本地终端 1 登录错误</td></tr><tr><td>/var/log/lastlog</td><td>记录系统中所有用户最后一次的登录时间的日志。这个文件也是二进制文件,不能直接vi,而要使用lastlogog命令查看。</td></tr><tr><td>/var/log/mailog</td><td>记录邮件信息。</td></tr><tr><td>/var/log/message</td><td>记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大 多数重要信息,如果系统出现问题时,首先要检查的就应该是这个 日志文件。</td></tr><tr><td>/var/log/secure</td><td>记录验证和授权方面的信息,只要涉及账户和密码的程序都会记录。 比如说系统的登录,ssh的登录,su切换用户,sudo授权,甚至添加 用户和修改用户密码都会记录在这个日志文件中。</td></tr><tr><td>/var/log/wtmp</td><td>永久记录所有用户的登录、注销信息,同时记录系统的启动、重启、 关机事件。同样这个文件也是一个二进制文件,不能直接vi,而需 要使用last命令来查看。</td></tr><tr><td>/var/run/utmp</td><td>记录当前已经登录的用户的信息。这个文件会随着用户的登录和注 销而不断变化,只记录当前登录用户的信息。同样这个文件不能直 接vi,而要使用w,who,users等命令来查询。</td></tr></tbody></table><ul><li>除了系统默认的日志之外,采用RPM方 式安装的系统服务也会默认把日志记录在 /var/log/目录中(源码包安装的服务日志 是在源码包指定目录中)。不过这些日志 不是由rsyslogd服务来记录和管理的,而 是各个服务使用自己的日志管理文档来记 录自身日志。</li></ul><table><thead><tr><th>日志文件</th><th>说明</th></tr></thead><tbody><tr><td>/var/log/httpd/</td><td>RPM包安装的apache服务的默认日志目录</td></tr><tr><td>/var/log/mail/</td><td>RPM包安装的邮件服务的额外日志目录</td></tr><tr><td>/var/log/samba/</td><td>RPM包安装的samba服务的日志目录</td></tr><tr><td>/var/log/sssd/</td><td>守护进程安全服务目录</td></tr></tbody></table><h3 id="rsyslogd日志服务"><a href="#rsyslogd日志服务" class="headerlink" title="rsyslogd日志服务"></a>rsyslogd日志服务</h3><h4 id="日志文件格式"><a href="#日志文件格式" class="headerlink" title="日志文件格式"></a>日志文件格式</h4><ul><li>基本日志格式包含以下四列:<ul><li>事件产生的时间;</li><li>发生事件的服务器的主机名;</li><li>产生事件的服务名或程序名;</li><li>事件的具体信息。</li></ul></li></ul><h4 id="etc-rsyslog-conf配置文件"><a href="#etc-rsyslog-conf配置文件" class="headerlink" title="/etc/rsyslog.conf配置文件"></a>/etc/rsyslog.conf配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">authpriv.*                       /var/log/secure</span><br><span class="line"># 服务名称 [ 连接符号 ] 日志等级    日志记录位置</span><br><span class="line">#认证相关服务 . 所有日志等级        记录在/var/log/secure 日志中</span><br></pre></td></tr></table></figure><p><strong>服务名称</strong></p><table><thead><tr><th>服务名称</th><th>说明</th></tr></thead><tbody><tr><td>auth</td><td>安全和认证相关消息(不推荐使用authpriv替代)</td></tr><tr><td>authpriv</td><td>安全和认证相关消息(私有的)</td></tr><tr><td>cron</td><td>系统定时任务cront和at产生的日志</td></tr><tr><td>daemon</td><td>和各个守护进程相关的日志</td></tr><tr><td>ftp</td><td>ftp守护进程产生的日志</td></tr><tr><td>kern</td><td>内核产生的日志(不是用户进程产生的)</td></tr><tr><td>local0-local7</td><td>为本地使用预留的服务</td></tr><tr><td>lpr</td><td>打印产生的日志</td></tr><tr><td>mail</td><td>邮件收发信息</td></tr><tr><td>news</td><td>与新闻服务器相关的日志</td></tr><tr><td>syslog</td><td>有syslogd服务产生的日志信息(虽然服务名称已经改为rsyslogd,但是很多配置都还是沿用了syslogd的,这里并没有修改服务名)。</td></tr><tr><td>user</td><td>用户等级类别的日志信息</td></tr><tr><td>uucp</td><td>uucp子系统的日志信息,uucp是早期linux系统进行数据传递的协议,后来也常用在新闻组服务中。</td></tr></tbody></table><p><strong>连接符号</strong></p><ul><li>连接符号可以识别为:<ul><li>“*”代表所有日志等级,比如:“authpriv.<em>”代表authpriv认证信息服务产生的日志,所有的日志等级都记录</em></li><li>“.”代表只要比后面的等级高的(包含该等级)日志都记录下来。比如:“cron.info”代表cron服务产生的日志,只要日志等级大于等于info级别,就记录</li><li>“.=”代表只记录所需等级的日志,其他等级的都不记录。比如:“*.=emerg”代表人和日志服务产生的日志,只要等级是emerg等级就记录。这种用法及少见,了解就好</li><li>“.!”代表不等于,也就是除了该等级的日志外,其他等级的日志都记录。</li></ul></li></ul><p><strong>日志等级</strong></p><table><thead><tr><th>等级名称</th><th>说明</th></tr></thead><tbody><tr><td>debug</td><td>一般的调试信息说明</td></tr><tr><td>info</td><td>基本的通知信息</td></tr><tr><td>notice</td><td>普通信息,但是有一定的重要性</td></tr><tr><td>warning</td><td>警告信息,但是还不回影响到服务或系统的运行</td></tr><tr><td>err</td><td>错误信息,一般达到err等级的信息以及可以影响到服务或系</td></tr><tr><td>crit</td><td>临界状况信息,比err等级还要严重</td></tr><tr><td>alert</td><td>警告状态信息,比crit还要严重。必须立即采取行动</td></tr><tr><td>emerg</td><td>疼痛等级信息,系统已经无法使用了</td></tr></tbody></table><p><strong>日志记录位置</strong></p><ul><li>日志文件的绝对路径,如“/var/log/secure”</li><li>系统设备文件,如“/dev/lp0”</li><li>转发给远程主机,如“@192.168.0.210:514”</li><li>用户名,如“root”</li><li>忽略或丢弃日志,如“~”</li></ul><h3 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h3><h4 id="日志文件的命名规则"><a href="#日志文件的命名规则" class="headerlink" title="日志文件的命名规则"></a>日志文件的命名规则</h4><ul><li>如果配置文件中拥有“dateext”参数,那 么日志会用日期来作为日志文件的后缀, 例如“secure-20130605”。这样的话日志 文件名不会重叠,所以也就不需要日志文 件的改名,只需要保存指定的日志个数, 删除多余的日志文件即可。</li><li>如果配置文件中没有“dateext”参数,那么日 志文件就需要进行改名了。当第一次进行日志 轮替时,当前的“secure”日志会自动改名为 “secure.1”,然后新建“secure”日志,用来 保存新的日志。当第二次进行日志轮替时, “secure.1”会自动改名为“secure.2”,当前的 “secure”日志会自动改名为“secure.1”,然 后也会新建“secure”日志,用来保存新的日志 ,以此类推。</li></ul><h4 id="logrotate配置文件"><a href="#logrotate配置文件" class="headerlink" title="logrotate配置文件"></a>logrotate配置文件</h4><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>daily</td><td>日志的轮替周期是每天</td></tr><tr><td>weekly</td><td>日志的轮替周期是每周</td></tr><tr><td>monthly</td><td>日志的轮替周期是每月</td></tr><tr><td>rotate 数字</td><td>保留的日志文件的个数。0指没有备份</td></tr><tr><td>compress</td><td>日志轮替时,旧的日志进行压缩</td></tr><tr><td>create mode owner group</td><td>建立新日志,同时指定新日志的权限与所有者和所属组。如create 0600 root utmp</td></tr><tr><td>mail address</td><td>当日志轮替时,输出内容通过邮件发送到指定的邮件地址。如mail <a href="mailto:finyorko@163.com" target="_blank" rel="noopener">finyorko@163.com</a></td></tr><tr><td>missingok</td><td>如果日志不存在,则忽略该日志的警告信息</td></tr><tr><td>notifempty</td><td>如果日志为空文件,则不进行日志轮替</td></tr><tr><td>minsize 大小</td><td>日志轮替的最小值。也就是日志一定要达到这个最小值才会轮替,否则就算时间达到也不轮替</td></tr><tr><td>size 大小</td><td>日志只有大于指定大小才进行日志轮替,而不是按照时间轮替。如size 100k</td></tr><tr><td>dateext</td><td>使用日期作为日志轮替文件的后缀。如secure-20130605</td></tr></tbody></table><h4 id="把apache日志加入轮替"><a href="#把apache日志加入轮替" class="headerlink" title="把apache日志加入轮替"></a>把apache日志加入轮替</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/logrotate.conf</span><br><span class="line">/usr/local/apache2/logs/access_log &#123;</span><br><span class="line">daily</span><br><span class="line">create</span><br><span class="line">rotate 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="logrotate命令"><a href="#logrotate命令" class="headerlink" title="logrotate命令"></a>logrotate命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# logrotate [选项] 配置文件名</span><br><span class="line">选项:</span><br><span class="line">如果此命令没有选项,则会按照配置文件中的条件进行</span><br><span class="line">日志轮替</span><br><span class="line">-v: 显示日志轮替过程。加了-v选项,会显示日志的轮替的过程</span><br><span class="line">-f: 强制进行日志轮替。不管日志轮替的条件是否已经符合,强制配置文件中所有的日志进行轮替</span><br></pre></td></tr></table></figure><h2 id="启动管理"><a href="#启动管理" class="headerlink" title="启动管理"></a>启动管理</h2><h3 id="CentOS-6-x启动管理"><a href="#CentOS-6-x启动管理" class="headerlink" title="CentOS 6.x启动管理"></a>CentOS 6.x启动管理</h3><h4 id="系统运行级别-1"><a href="#系统运行级别-1" class="headerlink" title="系统运行级别"></a>系统运行级别</h4><ol><li><p>运行级别</p><table><thead><tr><th>运行级别</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>关机</td></tr><tr><td>1</td><td>单用户模式,可以想象为windows的安全模式,主要用于系统修复</td></tr><tr><td>2</td><td>不完全的命令行模式,不含NFS服务</td></tr><tr><td>3</td><td>完全的命令行模式,就是标准字符界面</td></tr><tr><td>4</td><td>系统保留</td></tr><tr><td>5</td><td>图形模式</td></tr><tr><td>6</td><td>重启动</td></tr></tbody></table></li><li><p>运行级别命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# runlevel</span><br><span class="line"># 查看运行级别命令</span><br><span class="line">[root@localhost ~]# init 运行级别</span><br><span class="line"># 改变运行级别命令</span><br></pre></td></tr></table></figure></li><li><p>系统默认运行级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/inittab</span><br><span class="line">id:3:initdefault:</span><br><span class="line"># 系统开机后直接进入哪个运行级别</span><br></pre></td></tr></table></figure></li></ol><h4 id="系统启动过程"><a href="#系统启动过程" class="headerlink" title="系统启动过程"></a>系统启动过程</h4><p><strong>initramfs内存文件系统</strong></p><p>CentOS 6.x中使用initramfs内存文件系统 取代了CentOS 5.x中的initrd RAM Disk。 他们的作用类似,可以通过启动引导程序 加载到内存中,然后加载启动过程中所需 要的内核模块,比如USB、SATA、SCSI 硬盘的驱动和LVM、RAID文件系统的驱 动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir /tmp/initramfs</span><br><span class="line"># 建立测试目录</span><br><span class="line">cp /boot/initramfs-2.6.32-279.el6.i686.img /tmp/initramfs/</span><br><span class="line"># 复制 initramfs 文件</span><br><span class="line">cd /tmp/initramfs/</span><br><span class="line">file initramfs-2.6.32-279.el6.i686.img</span><br><span class="line">mv initramfs-2.6.32-279.el6.i686.img initramfs-2.6.32-279.el6.i686.img.gz</span><br><span class="line"># 修改文件的后缀名为 .gz</span><br><span class="line">gunzip initramfs-2.6.32-279.el6.i686.img.gz</span><br><span class="line"># 解压缩</span><br><span class="line">file initramfs-2.6.32-279.el6.i686.img</span><br><span class="line">cpio -ivcdu &lt; initramfs-2.6.32-279.el6.i686.img</span><br><span class="line"># 解压缩</span><br></pre></td></tr></table></figure><p><strong>调用/etc/init/rcS.conf配置文件</strong></p><ul><li>主要功能是两个:<ul><li>先调用/etc/rc.d/rc.sysinit,然后由/etc/rc.d/rc.sysinit配置文件进行Linux系统初始化。</li><li>然后再调用/etc/inittab,然后由/etc/inittab配<br>置文件确定系统的默认运行级别</li></ul></li></ul><p><strong>由/etc/rc.d/rc.sysinit初始化</strong></p><p>1、获得网络环境<br>2、挂载设备<br>3、开机启动画面Plymouth(取替了过往的 RHGB)<br>4、判断是否启用SELinux<br>5、显示于开机过程中的欢迎画面<br>6、初始化硬件<br>7、用户自定义模块的加载<br>8、配置内核的参数<br>9、设置主机名<br>10、同步存储器<br>11、设备映射器及相关的初始化<br>12、初始化软件磁盘阵列(RAID)<br>13、初始化 LVM 的文件系统功能<br>14、检验磁盘文件系统(fsck)<br>15、设置磁盘配额(quota)<br>16、重新以可读写模式挂载系统磁盘<br>17、更新quota(非必要)<br>18、启动系统虚拟随机数生成器<br>19、配置机器(非必要)<br>20、清除开机过程当中的临时文件<br>21、创建ICE目录<br>22、启动交换分区(swap)<br>23、将开机信息写入/var/log/dmesg文件中</p><p><strong>调用/etc/rc.d/rc文件</strong></p><ul><li>运行级别参数传入/etc/rc.d/rc这个脚本之后,由这个脚本文件按照不同的运行级别启动/etc/rc[0-6].d/目录中的相应的程序<ul><li>/etc/rc3.d/k??开头的文件(??是数字),会按照数字顺序依次关闭</li><li>/etc/rc3.d/S??开头的文件(??是数字),会按照数字顺序依次启动</li></ul></li></ul><h3 id="启动引导程序grub"><a href="#启动引导程序grub" class="headerlink" title="启动引导程序grub"></a>启动引导程序grub</h3><h4 id="Grub配置文件"><a href="#Grub配置文件" class="headerlink" title="Grub配置文件"></a>Grub配置文件</h4><ol><li><p>grub中分区表示</p><table><thead><tr><th>硬盘</th><th>分区</th><th>Linux中设备文件名</th><th>Grub 中 设 备 文 件名</th></tr></thead><tbody><tr><td>第一块SCSI硬盘</td><td>第一个主分区</td><td>/dev/sda1</td><td>hd(0,0)</td></tr><tr><td></td><td>第二个主分区</td><td>/dev/sda2</td><td>hd(0,1)</td></tr><tr><td></td><td>扩展分区</td><td>/dev/sda3</td><td>hd(0,2)</td></tr><tr><td></td><td>第一个逻辑分区</td><td>/dev/sda5</td><td>hd(0,4)</td></tr><tr><td>第二块SCSI硬盘</td><td>第一个主分区</td><td>/dev/sdb1</td><td>hd(1,0)</td></tr><tr><td></td><td>第二个主分区</td><td>/dev/sdb2</td><td>hd(1,1)</td></tr><tr><td></td><td>扩展分区</td><td>/dev/sdb3</td><td>hd(1,2)</td></tr><tr><td></td><td>第一个逻辑分区</td><td>/dev/sdb5</td><td>hd(1,4)</td></tr></tbody></table></li><li><p>grub配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vi /boot/grub/grub.conf</span><br><span class="line"></span><br><span class="line">default=0  默认启动第一个系统</span><br><span class="line"></span><br><span class="line">timeout=5  等待时间,默认是5秒</span><br><span class="line"></span><br><span class="line">splashimage=(hd0,0)/grub/splash.xpm.gz  这里是指定grub启动时的背景图像文件的保存位置的</span><br><span class="line"></span><br><span class="line">hiddenmenu  隐藏菜单</span><br><span class="line"></span><br><span class="line">title CentOS (2.6.32-279.el6.i686) title就是标题的意思</span><br><span class="line"></span><br><span class="line">root (hd0,0)  是指启动程序的保存分区</span><br><span class="line"></span><br><span class="line">kernel /vmlinuz-2.6.32-279.el6.i686 ro</span><br><span class="line">root=UUID=b9a7a1a8-767f-4a87-8a2b-a535edb362c9</span><br><span class="line">rd_NO_LUKS KEYBOARDTYPE=pc KEYTABLE=us</span><br><span class="line">rd_NO_MD crashkernel=auto LANG=zh_CN.UTF-8</span><br><span class="line">rd_NO_LVM rd_NO_DM rhgb quiet</span><br><span class="line">  定义内核加载时的选项</span><br><span class="line">  </span><br><span class="line">initrd /initramfs-2.6.32-279.el6.i686.img  指定了initramfs内存文件系统镜像文件的所在位置</span><br></pre></td></tr></table></figure></li></ol><h4 id="Grub加密与字符界面分辨率调整"><a href="#Grub加密与字符界面分辨率调整" class="headerlink" title="Grub加密与字符界面分辨率调整"></a>Grub加密与字符界面分辨率调整</h4><ol><li><p>grub加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# grub-md5-crypt</span><br><span class="line">#生成加密密码串</span><br><span class="line">[root@localhost ~]# vi /boot/grub/grub.conf</span><br><span class="line">default=0</span><br><span class="line">timeout=5</span><br><span class="line">password --md5</span><br><span class="line">$1$Y84LB1$8tMY2PibScmuOCc8z8U35/</span><br><span class="line">#password 选项放在整体设置处。</span><br><span class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">...省略部分内容...</span><br></pre></td></tr></table></figure></li><li><p>纯字符界面分辨率调整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;CONFIG_FRAMEBUFFER_CONSOLE&quot; /boot/config-2.6.32-279.el6.i686</span><br><span class="line">#查询内核是否支持分辨率修改</span><br></pre></td></tr></table></figure><table><thead><tr><th>色深</th><th>640×480</th><th>800×600</th><th>1024×768</th><th>1280×1024</th></tr></thead><tbody><tr><td>8位</td><td>769</td><td>771</td><td>773</td><td>775</td></tr><tr><td>15位</td><td>784</td><td>787</td><td>790</td><td>793</td></tr><tr><td>16位</td><td>785</td><td>788</td><td>791</td><td>794</td></tr><tr><td>32位</td><td>786</td><td>789</td><td>792</td><td>795</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /boot/grub/grub.conf</span><br><span class="line">kernel /vmlinuz-2.6.32-279.el6.i686 ro</span><br><span class="line">root=UUID=b9a7a1a8-767f-4a87-8a2b-</span><br><span class="line">a535edb362c9 rd_NO_LUKS</span><br><span class="line">KEYBOARDTYPE=pc KEYTABLE=us</span><br><span class="line">rd_NO_MD crashkernel=auto LANG=zh_CN.UTF-</span><br><span class="line">8 rd_NO_LVM rd_NO_DM rhgb quiet vga=791</span><br></pre></td></tr></table></figure></li></ol><h3 id="系统修复模式"><a href="#系统修复模式" class="headerlink" title="系统修复模式"></a>系统修复模式</h3><h4 id="单用户模式"><a href="#单用户模式" class="headerlink" title="单用户模式"></a>单用户模式</h4><p>单用户模式常见的错误修复</p><ul><li>遗忘root密码</li><li>修改系统默认运行级别</li></ul><h4 id="光盘修复模式"><a href="#光盘修复模式" class="headerlink" title="光盘修复模式"></a>光盘修复模式</h4><p>重要系统文件丢失,导致系统无法启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bash-4.1# chroot /mnt/sysimage</span><br><span class="line"># 改变主目录</span><br><span class="line">sh-4.1# cd /root</span><br><span class="line">sh-4.1# rpm -qf /etc/inittab</span><br><span class="line"># 查询下 /etc/inittab 文件属于哪个包。</span><br><span class="line">sh-4.1# mkdir /mnt/cdrom</span><br><span class="line"># 建立挂载点</span><br><span class="line">sh-4.1# mount /dev/sr0 /mnt/cdrom</span><br><span class="line"># 挂载光盘</span><br><span class="line">sh-4.1# rpm2cpio \</span><br><span class="line">/mnt/cdrom/Packages/initscripts-8.45.3-1.i386.rpm \</span><br><span class="line">| cpio -idv ./etc/inittab</span><br><span class="line"># 提取 inittab 文件到当前目录</span><br><span class="line">sh-4.1# cp etc/inittab /etc/inittab</span><br><span class="line"># 复制 inittab 文件到指定位置</span><br></pre></td></tr></table></figure><h4 id="Linux的安全性"><a href="#Linux的安全性" class="headerlink" title="Linux的安全性"></a>Linux的安全性</h4><p><img src="https://pic.superbed.cn/item/5decb2c0f1f6f81c507c7b22.png" alt></p><h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><h3 id="备份概述"><a href="#备份概述" class="headerlink" title="备份概述"></a>备份概述</h3><h4 id="Linux系统需要备份的数据"><a href="#Linux系统需要备份的数据" class="headerlink" title="Linux系统需要备份的数据"></a>Linux系统需要备份的数据</h4><ul><li>/root/目录:</li><li>/home/目录:</li><li>/var/spool/mail/目录:</li><li>/etc/目录:</li><li>其他目录:</li></ul><p><strong>安装服务的数据</strong></p><ul><li>apache需要备份的数据<ul><li>配置文件</li><li>网页主目录</li><li>日志文件</li></ul></li><li>mysql需要备份的数据<ul><li>源码包安装的mysql:/usr/local/mysql/data/</li><li>RPM包安装的mysql:/var/lib/mysql/</li></ul></li></ul><h4 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h4><ul><li><p>完全备份:完全备份就是指把所有需要备份的数据全部备份,当然完全备份可以备<br>份整块硬盘,整个分区或某个具体的目录</p></li><li><p>增量备份<br><img src="https://pic2.superbed.cn/item/5decb3e7f1f6f81c507cbd5e.png" alt></p></li><li><p>差异备份<br><img src="https://pic2.superbed.cn/item/5decb3d5f1f6f81c507cbac8.png" alt></p></li></ul><h3 id="dump和restore命令"><a href="#dump和restore命令" class="headerlink" title="dump和restore命令"></a>dump和restore命令</h3><h4 id="dump命令"><a href="#dump命令" class="headerlink" title="dump命令"></a>dump命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# dump [选项] 备份之后的文件名 原文件或目录</span><br><span class="line">选项:</span><br><span class="line">-level: 就是我们说的0-9十个备份级别</span><br><span class="line">-f 文件名: 指定备份之后的文件名</span><br><span class="line">-u: 备份成功之后,把备份时间记录在/etc/dumpdates文件</span><br><span class="line">-v: 显示备份过程中更多的输出信息</span><br><span class="line">-j: 调用bzlib库压缩备份文件,其实就是把备份文件压缩为.bz2格式,默认压缩等级是2</span><br><span class="line">-W: 显示允许被dump的分区的备份等级及备份时间</span><br></pre></td></tr></table></figure><p><strong>备份分区</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dump -0uj -f /root/boot.bak.bz2 /boot/</span><br><span class="line"># 备份命令。先执行一次完全备份,并压缩和更新备份时间</span><br><span class="line">cat /etc/dumpdates</span><br><span class="line"># 查看备份时间文件</span><br><span class="line">cp install.log /boot/</span><br><span class="line"># 复制日志文件到 /boot 分区</span><br><span class="line">dump -1uj -f /root/boot.bak1.bz2 /boot/</span><br><span class="line"># 增量备份 /boot 分区,并压缩</span><br><span class="line">dump –W</span><br><span class="line"># 查询分区的备份时间及备份级别的</span><br></pre></td></tr></table></figure><p><strong>备份文件或目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dump -0j -f /root/etc.dump.bz2 /etc/</span><br><span class="line"># 完全备份 /etc/ 目录,只能使用 0 级别进行完全备份,而不再支持增量备份</span><br></pre></td></tr></table></figure><h4 id="restore命令"><a href="#restore命令" class="headerlink" title="restore命令"></a>restore命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# restore [模式选项] [选项]</span><br><span class="line">模式选项:restore命令常用的模式有以下四种,这四个模式不能混用。</span><br><span class="line">-C:比较备份数据和实际数据的变化</span><br><span class="line">-i: 进入交互模式,手工选择需要恢复的文件。</span><br><span class="line">-t: 查看模式,用于查看备份文件中拥有哪些数据。</span><br><span class="line">-r: 还原模式,用于数据还原 。</span><br><span class="line">选项:</span><br><span class="line">-f: 指定备份文件的文件名</span><br></pre></td></tr></table></figure><p><strong>比较备份数据和实际数据的变化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv /boot/vmlinuz-2.6.32-279.el6.i686 /boot/vmlinuz-2.6.32-279.el6.i686.bak</span><br><span class="line"># 把 /boot 目录中内核镜像文件改个名字</span><br><span class="line">restore -C -f /root/boot.bak.bz2</span><br><span class="line">#restore 发现内核镜像文件丢失</span><br></pre></td></tr></table></figure><p><strong>查看模式</strong></p><p><code>restore -t -f boot.bak.bz2</code></p><p><strong>还原模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 还原 boot.bak.bz2 分区备份</span><br><span class="line"># 先还原完全备份的数据</span><br><span class="line">mkdir boot.test</span><br><span class="line">cd boot.test/</span><br><span class="line">restore -r -f /root/boot.bak.bz2</span><br><span class="line"># 解压缩</span><br><span class="line">restore -r -f /root/boot.bak1.bz2</span><br><span class="line"># 恢复增量备份数据</span><br><span class="line"></span><br><span class="line"># 还原 /etc/ 目录的备份 etc.dump.bz2</span><br><span class="line">restore -r -f etc.dump.bz2</span><br><span class="line"># 还原 etc.dump.bz2 备份</span><br></pre></td></tr></table></figure><div style="display: none">哈哈我是注释，不会在浏览器中显示。我也是注释。</div><!--哈哈我是注释，不会在浏览器中显示。--><!--哈哈我是多段注释，不会在浏览器中显示。-->]]></content>
      
      
      <categories>
          
          <category> -Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="/learngit.html"/>
      <url>/learngit.html</url>
      
        <content type="html"><![CDATA[<h3 id="Git学习"><a href="#Git学习" class="headerlink" title="Git学习"></a>Git学习</h3><h4 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h4><h5 id="在liunx上安装Git"><a href="#在liunx上安装Git" class="headerlink" title="在liunx上安装Git"></a>在liunx上安装Git</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure><h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><ol><li>创建空目录 <code>mkdir dir_name</code></li><li>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库 </li></ol><h4 id="时光穿梭机"><a href="#时光穿梭机" class="headerlink" title="时光穿梭机"></a>时光穿梭机</h4><h5 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">$ git log --pretty=oneline</span><br></pre></td></tr></table></figure><p><code>git log</code>命令显示从最近到最远的提交日志 </p><p> 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code></p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">$ git reset --hard commit_id //知道commit_id的情况</span><br></pre></td></tr></table></figure><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p><p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到某个版本后，又想回到后面修改的版本，Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h5 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h5><ol><li><p>工作区就是在电脑里能看到的目录</p></li><li><p>版本库</p><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p></li></ol><p><img src="https://pic.superbed.cn/item/5dd4e29a8e0e2e3ee94ccc0e.jpg" alt></p><p>把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><h5 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h5><p>提交后，用<code>git diff HEAD -- file_name</code>命令可以查看工作区和版本库里面最新版本的区别。</p><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中 </p><h5 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h5><p>撤销工作区的修改： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- file_name //在add之前</span><br></pre></td></tr></table></figure><p>撤销暂存区修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD file_name  //已经add ，执行会放回工作区</span><br><span class="line">$ git checkout -- file_name</span><br></pre></td></tr></table></figure><h6 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h6><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file_name</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file_name</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，就用版本回退的知识，不过前提是没有推送到远程库。</p><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm file_name</span><br><span class="line">$ git rm file_name</span><br><span class="line">$ git commit -m &quot;info&quot;</span><br></pre></td></tr></table></figure><p>还有一种情况是工作区中的文件被误删(<code>rm file_name</code>), 此时我们可以使用版本库中的文件对其进行恢复操作. 即使用<code>git checkout -- file_name</code> 即使用版本库中的文件(暂存区或版本库)对工作区文件恢复.</p><p>如果是使用<code>git rm file_name</code> 对文件删除, 则是先删除工作区文件, 在进行了一次add, 即将暂存区的文件也删除了, 此时如果想要恢复则应该先恢复暂存区的文件<code>git reset HEAD file_name</code>, 再恢复工作区文件 <code>git checkout -- file_name</code></p><p>这里删除文件而后上传到远程仓库, 远程仓库中文件也会被删除.</p><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><h5 id="创建ssh"><a href="#创建ssh" class="headerlink" title="创建ssh"></a>创建ssh</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。 登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容</p><h5 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:finyorko/learngit.git</span><br></pre></td></tr></table></figure><h5 id="将代码传到GitHub"><a href="#将代码传到GitHub" class="headerlink" title="将代码传到GitHub"></a>将代码传到GitHub</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>第一次需要<code>-u</code>, Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><h5 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;name&gt;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;name&gt;// 创建分支</span><br><span class="line">$ git checkout &lt;name&gt; // 切换分支</span><br></pre></td></tr></table></figure><p>可以使用<code>git branch</code>显示工作目录下存在的分支以及当前所处分支 </p><p>切换分支也可以用 <code>git switch &lt;name&gt;</code></p><p>我们在dev中工作完成就可以将分支<name>合并到master</name></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;name&gt;</span><br></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;name&gt;</span><br><span class="line"></span><br><span class="line">$ git branch -D &lt;name&gt; 强行删除</span><br></pre></td></tr></table></figure><p>查看分支的合并情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">包括分支合并图、一行显示、提交校验码缩略显示</span><br></pre></td></tr></table></figure><h5 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h5><p>当我们在合并后, 常常会将分支删除, 此时我们就不知道了分支合并前的信息, 为了保留合并前信息, 我们在合并时要关闭<code>Fast forward</code> 使用如下命令合并即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><p>后面的-m是该命令调用了commit命令, 生成了一个存储合并前的文件.</p><h5 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h5><p>之前的合并均是在一个分支上没有变换, 另一个分支上发生了变换, 此时的合并规则较为简单, 当两个文件均发生了改变时, 会引起合并冲突.</p><p>此时在主分支合并时, git会告诉我们存在冲突, 而对应的工作区文件也会被git更改, 显示出冲突的位置, Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>(当前工作区冲突内容)，<code>=======</code>(分割)，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>(要合并的部分冲突内容)标记出不同分支的内容. 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><p>此时我们需要对该文件进行手动修复，删除分支， 然后再提交一遍即可. 提交就相当于告诉git修复完成， 对当前分支进行更新，修复主分支不会影响另一个分支，切换会另一个分支，其内容依旧是其更改之后的样子。</p><h5 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h5><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交， 并不是你不想提交，而是工作只进行到一半，还没法提交 </p><h6 id="存储工作区"><a href="#存储工作区" class="headerlink" title="存储工作区"></a>存储工作区</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure><p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git checkout -b issue-101</span><br></pre></td></tr></table></figure><p>现在修复bug，修复完提交： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;fix bug 101&quot;</span><br><span class="line">[issue-101 4c805e2] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101</span><br></pre></td></tr></table></figure><p>太棒了，bug修复完了！现在，是时候接着回到<code>dev</code>分支干活了！ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure><h6 id="恢复工作区"><a href="#恢复工作区" class="headerlink" title="恢复工作区"></a>恢复工作区</h6><p>刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure><p>恢复方法有两个:</p><ul><li>用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除 </li><li>用<code>git stash pop</code>，恢复的同时把stash内容也删了 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply stash@&#123;0&#125;</span><br><span class="line">$ git stash drop stash@&#123;n&#125;</span><br></pre></td></tr></table></figure><p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p><p>那怎么在dev分支上修复同样的bug？</p><p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。 </p><h5 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h5><h6 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h6><p>要查看远程库的信息，用<code>git remote</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>或者，用<code>git remote -v</code>显示更详细的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p><h6 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h6><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>如果要推送其他分支，比如<code>dev</code>，就改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><p><code>master</code>分支是主分支，因此要时刻与远程同步；</p></li><li><p><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p></li><li><p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p><p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！ </p></li></ul><h6 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h6><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p><p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone ...</span><br></pre></td></tr></table></figure><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><p> <code>dev</code>为克隆下来分支名称, <code>origin/dev</code>表示从远程克隆哪个分支. </p><p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add file_name</span><br><span class="line">git commit -m &quot;add file_name&quot;</span><br><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送 ，会推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream-to=origin/dev dev</span><br><span class="line">Branch &apos;dev&apos; set up to track remote branch &apos;dev&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure><p> 而后在使用 <code>git pull</code>. 此时可能会发生合并冲突,在本地进行更改,而后提交即可. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure><h6 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h6><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>  推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to  origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h5 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase</span><br></pre></td></tr></table></figure><p>rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。 </p><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><h5 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h5><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p><p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p><p>Git有commit，为什么还要引入tag？</p><p>“请把上周一的那个版本打包发布，commit号是6a5819e…”</p><p>“一串乱七八糟的数字不好找！”</p><p>如果换一个办法：</p><p>“请把上周一的那个版本打包发布，版本号是v1.2”</p><p>“好的，按照tag v1.2查找commit就行！”</p><p>所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p><h6 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h6><p>打标签首先切换到需要打标签的分支上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></figure><p> 然后，敲命令<code>git tag</code>就可以打一个新标签： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></table></figure><p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p><p>方法是找到历史提交的commit id，然后打上就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag tag_name commt-id</span><br></pre></td></tr></table></figure><p>在创建时添加说明文字:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a tag_name -m &quot;info&quot; commit_id</span><br></pre></td></tr></table></figure><p>其中用<code>-a</code>指定标签名，<code>-m</code>指定说明文字。</p><p>查看所有标签（ 标签不是按时间顺序列出，而是按字母排序的 ）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure><p>查看标签信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show tag_name</span><br></pre></td></tr></table></figure><p>会展示对应提交的相关信息.</p><h6 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h6><p>删除:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d tag_name</span><br></pre></td></tr></table></figure><p>推送标签到远程库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin tag_name</span><br></pre></td></tr></table></figure><p>一次性推送全部尚未推送到远程的本地标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure><p>删除远程标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先在本地删除.</span><br><span class="line">$ git tag -d tag_name</span><br><span class="line">再删除远程仓库</span><br><span class="line">$ git push origin :refs/tags/tag_name</span><br></pre></td></tr></table></figure><h4 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h4><h5 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h5><p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览 </p><p> [忽略文件][<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> ]</p><p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被<code>.gitignore</code>忽略了，如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -f file_name</span><br></pre></td></tr></table></figure><p>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v file_name</span><br></pre></td></tr></table></figure><h5 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h5><p>在输入命令时, 总会由于名字太长而不方便, 这时我们可以为命令配置一个简单的别名,此时我们只用输入简单的指令就能够实现一长串指令的操作岂不美滋滋. 语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.your_command origin_command</span><br></pre></td></tr></table></figure><p> <code>--global</code>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用， 如果不加，那只针对当前的仓库起作用 。</p><p>配置文件放哪了？每个仓库的Git配置文件都放在<code>.git/config</code>文件中</p><p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中 </p>]]></content>
      
      
      <categories>
          
          <category> -Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习笔记</title>
      <link href="/go_learning.html"/>
      <url>/go_learning.html</url>
      
        <content type="html"><![CDATA[<h3 id="Go语言学习笔记"><a href="#Go语言学习笔记" class="headerlink" title="Go语言学习笔记"></a>Go语言学习笔记</h3><h4 id="第一个Go程序"><a href="#第一个Go程序" class="headerlink" title="第一个Go程序"></a>第一个Go程序</h4><p>hello.go ，（Go 语言源文件的扩展是 .go），代码如下： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 要执行 Go 语言代码可以使用 <code>go run</code>命令。 </p><p> 执行以上代码输出: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run hello.go </span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p> 此外我们还可以使用 <code>go build</code>命令来生成二进制文件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go build hello.go </span><br><span class="line">$ ls</span><br><span class="line">hello    hello.go</span><br><span class="line">$ ./hello </span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h4 id="Go语言结构"><a href="#Go语言结构" class="headerlink" title="Go语言结构"></a>Go语言结构</h4><h5 id="GO-Hello-World-实例"><a href="#GO-Hello-World-实例" class="headerlink" title="GO Hello World 实例"></a>GO Hello World 实例</h5><p> Go 语言的基础组成有以下几个部分： </p><ul><li>包声明</li><li>引用包</li><li>函数</li><li>变量</li><li>语句&amp;表达式</li><li>注释</li></ul><p>通过实例来解释：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 这是我的第一个简单的程序 */</span></span><br><span class="line">   fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一行代码 <code>package main</code>定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。</li><li>下一行 <code>import &quot;fmt&quot;</code>告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。</li><li>下一行 <code>func main()</code> 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。</li><li>下一行<code>/*...*/</code>是注释，在程序执行时将被忽略。单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。</li><li>下一行<code>fmt.Println(...)</code>可以将字符串输出到控制台，并在最后自动增加换行字符 \n。<br>使用 <code>fmt.Print(&quot;hello, world\n&quot;)</code>可以得到相同的结果。<br>Print 和 Println 这两个函数也支持使用变量，如：<code>fmt.Println(arr)</code>。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。</li><li>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：<code>Group1</code>，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，如<code>group</code>，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</li></ol><h5 id="执行Go程序"><a href="#执行Go程序" class="headerlink" title="执行Go程序"></a>执行Go程序</h5><ul><li>输入命令 <em>go run hello.go</em> 并按回车执行代码 </li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> run hello.<span class="keyword">go</span></span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><ul><li>我们还可以使用 <strong>go build</strong> 命令来生成二进制文件： </li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> build hello.<span class="keyword">go</span> </span><br><span class="line">$ ls</span><br><span class="line">hello    hello.<span class="keyword">go</span></span><br><span class="line">$ ./hello </span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>需要注意的是<code>{</code>不能单独放在一行，所以以下代码在运行时会产生错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 错误，&#123; 不能在单独的行上</span></span><br><span class="line">  fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h5><ol><li><p>当前的调试部分可以使用 <strong>go run filename.go</strong> 来执行。 </p><p>可以生成一个 <strong>build.sh</strong> 脚本，用于在指定位置产生已编译好的 可执文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">CURRENT_DIR=`<span class="built_in">pwd</span>`</span><br><span class="line">OLD_GO_PATH=<span class="string">"<span class="variable">$GOPATH</span>"</span>  <span class="comment">#例如: /usr/local/go</span></span><br><span class="line">OLD_GO_BIN=<span class="string">"<span class="variable">$GOBIN</span>"</span>    <span class="comment">#例如: /usr/local/go/bin</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"<span class="variable">$CURRENT_DIR</span>"</span> </span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="string">"<span class="variable">$CURRENT_DIR</span>/bin"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定并整理当前的源码路径</span></span><br><span class="line">gofmt -w src</span><br><span class="line"></span><br><span class="line">go install test_hello</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"<span class="variable">$OLD_GO_PATH</span>"</span></span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="string">"<span class="variable">$OLD_GO_BIN</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>关于包，根据本地测试得出以下几点：</p></li></ol><ul><li>文件名与包名没有直接关系，不一定要将文件名与包名定成同一个。</li><li>文件夹名与包名没有直接关系，并非需要一致。</li><li>同一个文件夹下的文件只能有一个包名，否则编译报错。</li></ul><p>文件结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Test</span><br><span class="line">--helloworld.go</span><br><span class="line"></span><br><span class="line">myMath</span><br><span class="line">--myMath1.go</span><br><span class="line">--myMath2.go</span><br></pre></td></tr></table></figure><p>测试代码: </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helloworld.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"./myMath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello World!"</span>)</span><br><span class="line">    fmt.Println(mathClass.Add(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">    fmt.Println(mathClass.Sub(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myMath1.go</span></span><br><span class="line"><span class="keyword">package</span> mathClass</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myMath2.go</span></span><br><span class="line"><span class="keyword">package</span> mathClass</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sub</span><span class="params">(x,y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Go语言基础语法"><a href="#Go语言基础语法" class="headerlink" title="Go语言基础语法"></a>Go语言基础语法</h4><h5 id="Go标记"><a href="#Go标记" class="headerlink" title="Go标记"></a>Go标记</h5><p>Go 程序可以由多个标记组成，可以是关键字，标识符，常量，字符串，符号。如以下 GO 语句由 6 个标记组成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><p> 6 个标记是(每行一个)： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fmt</span><br><span class="line">.</span><br><span class="line">Println</span><br><span class="line">(</span><br><span class="line">&quot;Hello, World!&quot;</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h5 id="行分隔符"><a href="#行分隔符" class="headerlink" title="行分隔符"></a>行分隔符</h5><p>在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。</p><p>如果你打算将多个语句写在同一行，它们则必须使用 ; 人为区分，但在实际开发中我们并不鼓励这种做法。</p><p>以下为两个语句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"Hello, World!"</span>)</span><br><span class="line">fmt.Println(<span class="string">"行分隔符，一行一个语句"</span>)</span><br></pre></td></tr></table></figure><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>注释不会被编译，每一个包应该有相关注释。</p><p>单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。</p><p>多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾。</p><h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p>标识符用来命名变量、类型等程序实体。一个标识符实际上就是一个或是多个字母(A<del>Z和a</del>z)数字(0~9)、下划线_组成的序列，但是第一个字符必须是字母或下划线而不能是数字。 </p><p>以下是有效的标识符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mahesh   kumar   abc   move_name   a_123</span><br><span class="line">myname50   _temp   j   a23b9   retVal</span><br></pre></td></tr></table></figure><p>以下是无效的标识符：</p><ul><li>1ab（以数字开头）</li><li>case（Go 语言的关键字）</li><li>a+b（运算符是不允许的）</li></ul><h5 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h5><p> Go 语言的字符串可以通过<code>+</code>实现： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Google"</span> + <span class="string">"Runoob"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">GoogleRunoob</span><br></pre></td></tr></table></figure><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符：</p><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th><th>complex64</th><th>complex128</th><th>uint16</th></tr></thead><tbody><tr><td>copy</td><td>false</td><td>float32</td><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td><td>nil</td><td>panic</td><td>uint64</td></tr><tr><td>print</td><td>println</td><td>real</td><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></tbody></table><h5 id="Go-语言的空格"><a href="#Go-语言的空格" class="headerlink" title="Go 语言的空格"></a>Go 语言的空格</h5><p>Go 语言中变量的声明必须使用空格隔开，如： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure><h4 id="Go语言数据类型"><a href="#Go语言数据类型" class="headerlink" title="Go语言数据类型"></a>Go语言数据类型</h4><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p><p>数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p>Go 语言按类别有以下几种数据类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>布尔型</strong>  布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td></tr><tr><td align="left">2</td><td align="left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td align="left">3</td><td align="left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td align="left">4</td><td align="left"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）  (b) 数组类型    (c) 结构化类型(struct)     (d) Channel 类型    (e) 函数类型    (f) 切片类型    (g) 接口类型（interface）   (h) Map 类型</td></tr></tbody></table><h5 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h5><p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><ul><li>int型</li></ul><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>uint8</strong> 无符号 8 位整型 (0 到 255)</td></tr><tr><td align="left">2</td><td align="left"><strong>uint16</strong> 无符号 16 位整型 (0 到 65535)</td></tr><tr><td align="left">3</td><td align="left"><strong>uint32</strong> 无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td align="left">4</td><td align="left"><strong>uint64</strong> 无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td align="left">5</td><td align="left"><strong>int8</strong> 有符号 8 位整型 (-128 到 127)</td></tr><tr><td align="left">6</td><td align="left"><strong>int16</strong> 有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td align="left">7</td><td align="left"><strong>int32</strong> 有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td align="left">8</td><td align="left"><strong>int64</strong> 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><ul><li>浮点型：</li></ul><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>float32</strong> IEEE-754 32位浮点型数</td></tr><tr><td align="left">2</td><td align="left"><strong>float64</strong> IEEE-754 64位浮点型数</td></tr><tr><td align="left">3</td><td align="left"><strong>complex64</strong> 32 位实数和虚数</td></tr><tr><td align="left">4</td><td align="left"><strong>complex128</strong> 64 位实数和虚数</td></tr></tbody></table><ul><li>其他数字类型</li></ul><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>byte</strong> 类似 uint8</td></tr><tr><td align="left">2</td><td align="left"><strong>rune</strong> 类似 int32</td></tr><tr><td align="left">3</td><td align="left"><strong>uint</strong> 32 或 64 位</td></tr><tr><td align="left">4</td><td align="left"><strong>int</strong> 与 uint 一样大小</td></tr><tr><td align="left">5</td><td align="left"><strong>uintptr</strong> 无符号整型，用于存放一个指针</td></tr></tbody></table><h5 id="笔记-1"><a href="#笔记-1" class="headerlink" title="笔记"></a>笔记</h5><ul><li>go 1.9版本对于数字类型，无需定义int及float32、float64，系统会自动识别。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">1.5</span></span><br><span class="line">   <span class="keyword">var</span> b =<span class="number">2</span></span><br><span class="line">   fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符串去除空格和换行符</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  </span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">"fmt"</span>  </span><br><span class="line">    <span class="string">"strings"</span>  </span><br><span class="line">)  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    str := <span class="string">"这里是 www\n.baidu\n.com"</span>  </span><br><span class="line">    fmt.Println(<span class="string">"-------- 原字符串 ----------"</span>)  </span><br><span class="line">    fmt.Println(str)  </span><br><span class="line">    <span class="comment">// 去除空格  </span></span><br><span class="line">    str = strings.Replace(str, <span class="string">" "</span>, <span class="string">""</span>, <span class="number">-1</span>)  </span><br><span class="line">    <span class="comment">// 去除换行符  </span></span><br><span class="line">    str = strings.Replace(str, <span class="string">"\n"</span>, <span class="string">""</span>, <span class="number">-1</span>)  </span><br><span class="line">    fmt.Println(<span class="string">"-------- 去除空格与换行后 ----------"</span>)  </span><br><span class="line">    fmt.Println(str)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-------- 原字符串 ----------</span><br><span class="line">这里是 www</span><br><span class="line">.baidu</span><br><span class="line">.com</span><br><span class="line">-------- 去除空格与换行后 ----------</span><br><span class="line">这里是www.baidu.com</span><br></pre></td></tr></table></figure><h4 id="Go-语言变量"><a href="#Go-语言变量" class="headerlink" title="Go 语言变量"></a>Go 语言变量</h4><p>Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。</p><p>声明变量的一般形式是使用 var 关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier <span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>可以一次声明多个变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier1, identifier2 <span class="keyword">type</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">"Baidu"</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b, c <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    fmt.Println(b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//output</span></span><br><span class="line">Baidu</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h5><p>第一种，指定变量类型，如果没有初始化，则变量默认为零值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name v_type</span><br><span class="line">v_name = value</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 没有初始化就为零值*</span></span><br><span class="line">  <span class="keyword">var</span> b <span class="keyword">int</span></span><br><span class="line">    fmt.Println(b)<span class="comment">//output: 0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// bool 零值为 false*</span></span><br><span class="line">  <span class="keyword">var</span> c <span class="keyword">bool</span></span><br><span class="line">    fmt.Println(c)<span class="comment">//output: false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>数值类型（包括complex64/128）为 <strong>0</strong></p></li><li><p>布尔类型为 <strong>false</strong></p></li><li><p>字符串为 <strong>“”</strong>（空字符串）</p></li><li><p>以下几种类型为 <strong>nil</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="keyword">string</span>] <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">a</span> <span class="title">error</span> // <span class="title">error</span> 是接口</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">  <span class="keyword">var</span> f <span class="keyword">float64</span></span><br><span class="line">  <span class="keyword">var</span> b <span class="keyword">bool</span></span><br><span class="line">  <span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">  fmt.Printf(<span class="string">"%v %v %v %q**\n**"</span>, i, f, b, s)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">0 0 false ""</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>第二种，根据值自行判定变量类型。 </p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name = value</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="literal">true</span></span><br><span class="line">  fmt.Println(d)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//output: true</span></span><br></pre></td></tr></table></figure><p>第三种，省略 var, 注意 *<em>:=*</em> 左侧如果没有声明新的变量，就产生编译错误，格式：<code>v_name := value</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intVal <span class="keyword">int</span> </span><br><span class="line"></span><br><span class="line">intVal :=<span class="number">1</span> <span class="comment">// 这时候会产生编译错误</span></span><br><span class="line"></span><br><span class="line">intVal,intVal1 := <span class="number">1</span>,<span class="number">2</span> <span class="comment">// 此时不会产生编译错误，因为有声明新的变量，因为 := 是一个声明</span></span><br></pre></td></tr></table></figure><p> 可以将 <code>var f string = &quot;Baidu&quot;</code>简写为 <code>f := &quot;Baidu&quot;</code></p><h5 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型相同多个变量, 非全局变量</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span></span><br><span class="line">vname1, vname2, vname3 = v1, v2, v3</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 = v1, v2, v3 <span class="comment">// 和 python 很像,不需要显示声明类型，自动推断</span></span><br><span class="line"></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3 <span class="comment">// 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    vname1 v_type1</span><br><span class="line">    vname2 v_type2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> (  <span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> e, f = <span class="number">123</span>, <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这种不带声明格式的只能在函数体中出现</span></span><br><span class="line"><span class="comment">//g, h := 123, "hello"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    g, h := <span class="number">123</span>, <span class="string">"hello"</span></span><br><span class="line">    <span class="built_in">println</span>(x, y, a, b, c, d, e, f, g, h)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">0 0 0 false 1 2 123 hello 123 hello</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++剑指offer</title>
      <link href="/offer_dir.html"/>
      <url>/offer_dir.html</url>
      
        <content type="html"><![CDATA[<h3 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>从左下角元素往上查找，右边元素是比这个元素大，上边是的元素比这个元素小。于是，target比这个元素小就往上找，比这个元素大就往右找。如果出了边界，则说明二维数组中不存在target元素。 </p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// array是二维数组，这里没做判空操作</span></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="built_in">array</span>.size();</span><br><span class="line">        <span class="keyword">int</span> cols = <span class="built_in">array</span>[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> i=rows<span class="number">-1</span>,j=<span class="number">0</span>;<span class="comment">//左下角元素坐标</span></span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&lt;cols)&#123;<span class="comment">//使其不超出数组范围</span></span><br><span class="line">            <span class="keyword">if</span>(target&lt;<span class="built_in">array</span>[i][j])</span><br><span class="line">                i--;<span class="comment">//查找的元素较少，往上找</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;<span class="built_in">array</span>[i][j])</span><br><span class="line">                j++;<span class="comment">//查找元素较大，往右找</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//找到</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>从前往后记录空格数目，从后往前替换空格</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceSpace</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)&#123;num++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = length <span class="number">-1</span> ; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] != <span class="string">' '</span>)&#123;</span><br><span class="line">                    str[i+num*<span class="number">2</span>] = str[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                 str[i+num*<span class="number">2</span>] = <span class="string">'0'</span>;</span><br><span class="line">                 str[i+num*<span class="number">2</span><span class="number">-1</span>] = <span class="string">'2'</span>;</span><br><span class="line">                 str[i+num*<span class="number">2</span><span class="number">-2</span>] = <span class="string">'%'</span>;</span><br><span class="line">                 num--;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>比较简单，直接看代码</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li>方法一： 链表从尾到头输出，利用递归实现，不使用库函数直接printf输出的时候用递归比较好 </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(struct ListNode* head) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value;</span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            value.insert(value.begin(),head-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempVec = printListFromTailToHead(head-&gt;next);</span><br><span class="line">                <span class="keyword">if</span>(tempVec.size()&gt;<span class="number">0</span>)</span><br><span class="line">                value.insert(value.begin(),tempVec.begin(),tempVec.end());  </span><br><span class="line">            &#125;         </span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>用库函数，每次扫描一个节点，将该结点数据存入vector中，如果该节点有下一节点，将下一节点数据直接插入vector最前面，直至遍历完，或者直接加在最后，最后调用<code>reverse</code> 。[头插vector 效率太低，可以先<code>vector.push_back</code>返回之前翻转vector，<code>std::reverse(begin,end)</code> ]</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(struct ListNode* head) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value;</span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            value.insert(value.begin(),head-&gt;val);</span><br><span class="line">            <span class="keyword">while</span>(head-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                value.insert(value.begin(),head-&gt;next-&gt;val);</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">            &#125;         </span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h3><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>前序加中序序列，分解过程图示如下（王道数据结构P120） </p><p><img src="https://pic.superbed.cn/item/5dc2c7a78e0e2e3ee93d8755.png" alt></p><p><img src="https://pic.superbed.cn/item/5dc2c7f18e0e2e3ee93d9120.png" alt></p><ol><li><p>由先序序列第一个<strong><code>pre[0]</code></strong>在中序序列中找到根节点位置<strong><code>gen</code></strong> </p></li><li><p>以<strong><code>gen</code></strong>为中心遍历 </p></li></ol><ul><li><code>0~gen</code>左子树<ul><li>子中序序列：<strong><code>0~gen-1</code></strong>，放入<strong><code>vin_left[]</code></strong> </li><li>子先序序列：<strong><code>1~gen</code></strong>放入<strong><code>pre_left[]</code></strong>，<strong><code>+1</code></strong>可以看图，因为头部有根节点 </li></ul></li><li><code>gen+1~vinlen</code>为右子树<ul><li>子中序序列：<strong><code>gen+1 ~ vinlen-1</code></strong>放入<strong><code>vin_right[]</code></strong> </li><li>子先序序列：<strong><code>gen+1 ~ vinlen-1</code></strong>放入<strong><code>pre_right[]</code></strong> </li></ul></li></ul><ol start="3"><li>由先序序列<strong><code>pre[0]</code></strong>创建根节点 </li><li>连接左子树，按照左子树子序列递归（<strong><code>pre_left[]</code></strong>和<strong><code>vin_left[]</code></strong>） </li><li>连接右子树，按照右子树子序列递归（<strong><code>pre_right[]</code></strong>和<strong><code>vin_right[]</code></strong>） </li><li>返回根节点</li></ol><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Definition <span class="keyword">for</span> binary tree</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode *left;</span><br><span class="line">TreeNode *right;</span><br><span class="line">TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>方法一</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">*/</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">struct TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> inlen = in.size();</span><br><span class="line"><span class="keyword">if</span> (inlen == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left_pre, right_pre, left_in, right_in;</span><br><span class="line"><span class="comment">//创建根节点，根节点肯定是前序遍历的第一个数</span></span><br><span class="line">TreeNode* head = <span class="keyword">new</span> TreeNode(pre[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//找到中序遍历根节点所在位置,存放于变量gen中</span></span><br><span class="line"><span class="keyword">int</span> gen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;inlen; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (in[i] == pre[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">gen = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于中序遍历，根节点左边的节点位于二叉树的左边，根节点右边的节点位于二叉树的右边</span></span><br><span class="line"><span class="comment">//利用上述这点，对二叉树节点进行归并</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;gen; i++)</span><br><span class="line">&#123;</span><br><span class="line">left_in.push_back(in[i]);</span><br><span class="line">left_pre.push_back(pre[i + <span class="number">1</span>]);<span class="comment">//前序第一个为根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = gen + <span class="number">1</span>; i&lt;inlen; i++)</span><br><span class="line">&#123;</span><br><span class="line">right_in.push_back(in[i]);</span><br><span class="line">right_pre.push_back(pre[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和shell排序的思想类似，取出前序和中序遍历根节点左边和右边的子树</span></span><br><span class="line"><span class="comment">//递归，再对其进行上述所有步骤，即再区分子树的左、右子子数，直到叶节点</span></span><br><span class="line">head-&gt;left = reConstructBinaryTree(left_pre, left_in);</span><br><span class="line">head-&gt;right = reConstructBinaryTree(right_pre, right_in);</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>方法二<strong>（厉害）</strong></li></ul><table><thead><tr><th>$i_{0}$=startIn</th><th>.</th><th>.</th><th>.</th><th>.</th><th>.</th><th>i</th></tr></thead><tbody><tr><td><strong>startPre</strong></td><td>.</td><td>.</td><td>.</td><td>.</td><td>.</td><td>x</td></tr></tbody></table><p>$x=startPre+i-startIn$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">( <span class="keyword">int</span> [] pre, <span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">     TreeNode root=reConstructBinaryTree(pre, <span class="number">0</span> ,pre.length- <span class="number">1</span> ,in, <span class="number">0</span> ,in.length- <span class="number">1</span> );</span><br><span class="line">     <span class="keyword">return</span> root;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//前序遍历&#123;1,2,4,7,3,5,6,8&#125;和中序遍历序列&#123;4,7,2,1,5,3,8,6&#125;</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">( <span class="keyword">int</span> [] pre, <span class="keyword">int</span> startPre, <span class="keyword">int</span> endPre, <span class="keyword">int</span> [] in, <span class="keyword">int</span> startIn, <span class="keyword">int</span> endIn)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (startPre&gt;endPre||startIn&gt;endIn)</span><br><span class="line">       <span class="keyword">return</span> null ;</span><br><span class="line">     TreeNode root= <span class="keyword">new</span> TreeNode(pre[startPre]);</span><br><span class="line">     <span class="keyword">for</span> ( <span class="keyword">int</span> i=startIn;i&lt;=endIn;i++)</span><br><span class="line">       <span class="keyword">if</span> (in[i]==pre[startPre])&#123;</span><br><span class="line">         root.left=reConstructBinaryTree(pre,startPre+ <span class="number">1</span> ,startPre+i-startIn,in,startIn,i- <span class="number">1</span> );</span><br><span class="line">         root.right=reConstructBinaryTree(pre,i-startIn+startPre+ <span class="number">1</span> ,endPre,in,i+ <span class="number">1</span> ,endIn);</span><br><span class="line">            <span class="keyword">break</span> ;</span><br><span class="line">       &#125;    </span><br><span class="line">     <span class="keyword">return</span> root;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h3><h4 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h4><p>入队：将元素进栈A</p><p>出队：判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，栈B出栈；如果不为空，栈B直接出栈。</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stack1.push(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">if</span> (stack2.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!stack1.empty()) </span><br><span class="line">&#123;</span><br><span class="line">a = stack1.top();</span><br><span class="line">stack2.push(a);</span><br><span class="line">stack1.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a = stack2.top();</span><br><span class="line">stack2.pop();</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack1;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>如果用两个队列实现一个栈的功能?</p><p>解题思路：</p><p>入栈：将元素进队列A </p><p>出栈：判断队列A中元素的个数是否为1，如果等于1，则出队列，否则将队列A中的元素     以此出队列并放入队列B，直到队列A中的元素留下一个，然后队列A出队列，再把     队列B中的元素出队列以此放入队列A中。</p><h3 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。<br>NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>采用二分法解答这个问题：</p><p>mid = low + (high - low)/2 </p><p>需要考虑三种情况： </p><p>(1)array[mid] &gt; array[high]: </p><p>出现这种情况的array类似[3,4,5,6,0,1,2]，此时最小数字一定在mid的右边。 </p><p> low = mid + 1 </p><p>(2)array[mid] == array[high]: </p><p> 出现这种情况的array类似 [1,0,1,1,1]   或者[1,1,1,0,1]，此时最小数字不好判断在mid左边还是右边,这时只好一个一个试 ， </p><p> high = high - 1 </p><p>(3)array[mid] &lt; array[high]: </p><p>出现这种情况的array类似[2,2,3,4,5,6,6],此时最小数字一定就是array[mid]或者在mid的左边。因为右边必然都是递增的。 </p><p> high = mid </p><p><strong>注意这里有个坑：如果待查询的范围最后只剩两个数，那么mid</strong> <strong>一定会指向下标靠前的数字</strong>  </p><p>比如 array = [4,6] </p><p>array[low] = 4 ;array[mid] = 4 ; array[high] = 6 ; </p><p>如果high = mid - 1，就会产生错误， 因此high = mid </p><p>但情形(1)中low = mid + 1就不会错误</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span> ; <span class="keyword">int</span> high = <span class="built_in">array</span>.size() - <span class="number">1</span>;   </span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;        </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[mid] &gt; <span class="built_in">array</span>[high])&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">array</span>[mid] == <span class="built_in">array</span>[high])&#123;</span><br><span class="line">                high = high - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">array</span>[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>大家都知道斐波那契数列$  \begin{equation} f(x)= \begin{cases} 1&amp; \text{x=1;} \ 1&amp; \text{x=2;} \ 1&amp; \text{$f(n-1)+f(n)$} \end{cases} \end{equation}<br>  $，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。</p><p>n&lt;=39</p><h4 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h4><p>分别用<code>f</code>和<code>g</code>表示$f(n)$和$f(n+1)$,用循环来实现，最好不要用递归，递归重复计算的部分太多了，花费太大 。</p><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, g = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">            g += f;</span><br><span class="line">            f = g - f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h4 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h4><p>对于本题,前提只有 一次 1阶或者2阶的跳法。 </p><p>a.如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);  </p><p>b.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)  </p><p>c.由a\b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)  </p><p>d.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2  </p><p>e.可以发现最终得出的是一个斐波那契数列：</p><p>$  \begin{equation} f(x)= \begin{cases} 1&amp; \text{x=1;} \ 1&amp; \text{x=2;} \ 1&amp; \text{$f(n-1)+f(n)$} \end{cases} \end{equation}<br>  $</p><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">1</span>, second = <span class="number">2</span>, third = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= number; i++) &#123;</span><br><span class="line">            third = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = third;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> third;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析-1"></a>题目分析-1</h4><p> 关于本题，前提是n个台阶会有一次n阶的跳法。分析如下: </p><p>f(1) = 1 </p><p>f(2) = f(2-1) + f(2-2)     //f(2-2) 表示2阶一次跳2阶的次数。 </p><p>f(3) = f(3-1) + f(3-2) + f(3-3) </p><p>  … </p><p>f(n) = f(n-1) + f(n-2) + f(n-3) + … + f(n-(n-1)) + f(n-n) </p><p>说明： </p><p>1）这里的f(n) 代表的是n个台阶有一次1,2,…n阶的 跳法数。 </p><p>2）n = 1时，只有1种跳法，f(1) = 1 </p><p>3) n = 2时，会有两个跳得方式，一次1阶或者2阶，这回归到了问题（1） ，</p><p>​    f(2) = f(2-1) + f(2-2) </p><p>4) n = 3时，会有三种跳得方式，1阶、2阶、3阶， 那么就是第一次跳出1阶后面 剩下：f(3-1);第一次跳出2阶，剩下f(3-2)；第一次3阶，那么剩下f(3-3) </p><p>因此结论是f(3) = f(3-1)+f(3-2)+f(3-3) </p><p>5) n = n时，会有n中跳的方式，1阶、2阶…n阶，得出结论： </p><p>​    f(n) = f(n-1)+f(n-2)+…+f(n-(n-1)) + f(n-n) =&gt;  f(0) + f(1) + f(2) + f(3) + … + f(n-1)</p><p>6) 由以上已经是一种结论，但是为了简单，我们可以继续简化： </p><p>   f(n-1) = f(0) + f(1)+f(2)+f(3) + … + f((n-1)-1) =  f(0) + f(1) + f(2) + f(3) + … + f(n-2) </p><p>   f(n) = f(0) + f(1) + f(2) + f(3) + … + f(n-2) +  f(n-1) = f(n-1) + f(n-1) </p><p>   可以得出： </p><p>   f(n) = 2*f(n-1)  </p><p>  7) 得出最终结论,在n阶台阶，一次有1、2、…n阶的跳的方式时，总得跳法为：</p><p>​              $  \begin{equation} f(x)= \begin{cases} 1&amp; \text{n=0;} \ 1&amp; \text{n=1;} \ 2*f(n-1)&amp; \text{$n&gt;=2$} \end{cases} \end{equation}<br>  $</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现- 1"></a>代码实现- 1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloorII</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * JumpFloorII(target - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以用移位运算符</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Solution &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int jumpFloorII(int number) &#123;</span></span><br><span class="line"><span class="comment">                int a=1; return a&lt;&lt;(number-1);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="题目分析-2（概率内容或者基础排列组合？？有点分不清了）"><a href="#题目分析-2（概率内容或者基础排列组合？？有点分不清了）" class="headerlink" title="题目分析-2（概率内容或者基础排列组合？？有点分不清了）"></a>题目分析-2（概率内容或者基础排列组合？？有点分不清了）</h4><p>假设有n（n&gt;=2）个台阶，因为青蛙可以一步跳任意阶，所以第n层台阶一定会被青蛙踩到，剩下的就看第1~n-1层台阶会不会被踩到，每层台阶可以任意选择会不会被踩到，所以有$2^{n-1}$种情况</p><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(--number)</span><br><span class="line">        &#123;</span><br><span class="line">            j*=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p>我们可以用2*1 的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？ </p><h4 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h4><p>依旧是斐波那契数列</p><ul><li><p>n&lt;=0时，直接return 1；</p></li><li><p>n=1时，只有一种摆放方法，return 1；</p></li><li><p>n=2时，有两种摆放方法，return 2；</p></li><li><p>n&gt;=2时，分为两步考虑，</p><ul><li>第一次摆放2*1的小矩阵，则 摆放方法总共为f(target - 1) </li></ul><table><thead><tr><th>$\checkmark$</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>$\checkmark$</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li>第一次摆放一块1*2的小矩阵，则摆放方法总共为f(target-2)  因为，摆放了一块1*2的小矩阵（用√√表示），对应下方的1*2（用××表示）摆放方法就确定了，所以为f(targte-2) </li></ul><table><thead><tr><th>$\checkmark$</th><th>$\checkmark$</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>$\times$</td><td>$\times$</td><td></td><td></td><td></td><td></td></tr></tbody></table></li></ul><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rectCover</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( number &lt; <span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> g = <span class="number">1</span>, f = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> ( --number ) &#123;</span><br><span class="line">            f = f + g;</span><br><span class="line">            g = f - g;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><h4 id="题目分析-1-1"><a href="#题目分析-1-1" class="headerlink" title="题目分析-1"></a>题目分析-1</h4><p>用1（1自身左移运算，其实后来就不是1了）和n的每位进行位与，来判断1的个数 </p><h4 id="代码实现-1-1"><a href="#代码实现-1-1" class="headerlink" title="代码实现-1"></a>代码实现-1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (flag != <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((n &amp; flag) != <span class="number">0</span>) </span><br><span class="line">count++;</span><br><span class="line">flag = flag &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析-2"></a>题目分析-2</h4><p>使用(n - 1) &amp; n， 把最右边的一个1变成0 </p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现-2"></a>代码实现-2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">++count;</span><br><span class="line">n = (n - <span class="number">1</span>) &amp; n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><p>保证base和exponent不同时为0</p><h4 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h4><p>简单快速幂</p><p>举例分析：13=1101    $base^{1101}$=$base^{0001}$*$base^{0100}$*$base^{1000}$</p><p>通过&amp;1和&gt;&gt;1来逐位读取1101，为1时将该位代表的乘数累乘到最终结果 </p><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="built_in">abs</span>((<span class="keyword">long</span> <span class="keyword">long</span>)exponent);</span><br><span class="line">      <span class="keyword">double</span> r = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p &amp; <span class="number">1</span>) r *= base;</span><br><span class="line">            base *= base;</span><br><span class="line">            p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exponent &lt; <span class="number">0</span> ? <span class="number">1</span>/ r : r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/sort.html"/>
      <url>/sort.html</url>
      
        <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span> <span class="comment">//交換兩個變數</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; len - <span class="number">1</span> ; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)     <span class="comment">//走訪未排序的元素</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min])    <span class="comment">//找到目前最小值</span></span><br><span class="line">                min = j;    <span class="comment">//紀錄最小值</span></span><br><span class="line">           swap(&amp;arr[min], &amp;arr[i]);    <span class="comment">//做交換</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到 {\displaystyle O(1)} {\displaystyle O(1)}的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,temp;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j=i;j&gt;<span class="number">0</span> &amp;&amp; arr[j<span class="number">-1</span>]&gt;temp;j--)</span><br><span class="line">                    arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序使用到了分治的思想, 将一个数组分为两部分, 并分别将两部分排序完成, 而后只用对两个排序好的子序列进行合并即可. 对两个子序列的合并操作也使用相同的策略, 递归的进行. 在进行合并的时候, 需要将原来的数组排序结果保存到另一个数组中, 空间复杂度为$O(n)$. 归并排序时间复杂度为$O(nlog(n))$. 典型应用为求逆序对数. </p><h4 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* a = arr;</span><br><span class="line">    <span class="keyword">int</span>* b = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">int</span> seg, start;</span><br><span class="line">    <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg) &#123;</span><br><span class="line">        <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg + seg) &#123;</span><br><span class="line">            <span class="keyword">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</span><br><span class="line">            <span class="keyword">int</span> k = low;</span><br><span class="line">            <span class="keyword">int</span> start1 = low, end1 = mid;</span><br><span class="line">            <span class="keyword">int</span> start2 = mid, end2 = high;</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1)</span><br><span class="line">                b[k++] = a[start1++];</span><br><span class="line">            <span class="keyword">while</span> (start2 &lt; end2)</span><br><span class="line">                b[k++] = a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>* temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_recursive</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> reg[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> len = end - start, mid = (len &gt;&gt; <span class="number">1</span>) + start;</span><br><span class="line">    <span class="keyword">int</span> start1 = start, end1 = mid;</span><br><span class="line">    <span class="keyword">int</span> start2 = mid + <span class="number">1</span>, end2 = end;</span><br><span class="line">    merge_sort_recursive(arr, reg, start1, end1);</span><br><span class="line">    merge_sort_recursive(arr, reg, start2, end2);</span><br><span class="line">    <span class="keyword">int</span> k = start;</span><br><span class="line">    <span class="keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</span><br><span class="line">        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span><br><span class="line">    <span class="keyword">while</span> (start1 &lt;= end1)</span><br><span class="line">        reg[k++] = arr[start1++];</span><br><span class="line">    <span class="keyword">while</span> (start2 &lt;= end2)</span><br><span class="line">        reg[k++] = arr[start2++];</span><br><span class="line">    <span class="keyword">for</span> (k = start; k &lt;= end; k++)</span><br><span class="line">        arr[k] = reg[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> reg[len];</span><br><span class="line">    merge_sort_recursive(arr, reg, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="迭代法-1"><a href="#迭代法-1" class="headerlink" title="迭代法"></a>迭代法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Range</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> start, end;</span><br><span class="line">&#125; Range;</span><br><span class="line"><span class="function">Range <span class="title">new_Range</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    Range r;</span><br><span class="line">    r.start = s;</span><br><span class="line">    r.end = e;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 避免len等于负值引发段错误（Segment Fault）</span></span><br><span class="line">    <span class="comment">// r[]列表,p数量,r[p++]为push,r[--p]为pop且取得元素</span></span><br><span class="line">    Range r[len];</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    r[p++] = new_Range(<span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        Range range = r[--p];</span><br><span class="line">        <span class="keyword">if</span> (range.start &gt;= range.end)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = arr[(range.start + range.end) / <span class="number">2</span>]; <span class="comment">//选择中间点为基准点</span></span><br><span class="line">        <span class="keyword">int</span> left = range.start, right = range.end;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[left] &lt; mid) ++left;   <span class="comment">// 检测基准点左侧是否符合要求</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &gt; mid) --right; <span class="comment">//检测基准点右侧是否符合要求</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;arr[left],&amp;arr[right]);</span><br><span class="line">                left++;right--;               <span class="comment">//移动指针以继续</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (left &lt;= right);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (range.start &lt; right) r[p++] = new_Range(range.start, right);</span><br><span class="line">        <span class="keyword">if</span> (range.end &gt; left) r[p++] = new_Range(left, range.end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归法-1"><a href="#递归法-1" class="headerlink" title="递归法"></a>递归法</h4><h5 id="左右指针法"><a href="#左右指针法" class="headerlink" title="左右指针法"></a>左右指针法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_recursive</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = arr[right];</span><br><span class="line">    <span class="keyword">int</span> begin = left, end = right - <span class="number">1</span>;<span class="comment">//左右指针法</span></span><br><span class="line">    <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[begin] &lt; mid &amp;&amp; begin &lt; end)</span><br><span class="line">            begin++;</span><br><span class="line">        <span class="keyword">while</span> (arr[end] &gt;= mid &amp;&amp; begin &lt; end)</span><br><span class="line">            end--;</span><br><span class="line">        swap(&amp;arr[begin], &amp;arr[end]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[begin] &gt;= arr[right])</span><br><span class="line">        swap(&amp;arr[begin], &amp;arr[right]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        begin++;</span><br><span class="line">    <span class="keyword">if</span> (begin)</span><br><span class="line">        quick_sort_recursive(arr, left, begin - <span class="number">1</span>);</span><br><span class="line">    quick_sort_recursive(arr, begin + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    quick_sort_recursive(arr, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span> &#125;;</span><br><span class="line">    quick_sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="挖洞法"><a href="#挖洞法" class="headerlink" title="挖洞法"></a>挖洞法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(T a[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(end-start &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(end-start == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[start]&gt;a[end])</span><br><span class="line">            swap(a[start], a[end]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> key = a[start], i=start, j=end;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j &amp;&amp;  key &lt; a[j])</span><br><span class="line">            j--;</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j &amp;&amp; key &gt; a[i])</span><br><span class="line">            i++;</span><br><span class="line">        a[j] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = key;</span><br><span class="line">    quick_sort(a, start, i<span class="number">-1</span>);</span><br><span class="line">    quick_sort(a, i+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="例：找出第k大或者第k小的数"><a href="#例：找出第k大或者第k小的数" class="headerlink" title="例：找出第k大或者第k小的数"></a>例：找出第k大或者第k小的数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">//目前还有错误，还待解决中。。。</span><br><span class="line">//大到小排序1 2 3 4 5 6 7 8 9 10 第五大会出现错误，思路好的时候整理</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//从小到大排序</span><br><span class="line">int partion1(int A[], int low, int high)</span><br><span class="line">&#123;</span><br><span class="line">int pivot = A[low];//用第一个数作为主元</span><br><span class="line">while (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">while (low &lt; high &amp;&amp; A[high] &gt;= pivot)</span><br><span class="line">--high;</span><br><span class="line">A[low] = A[high];</span><br><span class="line">while (low &lt; high&amp;&amp;A[low] &lt;= pivot)</span><br><span class="line">++low;</span><br><span class="line">A[high] = A[low];</span><br><span class="line">&#125;</span><br><span class="line">A[low] = pivot;</span><br><span class="line">return low;</span><br><span class="line">&#125;</span><br><span class="line">//修改大于小于号后，从大到小排序</span><br><span class="line">int partion2(int A[], int low, int high)</span><br><span class="line">&#123;</span><br><span class="line">int pivot = A[low];//用第一个数作为主元</span><br><span class="line">while (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">while (low &lt; high &amp;&amp; A[high] &lt;= pivot)</span><br><span class="line">--high;</span><br><span class="line">A[low] = A[high];</span><br><span class="line">while (low &lt; high&amp;&amp;A[low] &gt;= pivot)</span><br><span class="line">++low;</span><br><span class="line">A[high] = A[low];</span><br><span class="line">&#125;</span><br><span class="line">A[low] = pivot;</span><br><span class="line">return low;</span><br><span class="line">&#125;</span><br><span class="line">//调用从小到大排序的分割法，来找出第K小的数</span><br><span class="line">int find_k_small(int A[], int low, int high, int k)</span><br><span class="line">&#123;</span><br><span class="line">if (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">int pivot_pos = partion1(A, low, high);</span><br><span class="line">if (pivot_pos + 1 == k)</span><br><span class="line">return A[pivot_pos];</span><br><span class="line">else if (pivot_pos + 1 &gt; k)</span><br><span class="line">find_k_small(A, low, pivot_pos - 1, k);</span><br><span class="line">else</span><br><span class="line">find_k_small(A, pivot_pos + 1, high, k);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return -1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//找出第K大的数</span><br><span class="line">int find_k_big(int A[], int low, int high, int k)</span><br><span class="line">&#123;</span><br><span class="line">if (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">int pivot_pos = partion2(A, low, high);</span><br><span class="line">if (pivot_pos + 1 == k)</span><br><span class="line">return A[pivot_pos];</span><br><span class="line">else if (pivot_pos + 1 &gt; k)</span><br><span class="line">return find_k_big(A, low, pivot_pos - 1, k);</span><br><span class="line">else</span><br><span class="line">return find_k_big(A, pivot_pos + 1, high, k);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void quick_sort1(int A[], int low, int high)</span><br><span class="line">&#123;</span><br><span class="line">if (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">int pivot_pos = partion1(A, low, high);</span><br><span class="line"></span><br><span class="line">quick_sort1(A, low, pivot_pos - 1);</span><br><span class="line"></span><br><span class="line">quick_sort1(A, pivot_pos + 1, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void quick_sort2(int A[], int low, int high)</span><br><span class="line">&#123;</span><br><span class="line">if (low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">int pivot_pos = partion2(A, low, high);</span><br><span class="line"></span><br><span class="line">quick_sort2(A, low, pivot_pos - 1);</span><br><span class="line"></span><br><span class="line">quick_sort2(A, pivot_pos + 1, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">cout &lt;&lt; &quot;输入元素个数： &quot;;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">int *A = new int[n];</span><br><span class="line">for (int i = 0; i &lt; n; ++i)</span><br><span class="line">cin &gt;&gt; A[i];</span><br><span class="line"></span><br><span class="line">int k;</span><br><span class="line">cout &lt;&lt; &quot;输入要找出第几小的数： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line">cout &lt;&lt; &quot;找出第&quot; &lt;&lt; k &lt;&lt; &quot;小的数:&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int ans = find_k_small(A, 0, n - 1, k);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;排序后的结果：&quot; &lt;&lt; endl;</span><br><span class="line">quick_sort1(A, 0, n - 1);</span><br><span class="line">for (int i = 0; i &lt; n; ++i)</span><br><span class="line">cout &lt;&lt; A[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">int k2;</span><br><span class="line">cout &lt;&lt; &quot;输入要找出第几大的数： &quot; &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; k2;</span><br><span class="line">cout &lt;&lt; &quot;找出第&quot; &lt;&lt; k2 &lt;&lt; &quot;大的数:&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ans = find_k_big(A, 0, n - 1, k2);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;排序后的结果：&quot; &lt;&lt; endl;</span><br><span class="line">quick_sort2(A, 0, n - 1);</span><br><span class="line">for (int i = 0; i &lt; n; ++i)</span><br><span class="line">cout &lt;&lt; A[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">delete[] A;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new和malloc内部实现的区别</title>
      <link href="/new&amp;malloc.html"/>
      <url>/new&amp;malloc.html</url>
      
        <content type="html"><![CDATA[<h2 id="new-和-malloc-内部的实现方式有什么区别？"><a href="#new-和-malloc-内部的实现方式有什么区别？" class="headerlink" title="new 和 malloc 内部的实现方式有什么区别？"></a>new 和 malloc 内部的实现方式有什么区别？</h2><p>malloc和new有以下不同:<br>(1) new. delete 是操作符，可以重载，只能在C++中使用。</p><p>(2) malloc. free 是函数，可以覆盖，C、C++中都可以使用。</p><p>(3)new可以调用对象的构造函数，对应的delete调用相应的析构函数。</p><p>(4) malloc仅仅分配内存，free 仅仅回收内存，并不执行构造和析构函数</p><p>(5) new. delete 返回的是某种数据类型指针，malloc、 free 返回的是void指针。<br>注意: malloc 申请的内存空间要用free释放，而new申请的内存空间要用delete释放，不要混用。因为两者实现的机理不同。</p><p>解释：new 的功能是在堆区新建一个对象，并返回该对象的指针。</p><p>所谓的<strong>【新建对象】</strong>的意思就是，将调用该类的构造函数，因为如果不构造的话，就不能称之为一个对象。</p><p>而 malloc 只是机械的分配一块内存，如果用 mallco 在堆区创建一个对象的话，是不会调用构造函数的。</p><p>严格说来用 malloc 不能算是新建了一个对象，只能说是分配了一块与该类对象匹配的内存而已，然后强行把它解释为【这是一个对象】，按这个逻辑来，也不存在构造函数什么事。</p><p>同样的，用 delete 去释放一个堆区的对象，会调用该对象的析构函数。</p><p>用 free 去释放一个堆区的对象，不会调用该对象的析构函数。</p><p>做个简单的实验即可明了:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TEST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> num1;</span><br><span class="line">    <span class="keyword">int</span> num2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TEST()</span><br><span class="line">    &#123;</span><br><span class="line">        num1 = <span class="number">10</span>;</span><br><span class="line">        num2 = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; <span class="string">" "</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 用malloc()函数在堆区分配一块内存空间，然后用强制类型转换将该块内存空间</span></span><br><span class="line">    <span class="comment">// 解释为是一个TEST类对象，这不会调用TEST的默认构造函数</span></span><br><span class="line">    TEST * pObj1 = (TEST *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TEST));</span><br><span class="line">    pObj1-&gt;Print();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用new在堆区创建一个TEST类的对象，这会调用TEST类的默认构造函数</span></span><br><span class="line">    TEST * pObj2 = <span class="keyword">new</span> TEST;</span><br><span class="line">    pObj2-&gt;Print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="comment">-842150451 -842150451       |</span></span><br><span class="line"><span class="comment">10 20                       |</span></span><br><span class="line"><span class="comment">请按任意键继续. . .         |</span></span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们可以看到pObj1所指的对象中，字段num1与num2都是垃圾值</span></span><br><span class="line"><span class="comment">而pObj2所指的对象中，字段num1与num2显然是经过了构造后的值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信防撤回脚本</title>
      <link href="/3.html"/>
      <url>/3.html</url>
      
        <content type="html"><![CDATA[<h4 id="Windows微信防撤回脚本"><a href="#Windows微信防撤回脚本" class="headerlink" title="Windows微信防撤回脚本"></a>Windows微信防撤回脚本</h4><h5 id="测试版本：2-6-7-57-2-6-8-51"><a href="#测试版本：2-6-7-57-2-6-8-51" class="headerlink" title="测试版本：2.6.7.57 ~ 2.6.8.51"></a>测试版本：2.6.7.57 ~ 2.6.8.51</h5><h5 id="下载地址：https-pan-baiduwp-com-s-1UBpRXRyd9uXBeqDbc0DKWg-提取码-6666"><a href="#下载地址：https-pan-baiduwp-com-s-1UBpRXRyd9uXBeqDbc0DKWg-提取码-6666" class="headerlink" title="下载地址：https://pan.baiduwp.com/s/1UBpRXRyd9uXBeqDbc0DKWg  提取码: 6666"></a>下载地址：<a href="https://pan.baiduwp.com/s/1UBpRXRyd9uXBeqDbc0DKWg" target="_blank" rel="noopener">https://pan.baiduwp.com/s/1UBpRXRyd9uXBeqDbc0DKWg</a>  提取码: 6666</h5><h5 id="使用方法：将下载的dll文件，放置在微信的安装目录（WeChat-exe所在目录）下，默认安装目录-（C-Program-Files-x86-Tencent-WeChat），如果在安装微信时，自定义了微信安装位置，请自-行查找。（如果有问题，右下角蓝色聊天框戳我）"><a href="#使用方法：将下载的dll文件，放置在微信的安装目录（WeChat-exe所在目录）下，默认安装目录-（C-Program-Files-x86-Tencent-WeChat），如果在安装微信时，自定义了微信安装位置，请自-行查找。（如果有问题，右下角蓝色聊天框戳我）" class="headerlink" title="使用方法：将下载的dll文件，放置在微信的安装目录（WeChat.exe所在目录）下，默认安装目录      （C:\Program Files(x86)\Tencent\WeChat），如果在安装微信时，自定义了微信安装位置，请自      行查找。（如果有问题，右下角蓝色聊天框戳我）"></a>使用方法：将下载的dll文件，放置在微信的安装目录（WeChat.exe所在目录）下，默认安装目录      （C:\Program Files(x86)\Tencent\WeChat），如果在安装微信时，自定义了微信安装位置，请自      行查找。（如果有问题，右下角蓝色聊天框戳我）</h5><h5 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：<img src="/images/%E5%BE%AE%E4%BF%A1%E9%98%B2%E6%92%A4%E5%9B%9E%E6%B5%8B%E8%AF%95.png" alt="测试图片"></h5><a id="more"></a><h4 id="组件制作过程"><a href="#组件制作过程" class="headerlink" title="组件制作过程"></a>组件制作过程</h4><h5 id="使用工具：x32dbg调试器"><a href="#使用工具：x32dbg调试器" class="headerlink" title="使用工具：x32dbg调试器"></a>使用工具：x32dbg调试器</h5><h6 id="打开微信，并登录；"><a href="#打开微信，并登录；" class="headerlink" title="打开微信，并登录；"></a>打开微信，并登录；</h6><h6 id="打开x32dbg，文件-附加-选择“微信”，如下图；"><a href="#打开x32dbg，文件-附加-选择“微信”，如下图；" class="headerlink" title="打开x32dbg，文件-附加-选择“微信”，如下图；"></a>打开x32dbg，文件-附加-选择“微信”，如下图；</h6><p><img src="/images/%E5%BE%AE%E4%BF%A1%E6%94%BE%E6%92%A4%E5%9B%9E%E6%AD%A5%E9%AA%A4%E5%9B%BE1.png" alt></p><p><img src="/images/%E5%BE%AE%E4%BF%A1%E6%94%BE%E6%92%A4%E5%9B%9E%E6%AD%A5%E9%AA%A4%E5%9B%BE2.png" alt></p><h6 id="符号-搜索关键词：“win”，选择wechatwin-dll模块，然后双击-跳转至“引用”区域-；"><a href="#符号-搜索关键词：“win”，选择wechatwin-dll模块，然后双击-跳转至“引用”区域-；" class="headerlink" title="符号-搜索关键词：“win”，选择wechatwin.dll模块，然后双击  跳转至“引用”区域  ；"></a>符号-搜索关键词：“win”，选择wechatwin.dll模块，然后双击  跳转至“引用”区域  ；</h6><p><img src="/images/%E5%BE%AE%E4%BF%A1%E6%94%BE%E6%92%A4%E5%9B%9E%E6%AD%A5%E9%AA%A4%E5%9B%BE3.png" alt>      </p><h6 id="右键搜索-当前模块-字符串，输入搜索关键次“revokemsg”，选择-mov-ecx-wechatwin-xxxxxx-字段结果，双击定位至详情"><a href="#右键搜索-当前模块-字符串，输入搜索关键次“revokemsg”，选择-mov-ecx-wechatwin-xxxxxx-字段结果，双击定位至详情" class="headerlink" title="右键搜索-当前模块-字符串，输入搜索关键次“revokemsg”，选择 mov.ecx.wechatwin.xxxxxx  字段结果，双击定位至详情"></a>右键搜索-当前模块-字符串，输入搜索关键次“revokemsg”，选择 mov.ecx.wechatwin.xxxxxx  字段结果，双击定位至详情</h6><p><img src="/images/%E5%BE%AE%E4%BF%A1%E6%94%BE%E6%92%A4%E5%9B%9E%E6%AD%A5%E9%AA%A4%E5%9B%BE4.png" alt></p><p><img src="https://ae01.alicdn.com/kf/Hda1eb807bb424547a48a6f451dab9779k.png" alt></p><h6 id="从定位直至上拉，第一一个je开头行，修改成jmp开头行，点确定"><a href="#从定位直至上拉，第一一个je开头行，修改成jmp开头行，点确定" class="headerlink" title="从定位直至上拉，第一一个je开头行，修改成jmp开头行，点确定"></a>从定位直至上拉，第一一个je开头行，修改成jmp开头行，点确定</h6><p><img src="https://ae01.alicdn.com/kf/H79ad7e6552204a48b774779d003212efh.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 防撤回 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于tensorflow的人脸识别系统</title>
      <link href="/4.html"/>
      <url>/4.html</url>
      
        <content type="html"><![CDATA[<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>ubuntu16.04+Anaconda4.2.0+python3.5+opencv2的环境搭建</p><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><h5 id="检验导包问题的代码"><a href="#检验导包问题的代码" class="headerlink" title="检验导包问题的代码"></a>检验导包问题的代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># 创建一个常量 op, 产生一个 1x2 矩阵. 这个 op 被作为一个节点</span></span><br><span class="line"><span class="comment"># 加到默认图中.</span></span><br><span class="line"><span class="comment"># 构造器的返回值代表该常量 op 的返回值.</span></span><br><span class="line"><span class="comment">##matrix1 = tf.constant([[3., 3.]])</span></span><br><span class="line"><span class="comment"># 创建另外一个常量 op, 产生一个 2x1 矩阵.</span></span><br><span class="line"><span class="comment">##matrix2 = tf.constant([[2.],[2.]])</span></span><br><span class="line"><span class="comment"># 创建一个矩阵乘法 matmul op , 把 'matrix1' 和 'matrix2' 作为输入.</span></span><br><span class="line"><span class="comment"># 返回值 'product' 代表矩阵乘法的结果.</span></span><br><span class="line"><span class="comment">##product = tf.matmul(matrix1,matrix2)</span></span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io, transform</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time    </span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h5 id="将训练集下的图片resize一下，伴随着打开每一个子文件夹，我们要为其设置一个labels，一个文件夹的1000应一个label，共68个abel，这是后面检验acc的唯一指标，即是否能把测试集的照片通过我们的网络输出到指定出口得到正确的label。"><a href="#将训练集下的图片resize一下，伴随着打开每一个子文件夹，我们要为其设置一个labels，一个文件夹的1000应一个label，共68个abel，这是后面检验acc的唯一指标，即是否能把测试集的照片通过我们的网络输出到指定出口得到正确的label。" class="headerlink" title="将训练集下的图片resize一下，伴随着打开每一个子文件夹，我们要为其设置一个labels，一个文件夹的1000应一个label，共68个abel，这是后面检验acc的唯一指标，即是否能把测试集的照片通过我们的网络输出到指定出口得到正确的label。"></a><strong>将训练集下的图片resize一下，伴随着打开每一个子文件夹，我们要为其设置一个labels，一个文件夹的1000应一个label，共68个abel，这是后面检验acc的唯一指标，即是否能把测试集的照片通过我们的网络输出到指定出口得到正确的label。</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">path=<span class="string">''</span></span><br><span class="line"><span class="comment">#将所有的图片resize成100*100</span></span><br><span class="line">w=<span class="number">128</span></span><br><span class="line">h=<span class="number">128</span></span><br><span class="line">c=<span class="number">3</span></span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_img</span><span class="params">(path)</span>:</span></span><br><span class="line">    cate=[path+<span class="string">'/'</span>+x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> os.path.isdir(path+<span class="string">'/'</span>+x)]</span><br><span class="line">    imgs=[]</span><br><span class="line">    labels=[]</span><br><span class="line">    <span class="keyword">for</span> idx,folder <span class="keyword">in</span> enumerate(cate):</span><br><span class="line">        <span class="keyword">for</span> im <span class="keyword">in</span> glob.glob(folder+<span class="string">'/*.png'</span>):</span><br><span class="line">            print(<span class="string">'reading the images:%s'</span>%(im))</span><br><span class="line">            img=io.imread(im)</span><br><span class="line">            img=transform.resize(img,(w,h,c))</span><br><span class="line">            imgs.append(img)</span><br><span class="line">            labels.append(idx)</span><br><span class="line">    <span class="keyword">return</span> np.asarray(imgs,np.float32),np.asarray(labels,np.int32) </span><br><span class="line">data,label=read_img(path)</span><br><span class="line"><span class="comment"># 将所有数据分为训练集和验证集</span></span><br><span class="line">ratio = <span class="number">0.95</span><span class="comment">#训练集占比</span></span><br><span class="line">s = np.int ( num_example * ratio )</span><br><span class="line">x_train = data[:s]</span><br><span class="line">y_train = label[:s]</span><br><span class="line">x_val = data[s:]</span><br><span class="line">y_val = label[s:]</span><br><span class="line"><span class="comment"># -----------------构建网络----------------------</span></span><br><span class="line"><span class="comment"># 占位符</span></span><br><span class="line">x = tf.placeholder ( tf.float32, shape=[<span class="literal">None</span>, w, h, c], name=<span class="string">'x'</span> )</span><br><span class="line">y_ = tf.placeholder ( tf.int32, shape=[<span class="literal">None</span>, ], name=<span class="string">'y_'</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CNNlayer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 第一个卷积层（128——&gt;64)</span></span><br><span class="line">    conv1 = tf.layers.conv2d (</span><br><span class="line">        inputs=x,</span><br><span class="line">        filters=<span class="number">32</span>,</span><br><span class="line">        kernel_size=[<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">        padding=<span class="string">"same"</span>,</span><br><span class="line">        activation=tf.nn.relu,        kernel_initializer=tf.truncated_normal_initializer ( stddev=<span class="number">0.01</span> ) )</span><br><span class="line">    pool1 = tf.layers.max_pooling2d ( inputs=conv1, pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=<span class="number">2</span> )</span><br><span class="line">    <span class="comment"># 第二个卷积层(64-&gt;32)</span></span><br><span class="line">    conv2 = tf.layers.conv2d (</span><br><span class="line">        inputs=pool1,</span><br><span class="line">        filters=<span class="number">64</span>,</span><br><span class="line">        kernel_size=[<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">        padding=<span class="string">"same"</span>,</span><br><span class="line">        activation=tf.nn.relu,        kernel_initializer=tf.truncated_normal_initializer ( stddev=<span class="number">0.01</span> ) )</span><br><span class="line">    pool2 = tf.layers.max_pooling2d ( inputs=conv2, pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=<span class="number">2</span> )</span><br><span class="line">    <span class="comment"># 第三个卷积层(32-&gt;16)</span></span><br><span class="line">    conv3 = tf.layers.conv2d (</span><br><span class="line">        inputs=pool2,</span><br><span class="line">        filters=<span class="number">128</span>,</span><br><span class="line">        kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">        padding=<span class="string">"same"</span>,</span><br><span class="line">        activation=tf.nn.relu,        kernel_initializer=tf.truncated_normal_initializer ( stddev=<span class="number">0.01</span> ) )</span><br><span class="line">    pool3 = tf.layers.max_pooling2d ( inputs=conv3, pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=<span class="number">2</span> )</span><br><span class="line">    <span class="comment"># 第四个卷积层(16-&gt;8)</span></span><br><span class="line">    conv4 = tf.layers.conv2d (</span><br><span class="line">        inputs=pool3,</span><br><span class="line">        filters=<span class="number">128</span>,</span><br><span class="line">        kernel_size=[<span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">        padding=<span class="string">"same"</span>,</span><br><span class="line">        activation=tf.nn.relu,      kernel_initializer=tf.truncated_normal_initializer ( stddev=<span class="number">0.01</span> ) )</span><br><span class="line">    pool4 = tf.layers.max_pooling2d ( inputs=conv4, pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=<span class="number">2</span> )</span><br><span class="line">    re1 = tf.reshape ( pool4, [<span class="number">-1</span>, <span class="number">8</span> * <span class="number">8</span> * <span class="number">128</span>] )</span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    dense1 = tf.layers.dense ( inputs=re1,</span><br><span class="line">                               units=<span class="number">1024</span>,</span><br><span class="line">                               activation=tf.nn.relu,                               kernel_initializer=tf.truncated_normal_initializer ( stddev=<span class="number">0.01</span> ),                               kernel_regularizer=tf.contrib.layers.l2_regularizer ( <span class="number">0.003</span> ) )</span><br><span class="line">    dense2 = tf.layers.dense ( inputs=dense1,</span><br><span class="line">                              units=<span class="number">512</span>,</span><br><span class="line">                              activation=tf.nn.relu,                               </span><br><span class="line">kernel_initializer=tf.truncated_normal_initializer ( stddev=<span class="number">0.01</span> ),                               kernel_regularizer=tf.contrib.layers.l2_regularizer ( <span class="number">0.003</span> ) )</span><br><span class="line">    logits = tf.layers.dense ( inputs=dense2,</span><br><span class="line">                               units=<span class="number">68</span>,</span><br><span class="line">                               activation=<span class="literal">None</span>,                               kernel_initializer=tf.truncated_normal_initializer ( stddev=<span class="number">0.01</span> ),</span><br><span class="line">                               kernel_regularizer=tf.contrib.layers.l2_regularizer ( <span class="number">0.003</span> ) )</span><br><span class="line">    <span class="keyword">return</span> logits</span><br><span class="line"><span class="comment"># ----------网络结束---------------------------</span></span><br><span class="line"><span class="comment"># 定义一个函数，按批次取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minibatches</span><span class="params">(inputs=None, targets=None, batch_size=None, shuffle=False)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len ( inputs ) == len ( targets )</span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        indices = np.arange ( len ( inputs ) )</span><br><span class="line">        np.random.shuffle ( indices )</span><br><span class="line">    <span class="keyword">for</span> start_idx <span class="keyword">in</span> range ( <span class="number">0</span>, len ( inputs ) - batch_size + <span class="number">1</span>, batch_size ):</span><br><span class="line">        <span class="keyword">if</span> shuffle:</span><br><span class="line">            excerpt = indices[start_idx:start_idx + batch_size]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            excerpt = slice ( start_idx, start_idx + batch_size )</span><br><span class="line">        <span class="keyword">yield</span> inputs[excerpt], targets[excerpt]</span><br><span class="line"><span class="comment"># 训练和测试数据，可将n_epoch设置更大一些</span></span><br><span class="line">saver = tf.train.Saver ( max_to_keep=<span class="number">3</span> )</span><br><span class="line">max_acc = <span class="number">0</span></span><br><span class="line">f = open ( <span class="string">'ckpt1/acc.txt'</span>, <span class="string">'w'</span> )</span><br><span class="line">n_epoch = <span class="number">10</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">sess = tf.InteractiveSession ( )</span><br><span class="line">sess.run ( tf.global_variables_initializer ( ) )</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range ( n_epoch ):</span><br><span class="line">    start_time = time.time ( )</span><br><span class="line">    <span class="comment"># training</span></span><br><span class="line">    train_loss, train_acc, n_batch = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_train_a, y_train_a <span class="keyword">in</span> minibatches ( x_train, y_train, batch_size, shuffle=<span class="literal">True</span> ):</span><br><span class="line">        _, err, ac = sess.run ( [train_op, loss, acc], feed_dict=&#123;x: x_train_a, y_: y_train_a&#125; )</span><br><span class="line">        train_loss += err;</span><br><span class="line">        train_acc += ac;</span><br><span class="line">        n_batch += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> ( <span class="string">"   train loss: %f"</span> % (train_loss / n_batch) )</span><br><span class="line">    <span class="keyword">print</span> ( <span class="string">"   train acc: %f"</span> % (train_acc / n_batch) )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># validation</span></span><br><span class="line">    val_loss, val_acc, n_batch = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_val_a, y_val_a <span class="keyword">in</span> minibatches ( x_val, y_val, batch_size, shuffle=<span class="literal">False</span> ):</span><br><span class="line">        err, ac = sess.run ( [loss, acc], feed_dict=&#123;x: x_val_a, y_: y_val_a&#125; )</span><br><span class="line">        val_loss += err;</span><br><span class="line">        val_acc += ac;</span><br><span class="line">        n_batch += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> ( <span class="string">"   validation loss: %f"</span> % (val_loss / n_batch) )</span><br><span class="line">    <span class="keyword">print</span> ( <span class="string">"   validation acc: %f"</span> % (val_acc / n_batch) )</span><br><span class="line">    f.write ( str ( epoch + <span class="number">1</span> ) + <span class="string">', val_acc: '</span> + str ( val_acc ) + <span class="string">'\n'</span> )</span><br><span class="line">    <span class="keyword">if</span> val_acc &gt; max_acc:</span><br><span class="line">        max_acc = val_acc</span><br><span class="line">        saver.save ( sess, <span class="string">'ckpt1/faces.ckpt'</span>, global_step=epoch + <span class="number">1</span> )</span><br><span class="line">f.close ( )</span><br><span class="line"></span><br><span class="line">detector = dlib.get_frontal_face_detector ( )</span><br><span class="line">  <span class="comment"># 获取人脸分类器</span></span><br><span class="line">ID = (<span class="number">1511346</span>,<span class="number">1610731</span>,<span class="number">1610763</span>,<span class="number">1610260</span>,<span class="number">1611407</span>,<span class="number">1611408</span>,      <span class="number">1611409</span>,<span class="number">1611412</span>,<span class="number">1611413</span>,<span class="number">1611415</span>,<span class="number">1611417</span>,<span class="number">1611418</span>,     <span class="number">1611419</span>,<span class="number">1611420</span>,<span class="number">1611421</span>,<span class="number">1611424</span>,<span class="number">1611425</span>,<span class="number">1611426</span>,      <span class="number">1611427</span>,<span class="number">1611430</span>,<span class="number">1611431</span>,<span class="number">1611433</span>,<span class="number">1611434</span>,<span class="number">1611436</span>,      <span class="number">1611437</span>,<span class="number">1611438</span>,<span class="number">1611440</span>,<span class="number">1611444</span>,<span class="number">1611446</span>,<span class="number">1611447</span>,      <span class="number">1611449</span>,<span class="number">1611450</span>,<span class="number">1611451</span>,<span class="number">1511453</span>,<span class="number">1611455</span>,<span class="number">1611458</span>,     <span class="number">1611459</span>,<span class="number">1611460</span>,<span class="number">1611461</span>,<span class="number">1611462</span>,<span class="number">1611470</span>,<span class="number">1611471</span>,    <span class="number">1611472</span>,<span class="number">1611472</span>,<span class="number">1611476</span>,<span class="number">1611478</span>,<span class="number">1611480</span>,<span class="number">1611482</span>,  <span class="number">1611483</span>,<span class="number">1611486</span>,<span class="number">1611487</span>,<span class="number">1611488</span>,<span class="number">1611490</span>,<span class="number">1611491</span>, <span class="number">1611492</span>,<span class="number">1611493</span>,<span class="number">1611494</span>,<span class="number">1613371</span>,<span class="number">1613376</span>,<span class="number">1613378</span>,  <span class="number">1613550</span>,<span class="number">1711459</span> )</span><br><span class="line"><span class="comment">#两个操作是拿到dlib的人脸分类器（相当于dlib的训练代码跑完的结果存下的参数变量结构等东西），然后建个数组当输出和ID的映射</span></span><br><span class="line"><span class="comment">#最终交互检验：</span></span><br><span class="line">user = input ( <span class="string">"图片（G）还是摄像头（V）:"</span> )</span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"G"</span>:</span><br><span class="line">    path = input ( <span class="string">"图片路径名是："</span> )</span><br><span class="line">    img = cv2.imread ( path )</span><br><span class="line">    dets = detector ( img, <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">print</span> ( <span class="string">"Number of faces detected: &#123;&#125;"</span>.format ( len ( dets ) ) )</span><br><span class="line">    <span class="keyword">for</span> index, face <span class="keyword">in</span> enumerate ( dets ):</span><br><span class="line">        <span class="keyword">print</span> (</span><br><span class="line">            <span class="string">'face &#123;&#125;; left &#123;&#125;; top &#123;&#125;; right &#123;&#125;; bottom &#123;&#125;'</span>.format ( index, face.left ( ), face.top ( ), face.right ( ),                                                                    face.bottom ( ) ) )</span><br><span class="line">        left = face.left ( )</span><br><span class="line">        top = face.top ( )</span><br><span class="line">        right = face.right ( )</span><br><span class="line">        bottom = face.bottom ( )</span><br><span class="line">        cv2.rectangle ( img, (left, top), (right, bottom), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span> )</span><br><span class="line">        io.imsave ( <span class="string">'temp.png'</span>, img )</span><br><span class="line">        img1 = io.imread ( <span class="string">'temp.png'</span> )</span><br><span class="line">        img1 = transform.resize ( img1, (w, h, c) )</span><br><span class="line">        cv2.imshow ( <span class="string">'image'</span>, img1 )</span><br><span class="line">        img1 = img[top:bottom, left:right]</span><br><span class="line">        img1 = transform.resize ( img1, (w, h, c) )</span><br><span class="line">        <span class="comment"># cv2.imshow('image1',img)</span></span><br><span class="line">        res = sess.run ( predict, feed_dict=&#123;x: [img1]&#125; )</span><br><span class="line">        <span class="keyword">print</span> ( ID[res[<span class="number">0</span>]] )</span><br><span class="line">    <span class="keyword">if</span> len ( dets ) == <span class="number">0</span>:</span><br><span class="line">        img = transform.resize ( img, (w, h, c) )</span><br><span class="line">        res = sess.run ( predict, feed_dict=&#123;x: [img]&#125; )</span><br><span class="line">        <span class="keyword">print</span> ( ID[res[<span class="number">0</span>]] )</span><br><span class="line">        cv2.waitKey ( <span class="number">0</span> )</span><br><span class="line">        cv2.destroyAllWindows ( )</span><br><span class="line">    cv2.waitKey ( <span class="number">0</span> )</span><br><span class="line">    cv2.destroyAllWindows ( )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 打开摄像头</span></span><br><span class="line">    cap = cv2.VideoCapture ( <span class="number">0</span> )</span><br><span class="line">    <span class="comment"># 视屏封装格式</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ret, frame = cap.read ( )</span><br><span class="line">        gray = cv2.cvtColor ( frame, cv2.COLOR_BGR2GRAY )</span><br><span class="line">        cv2.imshow ( <span class="string">'frame'</span>, frame )</span><br><span class="line">        <span class="comment"># 抓取图像，s画人脸框，q结束识别</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey ( <span class="number">1</span> ) &amp; <span class="number">0xFF</span> == ord ( <span class="string">'s'</span> ):</span><br><span class="line">            cv2.imwrite ( <span class="string">'now.png'</span>, frame )</span><br><span class="line">            img = cv2.imread ( <span class="string">"now.png"</span> )</span><br><span class="line">            dets = detector ( img, <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">print</span> ( <span class="string">"Number of faces detected: &#123;&#125;"</span>.format ( len ( dets ) ) )</span><br><span class="line">            <span class="keyword">for</span> index, face <span class="keyword">in</span> enumerate ( dets ):</span><br><span class="line">                <span class="keyword">print</span> ( <span class="string">'face &#123;&#125;; left &#123;&#125;; top &#123;&#125;; right &#123;&#125;; bottom &#123;&#125;'</span>.format ( index,                                                                                 face.left ( ), face.top ( ),                                                                                 face.right ( ), face.bottom ( ) ) )</span><br><span class="line">                left = face.left ( )</span><br><span class="line">                top = face.top ( )</span><br><span class="line">                right = face.right ( )</span><br><span class="line">                bottom = face.bottom ( )</span><br><span class="line">                img = img[top:bottom, left:right]</span><br><span class="line">            <span class="comment"># img=io.imread('image/now.png')</span></span><br><span class="line">            img = transform.resize ( img, (w, h, c) )</span><br><span class="line">            res = sess.run ( predict, feed_dict=&#123;x: [img]&#125; )</span><br><span class="line">            <span class="keyword">print</span> ( ID[res[<span class="number">0</span>]] )</span><br><span class="line">        <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure><h4 id="实验结果分析"><a href="#实验结果分析" class="headerlink" title="实验结果分析"></a>实验结果分析</h4><h5 id="最终的训练的结果："><a href="#最终的训练的结果：" class="headerlink" title="最终的训练的结果："></a>最终的训练的结果：</h5><p><img src="https://pic.superbed.cn/item/5db91f90bd461d945a546d5b.jpg" alt></p><h5 id="根据我自己的数据化的数据图："><a href="#根据我自己的数据化的数据图：" class="headerlink" title="根据我自己的数据化的数据图："></a>根据我自己的数据化的数据图：</h5><p><img src="https://pic.superbed.cn/item/5db91fb3bd461d945a5476e3.jpg" alt></p><h5 id="识别过程：（拿我自己的照片做的测试）："><a href="#识别过程：（拿我自己的照片做的测试）：" class="headerlink" title="识别过程：（拿我自己的照片做的测试）："></a>识别过程：（拿我自己的照片做的测试）：</h5><p><img src="https://i.loli.net/2019/10/30/g7GiJwR8lXVBT5a.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
